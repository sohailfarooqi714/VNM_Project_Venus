{
    "uid": "10D09A64K4079A4885S9E30E3D7C34151135",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Viewport",
        "type": "game_script",
        "order": 2,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Viewport\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Viewport extends gs.Object_Visual\n    @objectCodecBlackList = [\"parent\"]\n    \n    ###*\n    * A game object used for viewports.\n    *\n    * @module gs\n    * @class Object_Viewport\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (viewport) ->\n        super()\n        \n        if viewport\n            @dstRect = new Rect(viewport.rect.x, viewport.rect.y, viewport.rect.width, viewport.rect.height)\n        else\n            @dstRect = new Rect(0, 0, Graphics.width, Graphics.height)\n            \n        ###*\n        * The color tone of the object used for the visual presentation.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = new Tone(0, 0, 0, 0)\n        \n        ###*\n        * The color of the object used for the visual presentation.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = new Color(255, 255, 255, 0)\n        \n        ###*\n        * The rotation-angle of the picture in degrees. The rotation center depends on the\n        * anchor-point.\n        * @property angle\n        * @type number\n        ###\n        @angle = 0\n\n        ###*\n        * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type vn.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Sprite\n        ###\n        @visual = new gs.Component_Viewport(viewport)\n        \n        @addComponent(@visual)\n        @addComponent(@animator)\n        \n        #@update()\n        \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ### \n    toDataBundle: ->\n        components = @componentsToDataBundle(gs.Component_Animation)\n                \n        result = {\n            dstRect: @dstRect,\n            origin: @origin,\n            zIndex: @zIndex,\n            motionBlur: @motionBlur,\n            zoom: @zoom,\n            angle: @angle,\n            anchor: @anchor,\n            offset: @offset,\n            tone: @tone,\n            image: @image,\n            components: components\n        }\n    \n        return result\n        \ngs.Object_Viewport = Object_Viewport",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Viewport,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Viewport = (function(superClass) {\n    extend(Object_Viewport, superClass);\n\n    Object_Viewport.objectCodecBlackList = [\"parent\"];\n\n\n    /**\n    * A game object used for viewports.\n    *\n    * @module gs\n    * @class Object_Viewport\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_Viewport(viewport) {\n      Object_Viewport.__super__.constructor.call(this);\n      if (viewport) {\n        this.dstRect = new Rect(viewport.rect.x, viewport.rect.y, viewport.rect.width, viewport.rect.height);\n      } else {\n        this.dstRect = new Rect(0, 0, Graphics.width, Graphics.height);\n      }\n\n      /**\n      * The color tone of the object used for the visual presentation.\n      * @property tone\n      * @type gs.Tone\n       */\n      this.tone = new Tone(0, 0, 0, 0);\n\n      /**\n      * The color of the object used for the visual presentation.\n      * @property color\n      * @type gs.Color\n       */\n      this.color = new Color(255, 255, 255, 0);\n\n      /**\n      * The rotation-angle of the picture in degrees. The rotation center depends on the\n      * anchor-point.\n      * @property angle\n      * @type number\n       */\n      this.angle = 0;\n\n      /**\n      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type vn.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Sprite\n       */\n      this.visual = new gs.Component_Viewport(viewport);\n      this.addComponent(this.visual);\n      this.addComponent(this.animator);\n    }\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Viewport.prototype.toDataBundle = function() {\n      var components, result;\n      components = this.componentsToDataBundle(gs.Component_Animation);\n      result = {\n        dstRect: this.dstRect,\n        origin: this.origin,\n        zIndex: this.zIndex,\n        motionBlur: this.motionBlur,\n        zoom: this.zoom,\n        angle: this.angle,\n        anchor: this.anchor,\n        offset: this.offset,\n        tone: this.tone,\n        image: this.image,\n        components: components\n      };\n      return result;\n    };\n\n    return Object_Viewport;\n\n  })(gs.Object_Visual);\n\n  gs.Object_Viewport = Object_Viewport;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}