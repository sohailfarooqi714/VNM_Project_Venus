{
    "uid": "9D36E101K281EA4982SB7FDE028B91DCAF6A",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Text",
        "type": "game_script",
        "order": 8,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Text\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Text extends gs.Object_Text\n    #\n    # The text to display.\n    # @property text\n    # @type string\n    #\n    @accessors \"text\", \n        set: (v) -> \n            if v != @text_\n                @text_ = v\n                @needsUpdate = yes\n            \n        get: -> @text_\n        \n    @accessors \"visible\", \n        set: (v) -> \n            if v != @visible_\n                @visible_ = v\n                @needsUpdate = yes\n                @fullRefresh()\n            \n        get: -> @visible_ and (!@parent or @parent.visible)\n        \n    ###*\n    * A UI object to display text on screen.\n    *\n    * @module ui\n    * @class Object_Text\n    * @extends gs.Object_Text\n    * @memberof ui\n    * @constructor\n    ### \n    constructor: ->\n        super()\n        \n        ###*\n        * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object\n        * will not change any binding-targets for the current binding-execution period.\n        * @property breakBindingChain\n        * @type boolean\n        ###\n        @breakBindingChain = no\n        @dstRect = new ui.UIElementRectangle(this)\n        @wordWrap = yes\n        @controlsByStyle = new Array(ui.UIManager.stylesById.length)\n        @styles = []\n        @activeStyles = []\n        @data = new Array(10)\n\n        ###*\n        * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n        * @property padding\n        * @type ui.Space\n        ###\n        @padding = new ui.Space(0, 0, 0, 0)\n        \n        ###*\n        * The UI object's margin. The margin defines an extra space around the UI object. \n        * The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n        * @property margin\n        * @type Object\n        ###\n        @margin = new ui.Space(0, 0, 0, 0)\n        \n        ###*\n        * An event-emitter to emit events.\n        * @property events\n        * @type gs.Component_EventEmitter\n        ###\n        @events = new gs.EventEmitter()\n        @addComponent(@events)\n        \nui.Object_Text = Object_Text",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Text,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Text = (function(superClass) {\n    extend(Object_Text, superClass);\n\n    Object_Text.accessors(\"text\", {\n      set: function(v) {\n        if (v !== this.text_) {\n          this.text_ = v;\n          return this.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.text_;\n      }\n    });\n\n    Object_Text.accessors(\"visible\", {\n      set: function(v) {\n        if (v !== this.visible_) {\n          this.visible_ = v;\n          this.needsUpdate = true;\n          return this.fullRefresh();\n        }\n      },\n      get: function() {\n        return this.visible_ && (!this.parent || this.parent.visible);\n      }\n    });\n\n\n    /**\n    * A UI object to display text on screen.\n    *\n    * @module ui\n    * @class Object_Text\n    * @extends gs.Object_Text\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_Text() {\n      Object_Text.__super__.constructor.call(this);\n\n      /**\n      * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object\n      * will not change any binding-targets for the current binding-execution period.\n      * @property breakBindingChain\n      * @type boolean\n       */\n      this.breakBindingChain = false;\n      this.dstRect = new ui.UIElementRectangle(this);\n      this.wordWrap = true;\n      this.controlsByStyle = new Array(ui.UIManager.stylesById.length);\n      this.styles = [];\n      this.activeStyles = [];\n      this.data = new Array(10);\n\n      /**\n      * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n      * @property padding\n      * @type ui.Space\n       */\n      this.padding = new ui.Space(0, 0, 0, 0);\n\n      /**\n      * The UI object's margin. The margin defines an extra space around the UI object. \n      * The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n      * @property margin\n      * @type Object\n       */\n      this.margin = new ui.Space(0, 0, 0, 0);\n\n      /**\n      * An event-emitter to emit events.\n      * @property events\n      * @type gs.Component_EventEmitter\n       */\n      this.events = new gs.EventEmitter();\n      this.addComponent(this.events);\n    }\n\n    return Object_Text;\n\n  })(gs.Object_Text);\n\n  ui.Object_Text = Object_Text;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}