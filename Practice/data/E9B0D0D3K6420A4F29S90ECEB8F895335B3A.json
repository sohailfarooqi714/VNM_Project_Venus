{
    "uid": "E9B0D0D3K6420A4F29S90ECEB8F895335B3A",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Background",
        "type": "game_script",
        "order": 13,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Background\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Background extends gs.Object_Visual\n    @objectCodecBlackList = [\"parent\"]\n    \n    ###*\n    * A game object used for backgrounds in a scene.\n    *\n    * @module vn\n    * @class Object_Background\n    * @extends gs.Object_Visual\n    * @memberof vn\n    * @constructor\n    ###\n    constructor: (parent, data) ->\n        super(data)\n        @zIndex = 0\n        \n        ###*\n        * The object's source rectangle. It controls which part of the object's image is used\n        * for visual presentation.\n        * @property srcRect\n        * @type gs.Rect\n        ###\n        @srcRect = new Rect()\n\n        ###*\n        * The object's mask to execute masking-effects on it.\n        * @property mask\n        * @type gs.Mask\n        ###\n        @mask = new gs.Mask()\n        \n        ###*\n        * The rotation-angle of the background in degrees. The rotation center depends on the\n        * anchor-point.\n        * @property angle\n        * @type number\n        ###\n        @angle = 0\n        \n        ###*\n        * The object's image used for visual presentation.\n        * @property image\n        * @type string\n        ###\n        @image = \"\"\n        \n        ###*\n        * The color tone of the object used for the visual presentation.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = new Tone(0, 0, 0, 0)\n\n        ###*\n        * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type vn.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Sprite\n        ###\n        @visual = new gs.Component_TilingPlane()\n        @visual.imageFolder = \"Graphics/Backgrounds\"\n        \n        @addComponent(@visual)\n        @addComponent(@animator)\n        @componentsFromDataBundle(data)\n        \n        #@update()\n    \n    ###*\n    * Restores the game object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n    ###    \n    restore: (data) ->\n        super(data)\n        \n        @srcRect = gs.Rect.fromObject(data.srcRect)\n        @mask = gs.Mask.fromObject(data.mask)\n        @visual.looping = data.looping\n        \n        \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ### \n    toDataBundle: ->\n        components = @componentsToDataBundle(gs.Component_Animation)\n                \n        result = {\n            dstRect: @dstRect,\n            srcRect: @srcRect,\n            opacity: @opacity,\n            origin: @origin,\n            zIndex: @zIndex,\n            mask: @mask.toDataBundle(),\n            motionBlur: @motionBlur,\n            zoom: @zoom,\n            angle: @angle,\n            anchor: @anchor,\n            offset: @offset,\n            mirror: @mirror,\n            tone: @tone,\n            image: @image,\n            looping: @visual.looping,\n            components: components\n        }\n    \n        return result\n    \n    \nvn.Object_Background = Object_Background",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Background,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Background = (function(superClass) {\n    extend(Object_Background, superClass);\n\n    Object_Background.objectCodecBlackList = [\"parent\"];\n\n\n    /**\n    * A game object used for backgrounds in a scene.\n    *\n    * @module vn\n    * @class Object_Background\n    * @extends gs.Object_Visual\n    * @memberof vn\n    * @constructor\n     */\n\n    function Object_Background(parent, data) {\n      Object_Background.__super__.constructor.call(this, data);\n      this.zIndex = 0;\n\n      /**\n      * The object's source rectangle. It controls which part of the object's image is used\n      * for visual presentation.\n      * @property srcRect\n      * @type gs.Rect\n       */\n      this.srcRect = new Rect();\n\n      /**\n      * The object's mask to execute masking-effects on it.\n      * @property mask\n      * @type gs.Mask\n       */\n      this.mask = new gs.Mask();\n\n      /**\n      * The rotation-angle of the background in degrees. The rotation center depends on the\n      * anchor-point.\n      * @property angle\n      * @type number\n       */\n      this.angle = 0;\n\n      /**\n      * The object's image used for visual presentation.\n      * @property image\n      * @type string\n       */\n      this.image = \"\";\n\n      /**\n      * The color tone of the object used for the visual presentation.\n      * @property tone\n      * @type gs.Tone\n       */\n      this.tone = new Tone(0, 0, 0, 0);\n\n      /**\n      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type vn.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Sprite\n       */\n      this.visual = new gs.Component_TilingPlane();\n      this.visual.imageFolder = \"Graphics/Backgrounds\";\n      this.addComponent(this.visual);\n      this.addComponent(this.animator);\n      this.componentsFromDataBundle(data);\n    }\n\n\n    /**\n    * Restores the game object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n     */\n\n    Object_Background.prototype.restore = function(data) {\n      Object_Background.__super__.restore.call(this, data);\n      this.srcRect = gs.Rect.fromObject(data.srcRect);\n      this.mask = gs.Mask.fromObject(data.mask);\n      return this.visual.looping = data.looping;\n    };\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Background.prototype.toDataBundle = function() {\n      var components, result;\n      components = this.componentsToDataBundle(gs.Component_Animation);\n      result = {\n        dstRect: this.dstRect,\n        srcRect: this.srcRect,\n        opacity: this.opacity,\n        origin: this.origin,\n        zIndex: this.zIndex,\n        mask: this.mask.toDataBundle(),\n        motionBlur: this.motionBlur,\n        zoom: this.zoom,\n        angle: this.angle,\n        anchor: this.anchor,\n        offset: this.offset,\n        mirror: this.mirror,\n        tone: this.tone,\n        image: this.image,\n        looping: this.visual.looping,\n        components: components\n      };\n      return result;\n    };\n\n    return Object_Background;\n\n  })(gs.Object_Visual);\n\n  vn.Object_Background = Object_Background;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}