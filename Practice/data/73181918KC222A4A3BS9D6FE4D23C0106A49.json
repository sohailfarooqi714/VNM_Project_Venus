{
    "uid": "73181918KC222A4A3BS9D6FE4D23C0106A49",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_TintAnimation",
        "type": "game_script",
        "order": 3,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_TintAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_TintAnimation extends gs.Component_Animation\n    ###*\n    * Executes a tint-animation on a game-object. The tint is executed on\n    * the game object's tone-property.\n    *\n    * @module gs\n    * @class Component_TintAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        @sourceTone = data?.sourceTone\n        @targetTone = data?.targetTone\n        @easing = new gs.Easing(null, data?.easing)\n        @callback = null\n     \n    ###*\n    * Serializes the tint-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###    \n    toDataBundle: ->\n        easing: @easing,\n        sourceTone: @sourceTone,\n        targetTone: @targetTone\n     \n    ###*\n    * Updates the tint-animation.\n    *\n    * @method update\n    ###      \n    update: ->\n        super \n        if not @easing.isRunning then return\n        \n        @easing.updateValue()\n        a = @easing.value\n        \n        @object.tone.red = Math.floor((@sourceTone.red * a + @targetTone.red * (255 - a)) / 255)\n        @object.tone.green = Math.floor((@sourceTone.green * a + @targetTone.green * (255 - a)) / 255)\n        @object.tone.blue = Math.floor((@sourceTone.blue * a + @targetTone.blue * (255 - a)) / 255)\n        @object.tone.grey = Math.floor((@sourceTone.grey * a + @targetTone.grey * (255 - a)) / 255)\n        \n        if not @easing.isRunning\n            @callback?(@object, this)\n        \n    \n    ###*\n    * Starts the tint-animation.\n    *\n    * @method start\n    * @param {gs.Tone} tone The target-tone.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished. \n    ### \n    start: (tone, duration, easing, callback) ->\n\n        @callback = callback\n        if @object.tone.red == tone.red and @object.tone.green == tone.green and \n            @object.tone.blue == tone.blue and @object.tone.grey == tone.grey\n           @callback?(@object, this)\n           \n        if duration == 0 or @isInstantSkip()\n            @object.tone = tone\n            @callback?(@object, this)\n        else\n            @sourceTone = new Tone(@object.tone)\n            @targetTone = tone\n            @callback = callback\n            @easing.type = easing\n            @easing.startValue(255, -255, duration)\n        \ngs.Component_TintAnimation = Component_TintAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_TintAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_TintAnimation = (function(superClass) {\n    extend(Component_TintAnimation, superClass);\n\n\n    /**\n    * Executes a tint-animation on a game-object. The tint is executed on\n    * the game object's tone-property.\n    *\n    * @module gs\n    * @class Component_TintAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_TintAnimation(data) {\n      Component_TintAnimation.__super__.constructor.apply(this, arguments);\n      this.sourceTone = data != null ? data.sourceTone : void 0;\n      this.targetTone = data != null ? data.targetTone : void 0;\n      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);\n      this.callback = null;\n    }\n\n\n    /**\n    * Serializes the tint-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_TintAnimation.prototype.toDataBundle = function() {\n      return {\n        easing: this.easing,\n        sourceTone: this.sourceTone,\n        targetTone: this.targetTone\n      };\n    };\n\n\n    /**\n    * Updates the tint-animation.\n    *\n    * @method update\n     */\n\n    Component_TintAnimation.prototype.update = function() {\n      var a;\n      Component_TintAnimation.__super__.update.apply(this, arguments);\n      if (!this.easing.isRunning) {\n        return;\n      }\n      this.easing.updateValue();\n      a = this.easing.value;\n      this.object.tone.red = Math.floor((this.sourceTone.red * a + this.targetTone.red * (255 - a)) / 255);\n      this.object.tone.green = Math.floor((this.sourceTone.green * a + this.targetTone.green * (255 - a)) / 255);\n      this.object.tone.blue = Math.floor((this.sourceTone.blue * a + this.targetTone.blue * (255 - a)) / 255);\n      this.object.tone.grey = Math.floor((this.sourceTone.grey * a + this.targetTone.grey * (255 - a)) / 255);\n      if (!this.easing.isRunning) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Starts the tint-animation.\n    *\n    * @method start\n    * @param {gs.Tone} tone The target-tone.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished.\n     */\n\n    Component_TintAnimation.prototype.start = function(tone, duration, easing, callback) {\n      this.callback = callback;\n      if (this.object.tone.red === tone.red && this.object.tone.green === tone.green && this.object.tone.blue === tone.blue && this.object.tone.grey === tone.grey) {\n        if (typeof this.callback === \"function\") {\n          this.callback(this.object, this);\n        }\n      }\n      if (duration === 0 || this.isInstantSkip()) {\n        this.object.tone = tone;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        this.sourceTone = new Tone(this.object.tone);\n        this.targetTone = tone;\n        this.callback = callback;\n        this.easing.type = easing;\n        return this.easing.startValue(255, -255, duration);\n      }\n    };\n\n    return Component_TintAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_TintAnimation = Component_TintAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}