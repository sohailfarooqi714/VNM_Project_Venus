{
    "uid": "D1A8AFB3K8CF8A471DSA610E51324BC0F2CC",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_FieldAnimation",
        "type": "game_script",
        "order": 5,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_FieldAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\n\n###*\n* Different methods of field-animation.\n*\n* @module gs\n* @class AnimationLoopType\n* @memberof gs\n* @static\n* @final\n###\nclass FieldAnimationMethod\n    @initialize: ->\n        ###*\n        * Set the value calculated by the easing-logic.\n        * @property SET\n        * @static\n        * @final\n        ###\n        @SET = 0\n        \n        ###*\n        * Adds the value calculated by the easing-logic.\n        * @property ADD\n        * @static\n        * @final\n        ###\n        @ADD = 1\n    \nFieldAnimationMethod.initialize()\ngs.FieldAnimationMethod = FieldAnimationMethod\n\nclass Component_FieldAnimation extends gs.Component_Animation\n    ###*\n    * Executes a field-animation. A field-animation animates a certain\n    * property of the game-object as long as it is a number-property.\n    *\n    * @module gs\n    * @class Component_FieldAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        ###*\n        * The field to animate as property-path.\n        * @property field\n        * @type string\n        ###\n        @field = data?.field\n        \n        ###*\n        * The animation-method.\n        * @property method\n        * @type gs.FieldAnimationMethod\n        * @default gs.FieldAnimationMethod.SET\n        ###\n        @method = data?.method\n        \n        ###*\n        * The easing-object used for the animation.\n        * @property easing\n        * @type gs.Easing\n        ###\n        @easing = new gs.Easing(null, data?.easing)\n        \n    ###*\n    * Serializes the path-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###\n    toDataBundle: ->\n        easing: @easing,\n        method: @method,\n        field: @field\n     \n     \n    ###*\n    * Updates the field-animation.\n    *\n    * @method update\n    ###   \n    update: ->\n        super\n        if not @easing.isRunning then return\n        \n        @easing.updateValue()\n        value = ui.Component_BindingHandler.resolveFieldPath(@object, @field)\n        \n        if !@method # Set\n            value.set(@object, @easing.value)\n        else        # Add\n            value.set(@object, value.get(@object) + @easing.value)\n            \n        if not @easing.isRunning\n            @callback?(@object, this)\n     \n    ###*\n    * Starts the field-animation.\n    *\n    * @method start\n    * @param {number} Value The target value.\n    * @param {string} field The name of the field/property.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if blending is finished. \n    ###   \n    start: (value, field, duration, easingType, callback) ->\n        @callback = callback\n        @field = field\n        @easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]\n        \n        if duration == 0 or @isInstantSkip()\n            valueField = ui.Component_BindingHandler.resolveFieldPath(@object, @field)\n            valueField.set(@object, value)\n            @callback?(@object, this)\n        else\n            startValue = ui.Component_BindingHandler.fieldValue(@object, field)\n            @easing.startValue(startValue, value - startValue, duration)\n        \ngs.Component_FieldAnimation = Component_FieldAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n\n/**\n* Different methods of field-animation.\n*\n* @module gs\n* @class AnimationLoopType\n* @memberof gs\n* @static\n* @final\n */\n\n(function() {\n  var Component_FieldAnimation, FieldAnimationMethod,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FieldAnimationMethod = (function() {\n    function FieldAnimationMethod() {}\n\n    FieldAnimationMethod.initialize = function() {\n\n      /**\n      * Set the value calculated by the easing-logic.\n      * @property SET\n      * @static\n      * @final\n       */\n      this.SET = 0;\n\n      /**\n      * Adds the value calculated by the easing-logic.\n      * @property ADD\n      * @static\n      * @final\n       */\n      return this.ADD = 1;\n    };\n\n    return FieldAnimationMethod;\n\n  })();\n\n  FieldAnimationMethod.initialize();\n\n  gs.FieldAnimationMethod = FieldAnimationMethod;\n\n  Component_FieldAnimation = (function(superClass) {\n    extend(Component_FieldAnimation, superClass);\n\n\n    /**\n    * Executes a field-animation. A field-animation animates a certain\n    * property of the game-object as long as it is a number-property.\n    *\n    * @module gs\n    * @class Component_FieldAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_FieldAnimation(data) {\n      Component_FieldAnimation.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The field to animate as property-path.\n      * @property field\n      * @type string\n       */\n      this.field = data != null ? data.field : void 0;\n\n      /**\n      * The animation-method.\n      * @property method\n      * @type gs.FieldAnimationMethod\n      * @default gs.FieldAnimationMethod.SET\n       */\n      this.method = data != null ? data.method : void 0;\n\n      /**\n      * The easing-object used for the animation.\n      * @property easing\n      * @type gs.Easing\n       */\n      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);\n    }\n\n\n    /**\n    * Serializes the path-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_FieldAnimation.prototype.toDataBundle = function() {\n      return {\n        easing: this.easing,\n        method: this.method,\n        field: this.field\n      };\n    };\n\n\n    /**\n    * Updates the field-animation.\n    *\n    * @method update\n     */\n\n    Component_FieldAnimation.prototype.update = function() {\n      var value;\n      Component_FieldAnimation.__super__.update.apply(this, arguments);\n      if (!this.easing.isRunning) {\n        return;\n      }\n      this.easing.updateValue();\n      value = ui.Component_BindingHandler.resolveFieldPath(this.object, this.field);\n      if (!this.method) {\n        value.set(this.object, this.easing.value);\n      } else {\n        value.set(this.object, value.get(this.object) + this.easing.value);\n      }\n      if (!this.easing.isRunning) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Starts the field-animation.\n    *\n    * @method start\n    * @param {number} Value The target value.\n    * @param {string} field The name of the field/property.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if blending is finished.\n     */\n\n    Component_FieldAnimation.prototype.start = function(value, field, duration, easingType, callback) {\n      var startValue, valueField;\n      this.callback = callback;\n      this.field = field;\n      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];\n      if (duration === 0 || this.isInstantSkip()) {\n        valueField = ui.Component_BindingHandler.resolveFieldPath(this.object, this.field);\n        valueField.set(this.object, value);\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        startValue = ui.Component_BindingHandler.fieldValue(this.object, field);\n        return this.easing.startValue(startValue, value - startValue, duration);\n      }\n    };\n\n    return Component_FieldAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_FieldAnimation = Component_FieldAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}