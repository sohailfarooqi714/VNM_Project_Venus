{
    "uid": "FB6E8ED2KD8BFA475ESB26EEEF8ABABE9026",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_RotateAnimation",
        "type": "game_script",
        "order": 7,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_RotateAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_RotateAnimation extends gs.Component_Animation\n    ###*\n    * Executes a rotate-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_RotateAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        @easing = new gs.Easing(null, data?.easing)\n        @callback = null\n    \n    ###*\n    * Serializes the rotate-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###      \n    toDataBundle: ->\n        easing: @easing\n    \n    ###*\n    * Updates the rotate-animation.\n    *\n    * @method update\n    ###      \n    update: ->\n        super()\n        if not @easing.isRunning then return\n        \n        @object.angle = @easing.value\n        @easing.updateValue()\n        \n        if not @easing.isRunning and not @easing.isEndless\n            @object.angle = Math.round(@object.angle)\n            @callback?(@object, this)\n\n    \n    ###*\n    * Starts the rotate-animation.\n    *\n    * @method rotateTo\n    * @param {number} angle The target angle\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished. \n    ### \n    rotateTo: (angle, duration, easingType, callback) ->\n        @easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]\n        @callback = callback\n        \n        if duration == 0 or GameManager.tempSettings.skip\n            @object.angle = angle\n            @callback?(@object, this)\n        else\n            @easing.startValue(@object.angle, angle - @object.angle, duration)\n            \n    ###*\n    * Starts the rotate-animation.\n    *\n    * @method start\n    * @param {gs.RotationDirection} direction The rotation direction.\n    * @param {number} speed The rotation speed in degrees per frame.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished. \n    ### \n    rotate: (direction, speed, duration, easingType, callback) ->\n        @easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]\n        @callback = callback\n        @speed = speed\n        @orgAngle = @object.angle\n        if direction == 1\n            speed = -speed\n        \n        if duration == 0 or GameManager.tempSettings.skip\n            @object.angle += speed * duration\n            @callback?(@object, this)\n        else\n            @easing.startValue(@object.angle, (@object.angle + speed * duration) - @object.angle, duration)\n        \n    ###*\n    * Skips the animation. That is used to skip an animation if the user\n    * wants to skip very fast through a visual novel scene.\n    *\n    * @method skip\n    ###    \n    skip: ->\n        if @easing?.duration >= GameManager.tempSettings.skipTime\n            @object.angle = @orgAngle + @speed * @easing.duration\n            @easing.isRunning = no\n            \ngs.Component_RotateAnimation = Component_RotateAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_RotateAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_RotateAnimation = (function(superClass) {\n    extend(Component_RotateAnimation, superClass);\n\n\n    /**\n    * Executes a rotate-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_RotateAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_RotateAnimation(data) {\n      Component_RotateAnimation.__super__.constructor.apply(this, arguments);\n      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);\n      this.callback = null;\n    }\n\n\n    /**\n    * Serializes the rotate-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_RotateAnimation.prototype.toDataBundle = function() {\n      return {\n        easing: this.easing\n      };\n    };\n\n\n    /**\n    * Updates the rotate-animation.\n    *\n    * @method update\n     */\n\n    Component_RotateAnimation.prototype.update = function() {\n      Component_RotateAnimation.__super__.update.call(this);\n      if (!this.easing.isRunning) {\n        return;\n      }\n      this.object.angle = this.easing.value;\n      this.easing.updateValue();\n      if (!this.easing.isRunning && !this.easing.isEndless) {\n        this.object.angle = Math.round(this.object.angle);\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Starts the rotate-animation.\n    *\n    * @method rotateTo\n    * @param {number} angle The target angle\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished.\n     */\n\n    Component_RotateAnimation.prototype.rotateTo = function(angle, duration, easingType, callback) {\n      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];\n      this.callback = callback;\n      if (duration === 0 || GameManager.tempSettings.skip) {\n        this.object.angle = angle;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        return this.easing.startValue(this.object.angle, angle - this.object.angle, duration);\n      }\n    };\n\n\n    /**\n    * Starts the rotate-animation.\n    *\n    * @method start\n    * @param {gs.RotationDirection} direction The rotation direction.\n    * @param {number} speed The rotation speed in degrees per frame.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished.\n     */\n\n    Component_RotateAnimation.prototype.rotate = function(direction, speed, duration, easingType, callback) {\n      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];\n      this.callback = callback;\n      this.speed = speed;\n      this.orgAngle = this.object.angle;\n      if (direction === 1) {\n        speed = -speed;\n      }\n      if (duration === 0 || GameManager.tempSettings.skip) {\n        this.object.angle += speed * duration;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        return this.easing.startValue(this.object.angle, (this.object.angle + speed * duration) - this.object.angle, duration);\n      }\n    };\n\n\n    /**\n    * Skips the animation. That is used to skip an animation if the user\n    * wants to skip very fast through a visual novel scene.\n    *\n    * @method skip\n     */\n\n    Component_RotateAnimation.prototype.skip = function() {\n      var ref;\n      if (((ref = this.easing) != null ? ref.duration : void 0) >= GameManager.tempSettings.skipTime) {\n        this.object.angle = this.orgAngle + this.speed * this.easing.duration;\n        return this.easing.isRunning = false;\n      }\n    };\n\n    return Component_RotateAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_RotateAnimation = Component_RotateAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}