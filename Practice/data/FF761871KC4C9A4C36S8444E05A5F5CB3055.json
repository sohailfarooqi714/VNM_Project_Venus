{
    "uid": "FF761871KC4C9A4C36S8444E05A5F5CB3055",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_PanelBehavior",
        "type": "game_script",
        "order": 17,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_PanelBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_PanelBehavior extends gs.Component_Visual\n    ###*\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n    ###\n    onDataBundleRestore: (data, context) ->\n        @setupEventHandlers()\n        \n    ###*\n    * A panel-component gives a game-object the same capabilities like\n    * a visual object but has no graphical representation. So a panel has\n    * a position and a size.<br>\n    * <br>\n    * It can be used to make invisible hotspot-areas or modal-blocking areas for\n    * example.\n    *\n    * @module gs\n    * @class Component_PanelBehavior\n    * @extends gs.Component_Visual\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        \n        \n    ###*\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n    ### \n    setupEventHandlers: ->\n        if @object.modal\n            gs.GlobalEventManager.on \"mouseUp\", ((e) => if @object.modal then e.breakChain = yes), null, @object\n            gs.GlobalEventManager.on \"mouseDown\", ((e) => if @object.modal then e.breakChain = yes), null, @object\n            gs.GlobalEventManager.on \"mouseMoved\", ((e) => \n                if @object.modal then e.breakChain = yes\n            ), null, @object\n            \n    ###*\n    * Initializes the panel component.\n    *\n    * @method setup\n    ###\n    setup: ->\n        @setupEventHandlers()\n     \n    ###*\n    * Disposes the component.\n    *\n    * @method dispose\n    ###\n    dispose: ->\n        super\n        \n        gs.GlobalEventManager.offByOwner(\"mouseUp\", @object)\n        gs.GlobalEventManager.offByOwner(\"mouseDown\", @object)\n        gs.GlobalEventManager.offByOwner(\"mouseMoved\", @object)\n        \ngs.Component_PanelBehavior = Component_PanelBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_PanelBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_PanelBehavior = (function(superClass) {\n    extend(Component_PanelBehavior, superClass);\n\n\n    /**\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n     */\n\n    Component_PanelBehavior.prototype.onDataBundleRestore = function(data, context) {\n      return this.setupEventHandlers();\n    };\n\n\n    /**\n    * A panel-component gives a game-object the same capabilities like\n    * a visual object but has no graphical representation. So a panel has\n    * a position and a size.<br>\n    * <br>\n    * It can be used to make invisible hotspot-areas or modal-blocking areas for\n    * example.\n    *\n    * @module gs\n    * @class Component_PanelBehavior\n    * @extends gs.Component_Visual\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_PanelBehavior() {}\n\n\n    /**\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n     */\n\n    Component_PanelBehavior.prototype.setupEventHandlers = function() {\n      if (this.object.modal) {\n        gs.GlobalEventManager.on(\"mouseUp\", ((function(_this) {\n          return function(e) {\n            if (_this.object.modal) {\n              return e.breakChain = true;\n            }\n          };\n        })(this)), null, this.object);\n        gs.GlobalEventManager.on(\"mouseDown\", ((function(_this) {\n          return function(e) {\n            if (_this.object.modal) {\n              return e.breakChain = true;\n            }\n          };\n        })(this)), null, this.object);\n        return gs.GlobalEventManager.on(\"mouseMoved\", ((function(_this) {\n          return function(e) {\n            if (_this.object.modal) {\n              return e.breakChain = true;\n            }\n          };\n        })(this)), null, this.object);\n      }\n    };\n\n\n    /**\n    * Initializes the panel component.\n    *\n    * @method setup\n     */\n\n    Component_PanelBehavior.prototype.setup = function() {\n      return this.setupEventHandlers();\n    };\n\n\n    /**\n    * Disposes the component.\n    *\n    * @method dispose\n     */\n\n    Component_PanelBehavior.prototype.dispose = function() {\n      Component_PanelBehavior.__super__.dispose.apply(this, arguments);\n      gs.GlobalEventManager.offByOwner(\"mouseUp\", this.object);\n      gs.GlobalEventManager.offByOwner(\"mouseDown\", this.object);\n      return gs.GlobalEventManager.offByOwner(\"mouseMoved\", this.object);\n    };\n\n    return Component_PanelBehavior;\n\n  })(gs.Component_Visual);\n\n  gs.Component_PanelBehavior = Component_PanelBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}