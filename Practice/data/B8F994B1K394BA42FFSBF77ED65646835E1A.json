{
    "uid": "B8F994B1K394BA42FFSBF77ED65646835E1A",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_SceneBehavior",
        "type": "game_script",
        "order": 0,
        "parentId": "0C1D8BE8KDB63A469AS9782EB90E63254DB3",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_SceneBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_SceneBehavior extends gs.Component_Container\n    ###*\n    * The base class of all scene-behavior components. A scene-behavior component\n    * define the logic of a single game scene. \n    *\n    * @module gs\n    * @class Component_SceneBehavior\n    * @extends gs.Component_Container\n    * @memberof gs\n    ###\n    constructor: ->\n        super()\n        \n        @loadingScreenVisible = no\n\n    ###*\n    * Initializes the scene. \n    *\n    * @method initialize\n    * @abstract\n    ###\n    initialize: ->\n      \n    ###*\n    * Disposes the scene.\n    *\n    * @method dispose\n    ###  \n    dispose: ->\n        if not GameManager.inLivePreview\n            ResourceManager.dispose()\n        @object.events?.emit(\"dispose\", @object)\n        \n    \n    ###*\n    * Called if the preparation and transition\n    * is done and the is ready to start.\n    *\n    * @method start\n    ###  \n    start: ->\n        \n    ###*\n    * Prepares all visual game object for the scene.\n    *\n    * @method prepareVisual\n    * @abstract\n    ###  \n    prepareVisual: ->\n        \n    ###*\n    * Prepares all data for the scene and loads the necessary graphic and audio resources.\n    *\n    * @method prepareData\n    * @abstract\n    ### \n    prepareData: ->\n     \n    ###*\n    * Prepares for a screen-transition.\n    *\n    * @method prepareTransition\n    * @param {Object} transitionData - Object containing additional data for the transition \n    * like graphic, duration and vague.\n    ###    \n    prepareTransition: (transitionData) ->\n        if transitionData?.graphic?.name.length > 0\n            ResourceManager.getBitmap(\"Graphics/Masks/#{transitionData.graphic.name}\")\n    \n    ###*\n    * Executes a screen-transition.\n    *\n    * @method transition\n    * @param {Object} transitionData - Object containing additional data for the transition \n    * like graphic, duration and vague.\n    ###         \n    transition: (transitionData) ->\n        if $PARAMS.preview\n            Graphics.transition(0)\n        else\n            transitionData = transitionData || SceneManager.transitionData\n            if transitionData?.graphic?.name.length > 0\n                Graphics.transition(transitionData.duration, ResourceManager.getBitmap(\"Graphics/Masks/#{transitionData.graphic.name}\"), transitionData.vague || 30)\n            else\n                Graphics.transition(transitionData.duration)\n    \n    ###*\n    * Update the scene's content.\n    *\n    * @method updateContent\n    * @abstract\n    ###         \n    updateContent: ->\n    \n    ###*\n    * Sets up the loading screen.\n    *\n    * @method prepareLoadingScreen\n    ###     \n    prepareLoadingScreen: ->\n        @loadingBackgroundSprite = new gs.Sprite()\n        \n        if gs.Platform.isWeb and !GameManager.inLivePreview\n            bitmap = new gs.Bitmap(300, 100)\n            bitmap.font.name = \"Times New Roman\"\n            bitmap.drawText(0, 0, 300, 100, \"NOW LOADING\", 1, 1)\n            @loadingBackgroundSprite.x = (Graphics.width - bitmap.width) / 2\n            @loadingBackgroundSprite.y = (Graphics.height - bitmap.height) / 2\n            @loadingBackgroundSprite.bitmap = bitmap\n            @loadingBackgroundSprite.srcRect = new gs.Rect(0, 0, bitmap.width, bitmap.height)\n     \n    ###*\n    * Disposes the loading screen.\n    *\n    * @method clearLoadingScreen\n    ###    \n    clearLoadingScreen: ->\n        if @loadingBackgroundSprite\n            if gs.Platform.isWeb and !GameManager.inLivePreview\n                @loadingBackgroundSprite.bitmap.dispose()\n            @loadingBackgroundSprite.dispose()\n            @loadingBackgroundSprite = null\n            \n    ###*\n    * Called once per frame while a scene is loading. Can be used to display\n    * loading-message/animation.\n    *\n    * @method loading\n    ### \n    loading: ->\n        if not @loadingBackgroundSprite2?\n            @loadingBackgroundSprite2 = {}\n            ###\n            bitmap = new gs.Bitmap(300, 100)\n            bitmap.drawText(0, 0, 300, 100, \"NOW LOADING\", 1, 1)\n            @loadingBackgroundSprite = new gs.Sprite()\n            @loadingBackgroundSprite.x = (Graphics.width - bitmap.width) / 2\n            @loadingBackgroundSprite.y = (Graphics.height - bitmap.height) / 2\n            @loadingBackgroundSprite.bitmap = bitmap\n            @loadingBackgroundSprite.srcRect = new gs.Rect(0, 0, bitmap.width, bitmap.height)\n            ###\n            \n            if Graphics.frozen then @transition({ duration: 0 })\n\n    ###*\n    * Update the scene.\n    *\n    * @method update\n    ### \n    update: ->\n        super()\n        \n        if DataManager.documentsLoaded\n            if @object.loadingData and not @object.initialized then @prepareData()\n            @object.loadingData = !DataManager.documentsLoaded\n        \n        if not @object.loadingData and ResourceManager.resourcesLoaded\n            if @object.loadingResources and not @object.initialized\n                if not @loadingScreenVisible\n                    @prepareVisual() \n                @object.initialized = yes\n            @object.loadingResources = false\n    \n        if ResourceManager.resourcesLoaded and DataManager.documentsLoaded\n            @object.loading = false\n        \n            if Graphics.frozen and @object.preparing\n                Graphics.update()\n            else\n                if @loadingScreenVisible\n                    if @object.loaded\n                        @loadingScreenVisible = no\n                        @object.loaded = yes\n                        @updateContent()\n                    else\n                        if not Graphics.frozen then Graphics.freeze()\n                        @clearLoadingScreen()\n                        @object.loaded = yes\n                        @object.setup()\n                        @prepareVisual() \n                        @loadingScreenVisible = no\n                        Graphics.update()\n                        Input.update()\n                else\n                    @clearLoadingScreen()\n                    if @object.preparing\n                        @object.preparing = no\n                        @start()\n                    Graphics.update()\n                    @updateContent() if !Graphics.frozen\n                    Input.update()\n                    \n\n        else\n            @loadingScreenVisible = yes\n            Graphics.update()\n            Input.update()\n            @loading()\n            \n        \n                \n        \ngs.Component_SceneBehavior = Component_SceneBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_SceneBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_SceneBehavior = (function(superClass) {\n    extend(Component_SceneBehavior, superClass);\n\n\n    /**\n    * The base class of all scene-behavior components. A scene-behavior component\n    * define the logic of a single game scene. \n    *\n    * @module gs\n    * @class Component_SceneBehavior\n    * @extends gs.Component_Container\n    * @memberof gs\n     */\n\n    function Component_SceneBehavior() {\n      Component_SceneBehavior.__super__.constructor.call(this);\n      this.loadingScreenVisible = false;\n    }\n\n\n    /**\n    * Initializes the scene. \n    *\n    * @method initialize\n    * @abstract\n     */\n\n    Component_SceneBehavior.prototype.initialize = function() {};\n\n\n    /**\n    * Disposes the scene.\n    *\n    * @method dispose\n     */\n\n    Component_SceneBehavior.prototype.dispose = function() {\n      var ref;\n      if (!GameManager.inLivePreview) {\n        ResourceManager.dispose();\n      }\n      return (ref = this.object.events) != null ? ref.emit(\"dispose\", this.object) : void 0;\n    };\n\n\n    /**\n    * Called if the preparation and transition\n    * is done and the is ready to start.\n    *\n    * @method start\n     */\n\n    Component_SceneBehavior.prototype.start = function() {};\n\n\n    /**\n    * Prepares all visual game object for the scene.\n    *\n    * @method prepareVisual\n    * @abstract\n     */\n\n    Component_SceneBehavior.prototype.prepareVisual = function() {};\n\n\n    /**\n    * Prepares all data for the scene and loads the necessary graphic and audio resources.\n    *\n    * @method prepareData\n    * @abstract\n     */\n\n    Component_SceneBehavior.prototype.prepareData = function() {};\n\n\n    /**\n    * Prepares for a screen-transition.\n    *\n    * @method prepareTransition\n    * @param {Object} transitionData - Object containing additional data for the transition \n    * like graphic, duration and vague.\n     */\n\n    Component_SceneBehavior.prototype.prepareTransition = function(transitionData) {\n      var ref;\n      if ((transitionData != null ? (ref = transitionData.graphic) != null ? ref.name.length : void 0 : void 0) > 0) {\n        return ResourceManager.getBitmap(\"Graphics/Masks/\" + transitionData.graphic.name);\n      }\n    };\n\n\n    /**\n    * Executes a screen-transition.\n    *\n    * @method transition\n    * @param {Object} transitionData - Object containing additional data for the transition \n    * like graphic, duration and vague.\n     */\n\n    Component_SceneBehavior.prototype.transition = function(transitionData) {\n      var ref;\n      if ($PARAMS.preview) {\n        return Graphics.transition(0);\n      } else {\n        transitionData = transitionData || SceneManager.transitionData;\n        if ((transitionData != null ? (ref = transitionData.graphic) != null ? ref.name.length : void 0 : void 0) > 0) {\n          return Graphics.transition(transitionData.duration, ResourceManager.getBitmap(\"Graphics/Masks/\" + transitionData.graphic.name), transitionData.vague || 30);\n        } else {\n          return Graphics.transition(transitionData.duration);\n        }\n      }\n    };\n\n\n    /**\n    * Update the scene's content.\n    *\n    * @method updateContent\n    * @abstract\n     */\n\n    Component_SceneBehavior.prototype.updateContent = function() {};\n\n\n    /**\n    * Sets up the loading screen.\n    *\n    * @method prepareLoadingScreen\n     */\n\n    Component_SceneBehavior.prototype.prepareLoadingScreen = function() {\n      var bitmap;\n      this.loadingBackgroundSprite = new gs.Sprite();\n      if (gs.Platform.isWeb && !GameManager.inLivePreview) {\n        bitmap = new gs.Bitmap(300, 100);\n        bitmap.font.name = \"Times New Roman\";\n        bitmap.drawText(0, 0, 300, 100, \"NOW LOADING\", 1, 1);\n        this.loadingBackgroundSprite.x = (Graphics.width - bitmap.width) / 2;\n        this.loadingBackgroundSprite.y = (Graphics.height - bitmap.height) / 2;\n        this.loadingBackgroundSprite.bitmap = bitmap;\n        return this.loadingBackgroundSprite.srcRect = new gs.Rect(0, 0, bitmap.width, bitmap.height);\n      }\n    };\n\n\n    /**\n    * Disposes the loading screen.\n    *\n    * @method clearLoadingScreen\n     */\n\n    Component_SceneBehavior.prototype.clearLoadingScreen = function() {\n      if (this.loadingBackgroundSprite) {\n        if (gs.Platform.isWeb && !GameManager.inLivePreview) {\n          this.loadingBackgroundSprite.bitmap.dispose();\n        }\n        this.loadingBackgroundSprite.dispose();\n        return this.loadingBackgroundSprite = null;\n      }\n    };\n\n\n    /**\n    * Called once per frame while a scene is loading. Can be used to display\n    * loading-message/animation.\n    *\n    * @method loading\n     */\n\n    Component_SceneBehavior.prototype.loading = function() {\n      if (this.loadingBackgroundSprite2 == null) {\n        this.loadingBackgroundSprite2 = {};\n\n        /*\n        bitmap = new gs.Bitmap(300, 100)\n        bitmap.drawText(0, 0, 300, 100, \"NOW LOADING\", 1, 1)\n        @loadingBackgroundSprite = new gs.Sprite()\n        @loadingBackgroundSprite.x = (Graphics.width - bitmap.width) / 2\n        @loadingBackgroundSprite.y = (Graphics.height - bitmap.height) / 2\n        @loadingBackgroundSprite.bitmap = bitmap\n        @loadingBackgroundSprite.srcRect = new gs.Rect(0, 0, bitmap.width, bitmap.height)\n         */\n        if (Graphics.frozen) {\n          return this.transition({\n            duration: 0\n          });\n        }\n      }\n    };\n\n\n    /**\n    * Update the scene.\n    *\n    * @method update\n     */\n\n    Component_SceneBehavior.prototype.update = function() {\n      Component_SceneBehavior.__super__.update.call(this);\n      if (DataManager.documentsLoaded) {\n        if (this.object.loadingData && !this.object.initialized) {\n          this.prepareData();\n        }\n        this.object.loadingData = !DataManager.documentsLoaded;\n      }\n      if (!this.object.loadingData && ResourceManager.resourcesLoaded) {\n        if (this.object.loadingResources && !this.object.initialized) {\n          if (!this.loadingScreenVisible) {\n            this.prepareVisual();\n          }\n          this.object.initialized = true;\n        }\n        this.object.loadingResources = false;\n      }\n      if (ResourceManager.resourcesLoaded && DataManager.documentsLoaded) {\n        this.object.loading = false;\n        if (Graphics.frozen && this.object.preparing) {\n          return Graphics.update();\n        } else {\n          if (this.loadingScreenVisible) {\n            if (this.object.loaded) {\n              this.loadingScreenVisible = false;\n              this.object.loaded = true;\n              return this.updateContent();\n            } else {\n              if (!Graphics.frozen) {\n                Graphics.freeze();\n              }\n              this.clearLoadingScreen();\n              this.object.loaded = true;\n              this.object.setup();\n              this.prepareVisual();\n              this.loadingScreenVisible = false;\n              Graphics.update();\n              return Input.update();\n            }\n          } else {\n            this.clearLoadingScreen();\n            if (this.object.preparing) {\n              this.object.preparing = false;\n              this.start();\n            }\n            Graphics.update();\n            if (!Graphics.frozen) {\n              this.updateContent();\n            }\n            return Input.update();\n          }\n        }\n      } else {\n        this.loadingScreenVisible = true;\n        Graphics.update();\n        Input.update();\n        return this.loading();\n      }\n    };\n\n    return Component_SceneBehavior;\n\n  })(gs.Component_Container);\n\n  gs.Component_SceneBehavior = Component_SceneBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}