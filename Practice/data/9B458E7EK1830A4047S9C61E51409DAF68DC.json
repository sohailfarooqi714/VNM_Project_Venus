{
    "uid": "9B458E7EK1830A4047S9C61E51409DAF68DC",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Timer",
        "type": "game_script",
        "order": 17,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Timer\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Timer extends gs.Object_Base\n    @objectCodecBlackList = [\"parent\"]\n    \n    ###*\n    * A timer object. A timer can be used as a regular timer or as a stop-watch.\n    *\n    * @module gs\n    * @class Object_Timer\n    * @extends gs.Object_Base\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super()\n        \n        ###*\n        * The current seconds.\n        * @property seconds\n        * @type number\n        ###\n        @seconds = 0\n        \n        ###*\n        * The current minutes.\n        * @property seconds\n        * @type number\n        ###\n        @minutes = 0\n        \n        ###*\n        * Indicates if the timer runs like a stop-watch.\n        * @property stopWatch\n        * @type boolean\n        ###\n        @stopWatch = no\n        \n        ###*\n        * A behavior-component to add timer-specific behavior to the object.\n        * @property behavior\n        * @type gs.Component_Timer\n        ###\n        @behavior = null\n        \n        ###*\n        * An event-emitter to emit events.\n        * @property events\n        * @type gs.Component_EventEmitter\n        ###\n        @events = new gs.EventEmitter()\n        \n        @addComponent(@events)\n        \n        if data?\n            @componentsFromDataBundle(data)\n        else\n            @behavior = new gs.Component_Timer()\n            @addComponent(@behavior)\n        \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###    \n    toDataBundle: ->\n        components = @componentsToDataBundle(gs.Component_Timer)\n                \n        result = {\n            stopWatch: @stopWatch,\n            minutes: @minutes,\n            seconds: @seconds,\n            components: components\n        }\n    \n        return result\n        \n    restore: (dataBundle) ->\n        \n        \n    \n        \ngs.Object_Timer = Object_Timer",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Timer,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Timer = (function(superClass) {\n    extend(Object_Timer, superClass);\n\n    Object_Timer.objectCodecBlackList = [\"parent\"];\n\n\n    /**\n    * A timer object. A timer can be used as a regular timer or as a stop-watch.\n    *\n    * @module gs\n    * @class Object_Timer\n    * @extends gs.Object_Base\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_Timer(data) {\n      Object_Timer.__super__.constructor.call(this);\n\n      /**\n      * The current seconds.\n      * @property seconds\n      * @type number\n       */\n      this.seconds = 0;\n\n      /**\n      * The current minutes.\n      * @property seconds\n      * @type number\n       */\n      this.minutes = 0;\n\n      /**\n      * Indicates if the timer runs like a stop-watch.\n      * @property stopWatch\n      * @type boolean\n       */\n      this.stopWatch = false;\n\n      /**\n      * A behavior-component to add timer-specific behavior to the object.\n      * @property behavior\n      * @type gs.Component_Timer\n       */\n      this.behavior = null;\n\n      /**\n      * An event-emitter to emit events.\n      * @property events\n      * @type gs.Component_EventEmitter\n       */\n      this.events = new gs.EventEmitter();\n      this.addComponent(this.events);\n      if (data != null) {\n        this.componentsFromDataBundle(data);\n      } else {\n        this.behavior = new gs.Component_Timer();\n        this.addComponent(this.behavior);\n      }\n    }\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Timer.prototype.toDataBundle = function() {\n      var components, result;\n      components = this.componentsToDataBundle(gs.Component_Timer);\n      result = {\n        stopWatch: this.stopWatch,\n        minutes: this.minutes,\n        seconds: this.seconds,\n        components: components\n      };\n      return result;\n    };\n\n    Object_Timer.prototype.restore = function(dataBundle) {};\n\n    return Object_Timer;\n\n  })(gs.Object_Base);\n\n  gs.Object_Timer = Object_Timer;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}