{
    "uid": "48904FD4K39C4A4306S84DCE13DB143B0A56",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Video",
        "type": "game_script",
        "order": 4,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Video\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Video extends gs.Object_Visual\n    @objectCodecBlackList = [\"parent\"]\n    \n    ###*\n    * A game object used for custom texts in a scene.\n    *\n    * @module gs\n    * @class Object_Video\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        ###*\n        * The object's source rectangle. It controls which part of the object's image is used\n        * for visual presentation.\n        * @property srcRect\n        * @type gs.Rect\n        ###\n        @srcRect = new Rect()\n        \n        ###*\n        * The object's mask to execute masking-effects on it.\n        * @property mask\n        * @type gs.Mask\n        ###\n        @mask = new gs.Mask()\n        \n        ###*\n        * Indicates if the object's visual presentation should be mirrored horizontally.\n        * @property mirror\n        * @type boolean\n        ###\n        @mirror = false\n        \n        ###*\n        * The domain the object belongs to.\n        * @property domain\n        * @type string\n        ###\n        @domain = \"com.degica.vnm.default\"\n        \n        ###*\n        * The name of the video resource used for the visual presentation.\n        * @property video\n        * @type string\n        ###\n        @video = \"\"\n        \n        ###*\n        * Indicates if the video should be looped. The default is <b>false</b>\n        * @property loop\n        * @type boolean\n        ###\n        @loop = no\n        \n        ###*\n        * The rotation-angle of the picture in degrees. The rotation center depends on the\n        * anchor-point.\n        * @property angle\n        * @type number\n        ###\n        @angle = 0\n        \n        ###*\n        * The color tone of the object used for the visual presentation.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = new Tone(0, 0, 0, 0)\n        \n        ###*\n        * The color of the object used for the visual presentation.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = new Color(255, 255, 255, 0)\n\n        ###*\n        * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type vn.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Sprite\n        ###\n        @visual = new gs.Component_Sprite()\n        \n        @addComponent(@visual)\n        @addComponent(@animator)\n        @componentsFromDataBundle(data)\n        @update()\n     \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###     \n    toDataBundle: ->\n        components = @componentsToDataBundle(gs.Component_Animation)\n        \n        result = {\n            components: components,\n            visible: @visible,\n            dstRect: @dstRect,\n            srcRect: @srcRect,\n            opacity: @opacity,\n            origin: @origin,\n            zIndex: @zIndex,\n            mask: @mask.toDataBundle(),\n            motionBlur: @motionBlur,\n            zoom: @zoom,\n            angle: @angle,\n            anchor: @anchor,\n            offset: @offset,\n            mirror: @mirror,\n            video: @video,\n            loop: @loop\n        }\n\n        return result\n        \ngs.Object_Video = Object_Video",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Video,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Video = (function(superClass) {\n    extend(Object_Video, superClass);\n\n    Object_Video.objectCodecBlackList = [\"parent\"];\n\n\n    /**\n    * A game object used for custom texts in a scene.\n    *\n    * @module gs\n    * @class Object_Video\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_Video(data) {\n      Object_Video.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The object's source rectangle. It controls which part of the object's image is used\n      * for visual presentation.\n      * @property srcRect\n      * @type gs.Rect\n       */\n      this.srcRect = new Rect();\n\n      /**\n      * The object's mask to execute masking-effects on it.\n      * @property mask\n      * @type gs.Mask\n       */\n      this.mask = new gs.Mask();\n\n      /**\n      * Indicates if the object's visual presentation should be mirrored horizontally.\n      * @property mirror\n      * @type boolean\n       */\n      this.mirror = false;\n\n      /**\n      * The domain the object belongs to.\n      * @property domain\n      * @type string\n       */\n      this.domain = \"com.degica.vnm.default\";\n\n      /**\n      * The name of the video resource used for the visual presentation.\n      * @property video\n      * @type string\n       */\n      this.video = \"\";\n\n      /**\n      * Indicates if the video should be looped. The default is <b>false</b>\n      * @property loop\n      * @type boolean\n       */\n      this.loop = false;\n\n      /**\n      * The rotation-angle of the picture in degrees. The rotation center depends on the\n      * anchor-point.\n      * @property angle\n      * @type number\n       */\n      this.angle = 0;\n\n      /**\n      * The color tone of the object used for the visual presentation.\n      * @property tone\n      * @type gs.Tone\n       */\n      this.tone = new Tone(0, 0, 0, 0);\n\n      /**\n      * The color of the object used for the visual presentation.\n      * @property color\n      * @type gs.Color\n       */\n      this.color = new Color(255, 255, 255, 0);\n\n      /**\n      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type vn.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Sprite\n       */\n      this.visual = new gs.Component_Sprite();\n      this.addComponent(this.visual);\n      this.addComponent(this.animator);\n      this.componentsFromDataBundle(data);\n      this.update();\n    }\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Video.prototype.toDataBundle = function() {\n      var components, result;\n      components = this.componentsToDataBundle(gs.Component_Animation);\n      result = {\n        components: components,\n        visible: this.visible,\n        dstRect: this.dstRect,\n        srcRect: this.srcRect,\n        opacity: this.opacity,\n        origin: this.origin,\n        zIndex: this.zIndex,\n        mask: this.mask.toDataBundle(),\n        motionBlur: this.motionBlur,\n        zoom: this.zoom,\n        angle: this.angle,\n        anchor: this.anchor,\n        offset: this.offset,\n        mirror: this.mirror,\n        video: this.video,\n        loop: this.loop\n      };\n      return result;\n    };\n\n    return Object_Video;\n\n  })(gs.Object_Visual);\n\n  gs.Object_Video = Object_Video;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}