{
    "uid": "ECF00B441300864C6059B990EDE620CE8CA1",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_FormulaHandler",
        "type": "game_script",
        "order": 10,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_FormulaHandler\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_FormulaHandler extends ui.Component_Handler\n    ###*\n    * A formula-handler component allows a UI game object to execute\n    * formulas.<br><br>\n    *\n    * For more information, take a look\n    * into the \"In Game UI System\" section of the help-file.\n    *\n    * @module ui\n    * @class Component_BindingHandler\n    * @extends ui.Component_Handler\n    * @memberof ui\n    * @constructor\n    ###\n    constructor: () ->\n        @breakChainAt = null\n\n    ###*\n    * Initializes the binding-handler.\n    *\n    * @method setup\n    ###\n    setup: ->\n        @object.events.on \"uiPrepareFinish\", ((e) =>\n            for formula in @object.formulas\n                if formula.events.contains(\"uiPrepareFinish\")\n                    window.o = @object\n                    window.d = @object.data[0]\n                    formula.exec()\n        )\n\n    ###*\n    * Updates the binding-handler.\n    *\n    * @method update\n    ###\n    update: ->\n        for formula in @object.formulas\n            @executeFormula(formula)\n\n        @object.initialized = yes\n\n        return null\n\n    executeFormula: (formula) ->\n        if @checkObject(formula)\n            window.o = @object\n            window.d = @object.data[0]\n            formula.exec()\n\n    @executeFormula: (object, formula) ->\n        window.o = object\n        window.d = object.data[0]\n        formula.exec()\n\n    ###*\n    * Evaluates a specified property-path and returns the result.\n    *\n    * @method fieldValue\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n    ###\n    fieldValue: (path) -> ui.FormulaHandler.fieldValue(@object, path)\n\n    ###*\n    * Evaluates a property-path on a specified object and returns the result.\n    *\n    * @method fieldValue\n    * @static\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n    ###\n    @fieldValue: (object, path, readOnly) ->\n        if typeof (path?.exec) == \"function\"\n            window.o = object\n            window.d = object?.data?[0]\n            value = path.exec()\n\n            return value ? 0\n        else if typeof (path) == \"function\"\n            return @fieldValue(object, path(), readOnly)\n        return path\n\nui.Component_FormulaHandler = Component_FormulaHandler",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_FormulaHandler,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_FormulaHandler = (function(superClass) {\n    extend(Component_FormulaHandler, superClass);\n\n\n    /**\n    * A formula-handler component allows a UI game object to execute\n    * formulas.<br><br>\n    *\n    * For more information, take a look\n    * into the \"In Game UI System\" section of the help-file.\n    *\n    * @module ui\n    * @class Component_BindingHandler\n    * @extends ui.Component_Handler\n    * @memberof ui\n    * @constructor\n     */\n\n    function Component_FormulaHandler() {\n      this.breakChainAt = null;\n    }\n\n\n    /**\n    * Initializes the binding-handler.\n    *\n    * @method setup\n     */\n\n    Component_FormulaHandler.prototype.setup = function() {\n      return this.object.events.on(\"uiPrepareFinish\", ((function(_this) {\n        return function(e) {\n          var formula, i, len, ref, results;\n          ref = _this.object.formulas;\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            formula = ref[i];\n            if (formula.events.contains(\"uiPrepareFinish\")) {\n              window.o = _this.object;\n              window.d = _this.object.data[0];\n              results.push(formula.exec());\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        };\n      })(this)));\n    };\n\n\n    /**\n    * Updates the binding-handler.\n    *\n    * @method update\n     */\n\n    Component_FormulaHandler.prototype.update = function() {\n      var formula, i, len, ref;\n      ref = this.object.formulas;\n      for (i = 0, len = ref.length; i < len; i++) {\n        formula = ref[i];\n        this.executeFormula(formula);\n      }\n      this.object.initialized = true;\n      return null;\n    };\n\n    Component_FormulaHandler.prototype.executeFormula = function(formula) {\n      if (this.checkObject(formula)) {\n        window.o = this.object;\n        window.d = this.object.data[0];\n        return formula.exec();\n      }\n    };\n\n    Component_FormulaHandler.executeFormula = function(object, formula) {\n      window.o = object;\n      window.d = object.data[0];\n      return formula.exec();\n    };\n\n\n    /**\n    * Evaluates a specified property-path and returns the result.\n    *\n    * @method fieldValue\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n     */\n\n    Component_FormulaHandler.prototype.fieldValue = function(path) {\n      return ui.FormulaHandler.fieldValue(this.object, path);\n    };\n\n\n    /**\n    * Evaluates a property-path on a specified object and returns the result.\n    *\n    * @method fieldValue\n    * @static\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n     */\n\n    Component_FormulaHandler.fieldValue = function(object, path, readOnly) {\n      var ref, value;\n      if (typeof (path != null ? path.exec : void 0) === \"function\") {\n        window.o = object;\n        window.d = object != null ? (ref = object.data) != null ? ref[0] : void 0 : void 0;\n        value = path.exec();\n        return value != null ? value : 0;\n      } else if (typeof path === \"function\") {\n        return this.fieldValue(object, path(), readOnly);\n      }\n      return path;\n    };\n\n    return Component_FormulaHandler;\n\n  })(ui.Component_Handler);\n\n  ui.Component_FormulaHandler = Component_FormulaHandler;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}