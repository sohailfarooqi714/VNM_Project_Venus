{
    "uid": "BAAD9EB6K1D65A44C2SA52AE7543F7A0B82F",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "UIElementRectangle",
        "type": "game_script",
        "order": 4,
        "parentId": "2EC9F946K6417A4973S8308E368608E89B8B",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: UIElementRectangle\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass UIElementRectangle extends Rect\n    ###*\n    * An ui rectangle is like a regular gs.Rect rectangle but if one of the\n    * rectangle's coordinates is changed the <b>needsUpdate</b> property of the\n    * assigned game object will be set to <b>true</b> to trigger a refresh.\n    *\n    * @module ui\n    * @class UIElementRectangle\n    * @extends gs.Rect\n    * @memberof ui\n    * @constructor\n    * @params {Object} object - The UI object the rectangle belongs to.\n    ###\n    constructor: (object) ->\n        ###*\n        * The UI object the rectangle belongs to.\n        * @property object\n        * @type gs.Object_UIElement\n        ###\n        @object = object ? {}\n        \n        ###*\n        * The x-coordinate of the rectangle.\n        * @property x\n        * @type number\n        ###\n        @x = 0\n        \n        ###*\n        * The y-coordinate of the rectangle.\n        * @property y\n        * @type number\n        ###\n        @y = 0\n        \n        ###*\n        * The width of the rectangle.\n        * @property width\n        * @type number\n        ###\n        @width = 1\n        \n        ###*\n        * The height of the rectangle.\n        * @property height\n        * @type number\n        ###\n        @height = 1\n    \n    @accessors \"x\", \n        set: (x) ->\n            if x != @x_\n                @x_ = x\n                @object.needsUpdate = yes\n        get: -> @x_\n        \n    @accessors \"y\", \n        set: (y) ->\n            if y != @y_\n                @y_ = y\n                @object.needsUpdate = yes\n        get: -> @y_\n        \n    @accessors \"width\", \n        set: (width) ->\n            if width != @width_\n                @width_ = width\n                @object.needsUpdate = yes\n        get: -> @width_\n    \n    @accessors \"height\", \n        set: (height) ->\n            if height != @height_\n                @height_ = height\n                @object.needsUpdate = yes\n        get: -> @height_\n        \n    toRect: -> new gs.Rect(@x, @y, @width, @height)\n        \n    @fromRect: (object, rect) ->\n        result = new ui.UIElementRectangle(object)\n        result.x = rect.x\n        result.y = rect.y\n        result.width = rect.width\n        result.height = rect.height\n        return result\n        \n    \n       \nui.UIElementRectangle = UIElementRectangle",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var UIElementRectangle,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  UIElementRectangle = (function(superClass) {\n    extend(UIElementRectangle, superClass);\n\n\n    /**\n    * An ui rectangle is like a regular gs.Rect rectangle but if one of the\n    * rectangle's coordinates is changed the <b>needsUpdate</b> property of the\n    * assigned game object will be set to <b>true</b> to trigger a refresh.\n    *\n    * @module ui\n    * @class UIElementRectangle\n    * @extends gs.Rect\n    * @memberof ui\n    * @constructor\n    * @params {Object} object - The UI object the rectangle belongs to.\n     */\n\n    function UIElementRectangle(object) {\n\n      /**\n      * The UI object the rectangle belongs to.\n      * @property object\n      * @type gs.Object_UIElement\n       */\n      this.object = object != null ? object : {};\n\n      /**\n      * The x-coordinate of the rectangle.\n      * @property x\n      * @type number\n       */\n      this.x = 0;\n\n      /**\n      * The y-coordinate of the rectangle.\n      * @property y\n      * @type number\n       */\n      this.y = 0;\n\n      /**\n      * The width of the rectangle.\n      * @property width\n      * @type number\n       */\n      this.width = 1;\n\n      /**\n      * The height of the rectangle.\n      * @property height\n      * @type number\n       */\n      this.height = 1;\n    }\n\n    UIElementRectangle.accessors(\"x\", {\n      set: function(x) {\n        if (x !== this.x_) {\n          this.x_ = x;\n          return this.object.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.x_;\n      }\n    });\n\n    UIElementRectangle.accessors(\"y\", {\n      set: function(y) {\n        if (y !== this.y_) {\n          this.y_ = y;\n          return this.object.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.y_;\n      }\n    });\n\n    UIElementRectangle.accessors(\"width\", {\n      set: function(width) {\n        if (width !== this.width_) {\n          this.width_ = width;\n          return this.object.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.width_;\n      }\n    });\n\n    UIElementRectangle.accessors(\"height\", {\n      set: function(height) {\n        if (height !== this.height_) {\n          this.height_ = height;\n          return this.object.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.height_;\n      }\n    });\n\n    UIElementRectangle.prototype.toRect = function() {\n      return new gs.Rect(this.x, this.y, this.width, this.height);\n    };\n\n    UIElementRectangle.fromRect = function(object, rect) {\n      var result;\n      result = new ui.UIElementRectangle(object);\n      result.x = rect.x;\n      result.y = rect.y;\n      result.width = rect.width;\n      result.height = rect.height;\n      return result;\n    };\n\n    return UIElementRectangle;\n\n  })(Rect);\n\n  ui.UIElementRectangle = UIElementRectangle;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}