{
    "uid": "613817565CED434E2F3AF0808662C3BAEF91",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_IntervalTimer",
        "type": "game_script",
        "order": 21,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "scriptType": 0,
        "content": "# ===================================================================\n#\n#   Script: Component_IntervalTimer\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_IntervalTimer extends gs.Component\n    ###*\n    * A component which adds timing-features to a game object. The game object\n    * will send an \"elapsed\" event everytime the time interval has been elapsed.\n    *\n    * @module gs\n    * @class Component_IntervalTimer\n    * @extends gs.Component\n    * @memberof gs\n    ###\n    constructor: ->\n        super()\n        \n        ###*\n        * Indicates if the timer is running. \n        *\n        * @property isRunning\n        * @type boolean\n        * @readOnly\n        ###\n        @isRunning = no\n        \n        ###*\n        * @property frameCount\n        * @type number\n        * @private\n        ###\n        @frameCount = 0\n        \n        ###*\n        * The interval at which the associated action will be executed.\n        * @property interval\n        * @type number\n        ###\n        @interval = 0\n        \n    ###*\n    * Starts the timer. \n    *\n    * @method start\n    ###\n    start: -> \n        @isRunning = yes\n        @frameCount = 0\n     \n    ###*\n    * Stops the timer. \n    *\n    * @method stop\n    ###   \n    stop: -> @isRunning = no\n    \n    ###*\n    * Resumes the timer. \n    *\n    * @method resume\n    ###\n    resume: -> @isRunning = yes\n    \n    ###*\n    * Pauses the timer. \n    *\n    * @method pause\n    ###\n    pause: -> @isRunning = no\n        \n    ###*\n    * Updates the timer.\n    *\n    * @method update\n    ###\n    update: ->\n        if @isRunning\n            @frameCount++\n            \n            if @frameCount >= @interval\n                @object.events.emit(\"elapsed\", @object)\n                @frameCount = 0\n            \n        \n            \n\n        \n \ngs.Component_IntervalTimer = Component_IntervalTimer",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_IntervalTimer,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_IntervalTimer = (function(superClass) {\n    extend(Component_IntervalTimer, superClass);\n\n\n    /**\n    * A component which adds timing-features to a game object. The game object\n    * will send an \"elapsed\" event everytime the time interval has been elapsed.\n    *\n    * @module gs\n    * @class Component_IntervalTimer\n    * @extends gs.Component\n    * @memberof gs\n     */\n\n    function Component_IntervalTimer() {\n      Component_IntervalTimer.__super__.constructor.call(this);\n\n      /**\n      * Indicates if the timer is running. \n      *\n      * @property isRunning\n      * @type boolean\n      * @readOnly\n       */\n      this.isRunning = false;\n\n      /**\n      * @property frameCount\n      * @type number\n      * @private\n       */\n      this.frameCount = 0;\n\n      /**\n      * The interval at which the associated action will be executed.\n      * @property interval\n      * @type number\n       */\n      this.interval = 0;\n    }\n\n\n    /**\n    * Starts the timer. \n    *\n    * @method start\n     */\n\n    Component_IntervalTimer.prototype.start = function() {\n      this.isRunning = true;\n      return this.frameCount = 0;\n    };\n\n\n    /**\n    * Stops the timer. \n    *\n    * @method stop\n     */\n\n    Component_IntervalTimer.prototype.stop = function() {\n      return this.isRunning = false;\n    };\n\n\n    /**\n    * Resumes the timer. \n    *\n    * @method resume\n     */\n\n    Component_IntervalTimer.prototype.resume = function() {\n      return this.isRunning = true;\n    };\n\n\n    /**\n    * Pauses the timer. \n    *\n    * @method pause\n     */\n\n    Component_IntervalTimer.prototype.pause = function() {\n      return this.isRunning = false;\n    };\n\n\n    /**\n    * Updates the timer.\n    *\n    * @method update\n     */\n\n    Component_IntervalTimer.prototype.update = function() {\n      if (this.isRunning) {\n        this.frameCount++;\n        if (this.frameCount >= this.interval) {\n          this.object.events.emit(\"elapsed\", this.object);\n          return this.frameCount = 0;\n        }\n      }\n    };\n\n    return Component_IntervalTimer;\n\n  })(gs.Component);\n\n  gs.Component_IntervalTimer = Component_IntervalTimer;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}