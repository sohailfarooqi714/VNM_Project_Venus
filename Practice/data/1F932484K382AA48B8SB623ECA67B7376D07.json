{
    "uid": "1F932484K382AA48B8SB623ECA67B7376D07",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_TextInput",
        "type": "game_script",
        "order": 19,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_TextInput\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_TextInput extends gs.Component\n    ###*\n    * The text-input component defines the logic for the text-input window\n    * of the default In-Game UI. \n    *\n    * @module gs\n    * @class Component_TextInput\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n    * @params {Object} params - The params-object needs at least a letters-property to define \n    * the number of letters for the text. The letters-property can also be a property-path.\n    ###\n    constructor: (params) ->\n        ###*\n        * The max. number of letters.\n        * @property letters\n        * @type number\n        ###\n        @letters = ui.Component_FormulaHandler.fieldValue(this, params.letters)\n        \n        ###*\n        * The cursor position. Points to the current letter.\n        * @property cursor\n        * @type number\n        * @protected\n        ###\n        @cursor = 0\n        \n        ###*\n        * The current text.\n        * @property text\n        * @type string\n        ###\n        @text = \"\"\n\n    ###*\n    * Puts the specified text into the UI label-objects to make it visible\n    * on screen.\n    *\n    * @method setText\n    * @param {string} text The text to set.\n    ###  \n    setText: (text) ->\n        for c, i in text\n            @object.controls[i].controls[1].text = c\n            \n        return null\n     \n    ###*\n    * An action-method to add a single letter to the text.\n    *\n    * @method action_addLetter\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} params The params-object which needs a letter-property containing the letter to add.\n    ###   \n    action_addLetter: (sender, params) ->\n        letter = params.letter\n        if @text.length < @letters\n            @text += letter\n        else\n            @text = @text.replaceAt(@text.length-1, letter.toString())\n            \n        @setText(@text.rfill(\" \", @letters))\n        \n    ###*\n    * An action-method to clear the letter at the current cursor position.\n    *\n    * @method action_removeLetter\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} [params=null] The params-object. Can be <b>null</b>.\n    ###  \n    action_removeLetter: ->\n        if @text.length > 0\n            @text = @text.substring(0, @text.length-1)\n            \n        @setText(@text.rfill(\" \", @letters))\n        \ngs.Component_TextInput = Component_TextInput",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_TextInput,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_TextInput = (function(superClass) {\n    extend(Component_TextInput, superClass);\n\n\n    /**\n    * The text-input component defines the logic for the text-input window\n    * of the default In-Game UI. \n    *\n    * @module gs\n    * @class Component_TextInput\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n    * @params {Object} params - The params-object needs at least a letters-property to define \n    * the number of letters for the text. The letters-property can also be a property-path.\n     */\n\n    function Component_TextInput(params) {\n\n      /**\n      * The max. number of letters.\n      * @property letters\n      * @type number\n       */\n      this.letters = ui.Component_FormulaHandler.fieldValue(this, params.letters);\n\n      /**\n      * The cursor position. Points to the current letter.\n      * @property cursor\n      * @type number\n      * @protected\n       */\n      this.cursor = 0;\n\n      /**\n      * The current text.\n      * @property text\n      * @type string\n       */\n      this.text = \"\";\n    }\n\n\n    /**\n    * Puts the specified text into the UI label-objects to make it visible\n    * on screen.\n    *\n    * @method setText\n    * @param {string} text The text to set.\n     */\n\n    Component_TextInput.prototype.setText = function(text) {\n      var c, i, j, len;\n      for (i = j = 0, len = text.length; j < len; i = ++j) {\n        c = text[i];\n        this.object.controls[i].controls[1].text = c;\n      }\n      return null;\n    };\n\n\n    /**\n    * An action-method to add a single letter to the text.\n    *\n    * @method action_addLetter\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} params The params-object which needs a letter-property containing the letter to add.\n     */\n\n    Component_TextInput.prototype.action_addLetter = function(sender, params) {\n      var letter;\n      letter = params.letter;\n      if (this.text.length < this.letters) {\n        this.text += letter;\n      } else {\n        this.text = this.text.replaceAt(this.text.length - 1, letter.toString());\n      }\n      return this.setText(this.text.rfill(\" \", this.letters));\n    };\n\n\n    /**\n    * An action-method to clear the letter at the current cursor position.\n    *\n    * @method action_removeLetter\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} [params=null] The params-object. Can be <b>null</b>.\n     */\n\n    Component_TextInput.prototype.action_removeLetter = function() {\n      if (this.text.length > 0) {\n        this.text = this.text.substring(0, this.text.length - 1);\n      }\n      return this.setText(this.text.rfill(\" \", this.letters));\n    };\n\n    return Component_TextInput;\n\n  })(gs.Component);\n\n  gs.Component_TextInput = Component_TextInput;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}