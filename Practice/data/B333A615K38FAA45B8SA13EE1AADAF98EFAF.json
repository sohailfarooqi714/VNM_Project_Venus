{
    "uid": "B333A615K38FAA45B8SA13EE1AADAF98EFAF",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component",
        "type": "game_script",
        "order": 0,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component\n    ###*\n    * The base class of all components. A component defines a certain piece of\n    * game logic. \n    *\n    * @module gs\n    * @class Component\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * The associated game object. A component only be part of one game object at the same time.\n        * @property object\n        * @type gs.Object_Base\n        * @default null\n        ###\n        @object = null\n        \n        ###*\n        * Indicates if the component is disposed. A disposed component cannot be used anymore.\n        * @property disposed\n        * @type boolean\n        * @default false\n        ###\n        @disposed = no\n        \n        ###*\n        * An optional unique id. The component can be accessed through this ID using the gs.Object_Base.findComponentById method.\n        * @property id\n        * @type string\n        * @default null\n        ###\n        @id = null\n        \n        ###*\n        * An optional name. The component can be found through its name using the gs.Object_Base.findComponentsByName method. Multiple\n        * components can have the same name. So the name can also be used to categorize components.\n        * @property name\n        * @type string\n        * @default \"\"\n        ###\n        @name = \"\"\n        \n        ###*\n        * Indicates if the component is setup.\n        * @property isSetup\n        * @type boolean\n        * @default no\n        ###\n        @isSetup = no\n        \n    ###*\n    * Called when the component is added to a new object.\n    * @method setup\n    ###\n    setup: -> \n        @isSetup = yes\n        \n    ###*\n    * Disposes the component. The component will be removed from the game object\n    * automatically.\n    * @method dispose\n    ###\n    dispose: -> @disposed = yes\n    \n    ###*\n    * Updates the component. Needs to be implemented in derived class.\n    * @method update\n    ###\n    update: ->\n        \ngs.Component = Component",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component;\n\n  Component = (function() {\n\n    /**\n    * The base class of all components. A component defines a certain piece of\n    * game logic. \n    *\n    * @module gs\n    * @class Component\n    * @memberof gs\n    * @constructor\n     */\n    function Component() {\n\n      /**\n      * The associated game object. A component only be part of one game object at the same time.\n      * @property object\n      * @type gs.Object_Base\n      * @default null\n       */\n      this.object = null;\n\n      /**\n      * Indicates if the component is disposed. A disposed component cannot be used anymore.\n      * @property disposed\n      * @type boolean\n      * @default false\n       */\n      this.disposed = false;\n\n      /**\n      * An optional unique id. The component can be accessed through this ID using the gs.Object_Base.findComponentById method.\n      * @property id\n      * @type string\n      * @default null\n       */\n      this.id = null;\n\n      /**\n      * An optional name. The component can be found through its name using the gs.Object_Base.findComponentsByName method. Multiple\n      * components can have the same name. So the name can also be used to categorize components.\n      * @property name\n      * @type string\n      * @default \"\"\n       */\n      this.name = \"\";\n\n      /**\n      * Indicates if the component is setup.\n      * @property isSetup\n      * @type boolean\n      * @default no\n       */\n      this.isSetup = false;\n    }\n\n\n    /**\n    * Called when the component is added to a new object.\n    * @method setup\n     */\n\n    Component.prototype.setup = function() {\n      return this.isSetup = true;\n    };\n\n\n    /**\n    * Disposes the component. The component will be removed from the game object\n    * automatically.\n    * @method dispose\n     */\n\n    Component.prototype.dispose = function() {\n      return this.disposed = true;\n    };\n\n\n    /**\n    * Updates the component. Needs to be implemented in derived class.\n    * @method update\n     */\n\n    Component.prototype.update = function() {};\n\n    return Component;\n\n  })();\n\n  gs.Component = Component;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}