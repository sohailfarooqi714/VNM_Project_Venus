{
    "uid": "7BE82043K96A3A41D6SAAFBEC5EA0135ADF9",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_Handler",
        "type": "game_script",
        "order": 8,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_FreeLayoutBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_Handler extends gs.Component\n    ###*\n    * The base class for all handler-components. A handler-component is\n    * used to handle condition- or event-based processes of a In-Game UI\n    * object like executing bindings or triggering actions.\n    *\n    * A handler is only executed if all assigned conditions and events are\n    * true.\n    *\n    * @module ui\n    * @class Component_Handler\n    * @extends gs.Component\n    * @memberof ui\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * @property mouseEntered\n        * @type boolean\n        * @protected\n        ###\n        @mouseEntered = no\n        \n        ###*\n        * @property mouseLeaved\n        * @type boolean\n        * @protected\n        ###\n        @mouseLeaved = yes\n     \n    ###*\n    * Checks if the condition is <b>true</b> for the specified game object.\n    *\n    * @method checkCondition\n    * @param {gs.Object_Base} object The game object.\n    * @param {Object} condition The condition-object.\n    * @return {boolean} If <b>true</b> the condition is true. Otherwise <b>false</b>.\n    * @static\n    ###   \n    @checkCondition: (object, condition) ->\n        result = no\n        \n        if condition.equalTo?\n            result = ui.Component_FormulaHandler.fieldValue(object, condition.field) == ui.Component_FormulaHandler.fieldValue(object, condition.equalTo)\n        else if condition.greaterThan?\n            result = ui.Component_FormulaHandler.fieldValue(object, condition.field) > ui.Component_FormulaHandler.fieldValue(object, condition.greaterThan)\n        else if condition.lessThan?\n            result = ui.Component_FormulaHandler.fieldValue(object, condition.field) < ui.Component_FormulaHandler.fieldValue(object, condition.lessThan)\n        else if condition.notEqualTo?\n            result = ui.Component_FormulaHandler.fieldValue(object, condition.field) != ui.Component_FormulaHandler.fieldValue(object, condition.notEqualTo)\n        \n        return result\n     \n    ###*\n    * Checks if the specified condition is <b>true</b>.\n    *\n    * @method checkCondition\n    * @param {Object} condition The condition-object.\n    * @return {boolean} If <b>true</b> the condition is true. Otherwise <b>false</b>.\n    ###     \n    checkCondition: (condition) -> ui.Component_Handler.checkCondition(@object, condition)\n    \n    ###*\n    * Checks if the specified conditions are <b>true</b>.\n    *\n    * @method checkConditions\n    * @param {Object[]} conditions An array of condition-objects.\n    * @return {boolean} If <b>true</b> all conditions are true. Otherwise <b>false</b>.\n    ###\n    checkConditions: (conditions) ->\n        result = yes\n        for condition in conditions\n            if not @checkCondition(condition)\n                result = no\n                break\n                \n        return result\n        \n    ###*\n    * Checks if the specified event is true.\n    *\n    * @method checkEvent\n    * @param {Object} event The event to check for.\n    * @param {Object} [binding=null] binding An optional binding-object necessary for some event-types.\n    * @return {boolean} If <b>true</b> the event is true. Otherwise <b>false</b>.\n    ###  \n    checkEvent: (event, binding) ->\n        result = no\n        \n        #if event == \"onInitialize\" and !SceneManager.scene.preparing\n        #    result = !@initializeEventEmitted\n        #    @initializeEventEmitted = yes\n        if event == \"onAlways\"\n            result = yes\n        else if event == \"onAction\"\n            result = Input.Mouse.buttons[Input.Mouse.LEFT] == 2 and @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y) \n        else if event == \"onCancel\"\n            result = Input.Mouse.buttons[Input.Mouse.RIGHT] == 2 and @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)     \n        else if event == \"onAccept\"\n            result = Input.release(Input.KEY_RETURN) or (Input.Mouse.buttons[Input.Mouse.LEFT] == 2 and @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y))         \n        else if event == \"onDragEnter\"    \n            entered = @object.dragDrop?.isDragging and @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)\n            result = !@mouseEntered and entered\n            @mouseEntered = entered\n        else if event == \"onDragLeave\"\n            leaved = @object.dragDrop?.isDragging and !@object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)\n            result = !@mouseLeaved and leaved\n            @mouseLeaved = leaved\n        else if event == \"onMouseEnter\"\n            entered = @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)\n            result = !@mouseEntered and entered\n            @mouseEntered = entered\n        else if event == \"onMouseLeave\"\n            leaved = !@object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)\n            result = !@mouseLeaved and leaved\n            @mouseLeaved = leaved\n        else if event == \"onMouseHover\"\n            result = @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)\n        else if event == \"onMouseClick\"\n            result = Input.Mouse.buttons[Input.Mouse.LEFT] == 2 and @object.dstRect.contains(Input.Mouse.x - @object.origin.x, Input.Mouse.y - @object.origin.y)\n        else if event.onChange?\n            value = @resolveFieldPath(event.onChange)\n            if value? \n                value = value.get(@object)\n                if binding[event.onChange] != value\n                    binding[event.onChange] = value\n                    result = yes\n            else\n                result = yes\n        \n        \n        return result\n     \n    ###*\n    * Checks if all events and conditions defined for the handler\n    * are true. If that check returns <b>true</b> the handler must be\n    * executed.\n    *\n    * @method checkObject\n    * @param {Object} object The game object to check.\n    * @return {boolean} If <b>true</b> the handler must be executed. Otherwise <b>false</b>.\n    ###     \n    checkObject: (object) ->\n        execute = yes\n            \n        if object.event?\n            object.events = [object.event]\n            delete object.event\n        if object.condition?\n            object.conditions = [object.condition]\n            delete object.condition\n        if object.events?\n            for event in object.events\n                execute = @checkEvent(event, object)\n                if execute then break\n        if object.conditions? and execute\n            execute = @checkConditions(object.conditions)\n        \n        return execute\n\nui.Component_Handler = Component_Handler",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_Handler,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_Handler = (function(superClass) {\n    extend(Component_Handler, superClass);\n\n\n    /**\n    * The base class for all handler-components. A handler-component is\n    * used to handle condition- or event-based processes of a In-Game UI\n    * object like executing bindings or triggering actions.\n    *\n    * A handler is only executed if all assigned conditions and events are\n    * true.\n    *\n    * @module ui\n    * @class Component_Handler\n    * @extends gs.Component\n    * @memberof ui\n    * @constructor\n     */\n\n    function Component_Handler() {\n\n      /**\n      * @property mouseEntered\n      * @type boolean\n      * @protected\n       */\n      this.mouseEntered = false;\n\n      /**\n      * @property mouseLeaved\n      * @type boolean\n      * @protected\n       */\n      this.mouseLeaved = true;\n    }\n\n\n    /**\n    * Checks if the condition is <b>true</b> for the specified game object.\n    *\n    * @method checkCondition\n    * @param {gs.Object_Base} object The game object.\n    * @param {Object} condition The condition-object.\n    * @return {boolean} If <b>true</b> the condition is true. Otherwise <b>false</b>.\n    * @static\n     */\n\n    Component_Handler.checkCondition = function(object, condition) {\n      var result;\n      result = false;\n      if (condition.equalTo != null) {\n        result = ui.Component_FormulaHandler.fieldValue(object, condition.field) === ui.Component_FormulaHandler.fieldValue(object, condition.equalTo);\n      } else if (condition.greaterThan != null) {\n        result = ui.Component_FormulaHandler.fieldValue(object, condition.field) > ui.Component_FormulaHandler.fieldValue(object, condition.greaterThan);\n      } else if (condition.lessThan != null) {\n        result = ui.Component_FormulaHandler.fieldValue(object, condition.field) < ui.Component_FormulaHandler.fieldValue(object, condition.lessThan);\n      } else if (condition.notEqualTo != null) {\n        result = ui.Component_FormulaHandler.fieldValue(object, condition.field) !== ui.Component_FormulaHandler.fieldValue(object, condition.notEqualTo);\n      }\n      return result;\n    };\n\n\n    /**\n    * Checks if the specified condition is <b>true</b>.\n    *\n    * @method checkCondition\n    * @param {Object} condition The condition-object.\n    * @return {boolean} If <b>true</b> the condition is true. Otherwise <b>false</b>.\n     */\n\n    Component_Handler.prototype.checkCondition = function(condition) {\n      return ui.Component_Handler.checkCondition(this.object, condition);\n    };\n\n\n    /**\n    * Checks if the specified conditions are <b>true</b>.\n    *\n    * @method checkConditions\n    * @param {Object[]} conditions An array of condition-objects.\n    * @return {boolean} If <b>true</b> all conditions are true. Otherwise <b>false</b>.\n     */\n\n    Component_Handler.prototype.checkConditions = function(conditions) {\n      var condition, i, len, result;\n      result = true;\n      for (i = 0, len = conditions.length; i < len; i++) {\n        condition = conditions[i];\n        if (!this.checkCondition(condition)) {\n          result = false;\n          break;\n        }\n      }\n      return result;\n    };\n\n\n    /**\n    * Checks if the specified event is true.\n    *\n    * @method checkEvent\n    * @param {Object} event The event to check for.\n    * @param {Object} [binding=null] binding An optional binding-object necessary for some event-types.\n    * @return {boolean} If <b>true</b> the event is true. Otherwise <b>false</b>.\n     */\n\n    Component_Handler.prototype.checkEvent = function(event, binding) {\n      var entered, leaved, ref, ref1, result, value;\n      result = false;\n      if (event === \"onAlways\") {\n        result = true;\n      } else if (event === \"onAction\") {\n        result = Input.Mouse.buttons[Input.Mouse.LEFT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n      } else if (event === \"onCancel\") {\n        result = Input.Mouse.buttons[Input.Mouse.RIGHT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n      } else if (event === \"onAccept\") {\n        result = Input.release(Input.KEY_RETURN) || (Input.Mouse.buttons[Input.Mouse.LEFT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y));\n      } else if (event === \"onDragEnter\") {\n        entered = ((ref = this.object.dragDrop) != null ? ref.isDragging : void 0) && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n        result = !this.mouseEntered && entered;\n        this.mouseEntered = entered;\n      } else if (event === \"onDragLeave\") {\n        leaved = ((ref1 = this.object.dragDrop) != null ? ref1.isDragging : void 0) && !this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n        result = !this.mouseLeaved && leaved;\n        this.mouseLeaved = leaved;\n      } else if (event === \"onMouseEnter\") {\n        entered = this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n        result = !this.mouseEntered && entered;\n        this.mouseEntered = entered;\n      } else if (event === \"onMouseLeave\") {\n        leaved = !this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n        result = !this.mouseLeaved && leaved;\n        this.mouseLeaved = leaved;\n      } else if (event === \"onMouseHover\") {\n        result = this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n      } else if (event === \"onMouseClick\") {\n        result = Input.Mouse.buttons[Input.Mouse.LEFT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);\n      } else if (event.onChange != null) {\n        value = this.resolveFieldPath(event.onChange);\n        if (value != null) {\n          value = value.get(this.object);\n          if (binding[event.onChange] !== value) {\n            binding[event.onChange] = value;\n            result = true;\n          }\n        } else {\n          result = true;\n        }\n      }\n      return result;\n    };\n\n\n    /**\n    * Checks if all events and conditions defined for the handler\n    * are true. If that check returns <b>true</b> the handler must be\n    * executed.\n    *\n    * @method checkObject\n    * @param {Object} object The game object to check.\n    * @return {boolean} If <b>true</b> the handler must be executed. Otherwise <b>false</b>.\n     */\n\n    Component_Handler.prototype.checkObject = function(object) {\n      var event, execute, i, len, ref;\n      execute = true;\n      if (object.event != null) {\n        object.events = [object.event];\n        delete object.event;\n      }\n      if (object.condition != null) {\n        object.conditions = [object.condition];\n        delete object.condition;\n      }\n      if (object.events != null) {\n        ref = object.events;\n        for (i = 0, len = ref.length; i < len; i++) {\n          event = ref[i];\n          execute = this.checkEvent(event, object);\n          if (execute) {\n            break;\n          }\n        }\n      }\n      if ((object.conditions != null) && execute) {\n        execute = this.checkConditions(object.conditions);\n      }\n      return execute;\n    };\n\n    return Component_Handler;\n\n  })(gs.Component);\n\n  ui.Component_Handler = Component_Handler;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}