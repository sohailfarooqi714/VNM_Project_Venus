{
    "uid": "C8B40A8B437AE9480E48954381E7FA9E52BC",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "GameTemp",
        "type": "game_script",
        "order": 2,
        "parentId": "2EC9F946K6417A4973S8308E368608E89B8B",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: GameTemp\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass GameTemp\n    ###*\n    * The GameTemp holds the temporary data of the currently running game like currently displayed\n    * choices, choice timer, etc. The GameTemp is written to the save-game as well.\n    *\n    * @module gs\n    * @class GameTemp\n    * @memberof gs\n    * @constructor\n    * @param {Object} data - An optional data-bundle to initialize the game-temp from.\n    ###\n    constructor: (data) ->\n        ###*\n        * Stores the current choice timer.\n        *\n        * @property choiceTimer\n        * @type gs.Object_Timer\n        ### \n        @choiceTimer = null\n        \n        @restore(data)\n     \n    ###*\n    * Stores the current choices.\n    *\n    * @property choices\n    * @type Object[]\n    ### \n    @accessors \"choices\", \n        set: (choices) -> SceneManager.scene.choices = choices\n        get: -> SceneManager.scene.choices\n        \n    ###*\n    * Serializes the game-temp into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} A data-bundle which can be serialized to JSON.\n    ### \n    toDataBundle: ->\n        bundle = {}\n        Object.mixin(bundle, this)\n    \n        bundle.choiceTimer = @choiceTimer?.toDataBundle()\n        \n        return bundle\n        \n    ###*\n    * Restores the game-temp from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - A data-bundle to restore the game-temp from.\n    ###     \n    restore: (data) ->\n        if !data then return\n        \n        Object.mixin(this, data)\n        \n        if data.choiceTimer\n            @choiceTimer = new gs.Object_Timer(data.choiceTimer)\n            \n    ###*\n    * Clears the game temp.\n    *\n    * @method clear\n    ### \n    clear: ->\n        Object.keys(this).forEach (x) => delete this[x]\n\ngs.GameTemp = GameTemp",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var GameTemp;\n\n  GameTemp = (function() {\n\n    /**\n    * The GameTemp holds the temporary data of the currently running game like currently displayed\n    * choices, choice timer, etc. The GameTemp is written to the save-game as well.\n    *\n    * @module gs\n    * @class GameTemp\n    * @memberof gs\n    * @constructor\n    * @param {Object} data - An optional data-bundle to initialize the game-temp from.\n     */\n    function GameTemp(data) {\n\n      /**\n      * Stores the current choice timer.\n      *\n      * @property choiceTimer\n      * @type gs.Object_Timer\n       */\n      this.choiceTimer = null;\n      this.restore(data);\n    }\n\n\n    /**\n    * Stores the current choices.\n    *\n    * @property choices\n    * @type Object[]\n     */\n\n    GameTemp.accessors(\"choices\", {\n      set: function(choices) {\n        return SceneManager.scene.choices = choices;\n      },\n      get: function() {\n        return SceneManager.scene.choices;\n      }\n    });\n\n\n    /**\n    * Serializes the game-temp into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} A data-bundle which can be serialized to JSON.\n     */\n\n    GameTemp.prototype.toDataBundle = function() {\n      var bundle, ref;\n      bundle = {};\n      Object.mixin(bundle, this);\n      bundle.choiceTimer = (ref = this.choiceTimer) != null ? ref.toDataBundle() : void 0;\n      return bundle;\n    };\n\n\n    /**\n    * Restores the game-temp from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - A data-bundle to restore the game-temp from.\n     */\n\n    GameTemp.prototype.restore = function(data) {\n      if (!data) {\n        return;\n      }\n      Object.mixin(this, data);\n      if (data.choiceTimer) {\n        return this.choiceTimer = new gs.Object_Timer(data.choiceTimer);\n      }\n    };\n\n\n    /**\n    * Clears the game temp.\n    *\n    * @method clear\n     */\n\n    GameTemp.prototype.clear = function() {\n      return Object.keys(this).forEach((function(_this) {\n        return function(x) {\n          return delete _this[x];\n        };\n      })(this));\n    };\n\n    return GameTemp;\n\n  })();\n\n  gs.GameTemp = GameTemp;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}