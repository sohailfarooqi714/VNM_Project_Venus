{
    "uid": "91139725K09EAA4678SBA18E0B484F480118",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_BindingHandler",
        "type": "game_script",
        "order": 9,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_BindingHandler\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_BindingHandler extends ui.Component_Handler\n    ###*\n    * Caches already compiled binding-paths.\n    * @property compiledPaths\n    * @type Object\n    * @static\n    ###\n    @compiledPaths: {}\n    \n    ###*\n    * A binding-handler component allows a UI game object to execute\n    * property-bindings.<br><br>\n    *\n    * For example: A text-label can bind its text-property to a backend-field \n    * like the current music-volume to always display correct music-volume. \n    * If the volume changes, the text-property will be updated\n    * automatically.\n    *\n    * To define a binding, a special property-path syntax is used. For example:<br>\n    * <br>\n    * $myTextField.text<br>\n    * <br>\n    * is a property-path to access the text-property of a text-field object\n    * with the identifier \"myTextField\". For more information, take a look\n    * into the \"In Game UI System\" section of the help-file.\n    * \n    * @module ui\n    * @class Component_BindingHandler\n    * @extends ui.Component_Handler\n    * @memberof ui\n    * @constructor\n    ###\n    constructor: () ->\n\n    ###*\n    * Initializes the binding-handler.\n    * \n    * @method setup\n    ###\n    setup: ->\n     \n    ###*\n    * Updates the binding-handler.\n    * \n    * @method update\n    ###   \n    update: ->\n        for binding in @object.bindings\n            @executeBinding(binding)\n        \n        @object.initialized = yes\n        \n        return null\n     \n    ###*\n    * Executes a specified binding. The binding is only executed if all assigned\n    * events and conditions are true.\n    * \n    * @method executeBinding\n    * @param {Object} binding - The binding to execute.\n    ###    \n    executeBinding: (binding) ->\n        return if not @checkObject(binding)\n        \n        source = binding.sourceFunc ? (binding.sourceFunc=@resolveFieldPath(binding.sourceField))\n        target = binding.targetFunc ? (binding.targetFunc=@resolveFieldPath(binding.targetField))\n        \n        return if !target\n        return target.set(@object, null) if !source\n            \n        value = source.get(@object)\n        offset = 0\n        \n        if binding.offset?\n            value += binding.offset\n        if binding.max?\n            value = Math.min(binding.max, value)\n        if binding.min?\n            value = Math.max(binding.min, value)\n            \n        target.set(@object, value)\n            \n    ###*\n    * Evaluates a specified property-path and returns the result.\n    * \n    * @method fieldValue\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n    ### \n    fieldValue: (path) -> ui.Component_BindingHandler.fieldValue(@object, path)  \n    \n    ###*\n    * Executes a specified binding. The binding is only executed if all assigned\n    * events and conditions are true.\n    * \n    * @method executeBinding\n    * @param {Object} binding - The binding to execute.\n    * @static\n    ### \n    @executeBinding: (sender, binding) ->\n        binder = new ui.BindingHandler()\n        binder.object = sender\n        binder.executeBinding(binding)\n\n    ###*\n    * Evaluates a property-path on a specified object and returns the result.\n    * \n    * @method fieldValue\n    * @static\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n    ### \n    @fieldValue: (object, path) ->\n        if typeof path == \"string\"\n            field = ui.Component_BindingHandler.resolveFieldPath(object, path)\n            return 0 unless field?\n            return field.get(object)\n        else\n            return path\n     \n    ###*\n    * Resolves a property-path of a specified object and returns the result. The\n    * result-object has a get- and an optional set-function to get or set the\n    * value for the property-path. The set-function is only present for property-paths\n    * which can be written.\n    * \n    * @method resolveFieldPath\n    * @static\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.\n    ###    \n    @resolveFieldPath: (object, path) -> \n        result = ui.Component_BindingHandler.compiledPaths[path]\n        if result? then return result\n        \n        if path?  \n            result = { set: null, get: null }\n            result.get = eval(\"(function(o) { return \" + path + \" })\")\n            result.set = eval(\"(function(o, v) { \" + path + \" = v; })\")\n          \n            ui.Component_BindingHandler.compiledPaths[path] = result\n        \n        return result\n    \n    ###*\n    * Resolves a property-path and returns the result. The\n    * result-object has a get- and an optional set-function to get or set the\n    * value for the property-path. The set-function is only present for property-paths\n    * which can be written.\n    * \n    * @method resolveFieldPath\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.\n    ###     \n    resolveFieldPath: (path) -> ui.Component_BindingHandler.resolveFieldPath(@object, path)\n        \nui.Component_BindingHandler = Component_BindingHandler",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_BindingHandler,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_BindingHandler = (function(superClass) {\n    extend(Component_BindingHandler, superClass);\n\n\n    /**\n    * Caches already compiled binding-paths.\n    * @property compiledPaths\n    * @type Object\n    * @static\n     */\n\n    Component_BindingHandler.compiledPaths = {};\n\n\n    /**\n    * A binding-handler component allows a UI game object to execute\n    * property-bindings.<br><br>\n    *\n    * For example: A text-label can bind its text-property to a backend-field \n    * like the current music-volume to always display correct music-volume. \n    * If the volume changes, the text-property will be updated\n    * automatically.\n    *\n    * To define a binding, a special property-path syntax is used. For example:<br>\n    * <br>\n    * $myTextField.text<br>\n    * <br>\n    * is a property-path to access the text-property of a text-field object\n    * with the identifier \"myTextField\". For more information, take a look\n    * into the \"In Game UI System\" section of the help-file.\n    * \n    * @module ui\n    * @class Component_BindingHandler\n    * @extends ui.Component_Handler\n    * @memberof ui\n    * @constructor\n     */\n\n    function Component_BindingHandler() {}\n\n\n    /**\n    * Initializes the binding-handler.\n    * \n    * @method setup\n     */\n\n    Component_BindingHandler.prototype.setup = function() {};\n\n\n    /**\n    * Updates the binding-handler.\n    * \n    * @method update\n     */\n\n    Component_BindingHandler.prototype.update = function() {\n      var binding, i, len, ref;\n      ref = this.object.bindings;\n      for (i = 0, len = ref.length; i < len; i++) {\n        binding = ref[i];\n        this.executeBinding(binding);\n      }\n      this.object.initialized = true;\n      return null;\n    };\n\n\n    /**\n    * Executes a specified binding. The binding is only executed if all assigned\n    * events and conditions are true.\n    * \n    * @method executeBinding\n    * @param {Object} binding - The binding to execute.\n     */\n\n    Component_BindingHandler.prototype.executeBinding = function(binding) {\n      var offset, ref, ref1, source, target, value;\n      if (!this.checkObject(binding)) {\n        return;\n      }\n      source = (ref = binding.sourceFunc) != null ? ref : (binding.sourceFunc = this.resolveFieldPath(binding.sourceField));\n      target = (ref1 = binding.targetFunc) != null ? ref1 : (binding.targetFunc = this.resolveFieldPath(binding.targetField));\n      if (!target) {\n        return;\n      }\n      if (!source) {\n        return target.set(this.object, null);\n      }\n      value = source.get(this.object);\n      offset = 0;\n      if (binding.offset != null) {\n        value += binding.offset;\n      }\n      if (binding.max != null) {\n        value = Math.min(binding.max, value);\n      }\n      if (binding.min != null) {\n        value = Math.max(binding.min, value);\n      }\n      return target.set(this.object, value);\n    };\n\n\n    /**\n    * Evaluates a specified property-path and returns the result.\n    * \n    * @method fieldValue\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n     */\n\n    Component_BindingHandler.prototype.fieldValue = function(path) {\n      return ui.Component_BindingHandler.fieldValue(this.object, path);\n    };\n\n\n    /**\n    * Executes a specified binding. The binding is only executed if all assigned\n    * events and conditions are true.\n    * \n    * @method executeBinding\n    * @param {Object} binding - The binding to execute.\n    * @static\n     */\n\n    Component_BindingHandler.executeBinding = function(sender, binding) {\n      var binder;\n      binder = new ui.BindingHandler();\n      binder.object = sender;\n      return binder.executeBinding(binding);\n    };\n\n\n    /**\n    * Evaluates a property-path on a specified object and returns the result.\n    * \n    * @method fieldValue\n    * @static\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The value of the property-path.\n     */\n\n    Component_BindingHandler.fieldValue = function(object, path) {\n      var field;\n      if (typeof path === \"string\") {\n        field = ui.Component_BindingHandler.resolveFieldPath(object, path);\n        if (field == null) {\n          return 0;\n        }\n        return field.get(object);\n      } else {\n        return path;\n      }\n    };\n\n\n    /**\n    * Resolves a property-path of a specified object and returns the result. The\n    * result-object has a get- and an optional set-function to get or set the\n    * value for the property-path. The set-function is only present for property-paths\n    * which can be written.\n    * \n    * @method resolveFieldPath\n    * @static\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.\n     */\n\n    Component_BindingHandler.resolveFieldPath = function(object, path) {\n      var result;\n      result = ui.Component_BindingHandler.compiledPaths[path];\n      if (result != null) {\n        return result;\n      }\n      if (path != null) {\n        result = {\n          set: null,\n          get: null\n        };\n        result.get = eval(\"(function(o) { return \" + path + \" })\");\n        result.set = eval(\"(function(o, v) { \" + path + \" = v; })\");\n        ui.Component_BindingHandler.compiledPaths[path] = result;\n      }\n      return result;\n    };\n\n\n    /**\n    * Resolves a property-path and returns the result. The\n    * result-object has a get- and an optional set-function to get or set the\n    * value for the property-path. The set-function is only present for property-paths\n    * which can be written.\n    * \n    * @method resolveFieldPath\n    * @param {Object} object - An object to evaluate the property-path on.\n    * @param {string} path - A property-path.\n    * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.\n     */\n\n    Component_BindingHandler.prototype.resolveFieldPath = function(path) {\n      return ui.Component_BindingHandler.resolveFieldPath(this.object, path);\n    };\n\n    return Component_BindingHandler;\n\n  })(ui.Component_Handler);\n\n  ui.Component_BindingHandler = Component_BindingHandler;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}