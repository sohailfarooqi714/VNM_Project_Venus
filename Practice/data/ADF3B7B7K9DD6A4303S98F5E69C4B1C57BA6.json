{
    "uid": "ADF3B7B7K9DD6A4303S98F5E69C4B1C57BA6",
    "isLoaded": true,
    "lastModificationTime": 1428415344559,
    "items": {
        "name": "Component_Timer",
        "type": "game_script",
        "order": 20,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "content": "# ===================================================================\n#\n#   Script: Component_Timer\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_Timer extends gs.Component\n    ###*\n    * A component which adds timing-features to a game object. A timer-component\n    * can be used as a regular timer or as a stop-watch.\n    *\n    * @module gs\n    * @class Component_Timer\n    * @extends gs.Component\n    * @memberof gs\n    ###\n    constructor: ->\n        super()\n        \n        ###*\n        * Indicates if the timer is running. \n        *\n        * @property isRunning\n        * @type boolean\n        * @readOnly\n        ###\n        @isRunning = no\n        \n        ###*\n        * @property frameCount\n        * @type number\n        * @private\n        ###\n        @frameCount = 0\n        \n    ###*\n    * Starts the timer. \n    *\n    * @method start\n    ###\n    start: -> \n        @isRunning = yes\n        \n        if @object.stopWatch\n            @frameCount = 0\n        else\n            @frameCount = @minutes * 60 * 60 + @seconds * 60\n     \n    ###*\n    * Stops the timer. \n    *\n    * @method stop\n    ###   \n    stop: -> @isRunning = no\n    \n    ###*\n    * Resumes the timer. \n    *\n    * @method resume\n    ###\n    resume: -> @isRunning = yes\n    \n    ###*\n    * Pauses the timer. \n    *\n    * @method pause\n    ###\n    pause: -> @isRunning = no\n        \n    ###*\n    * Updates the timer.\n    *\n    * @method update\n    ###\n    update: ->\n        if @object.stopWatch\n            @updateStopWatch()\n        else\n            @updateTimer()\n            \n    ###*\n    * Updates the regular timer behavior\n    *\n    * @method updateTimer\n    ###\n    updateTimer: ->\n        if @isRunning and @frameCount == 0\n            @isRunning = no\n            @object.events?.emit(\"finish\", this)\n        if not @isRunning then return\n        \n        seconds = Math.round(@frameCount / 60)\n        \n        @seconds = seconds % 60\n        @minutes = Math.floor(seconds / 60)\n        \n        @frameCount--\n        \n    ###*\n    * Updates the stop-watch behavior\n    *\n    * @method updateStopWatch\n    ###\n    updateStopWatch: ->\n        if not @isRunning then return\n        \n        seconds = Math.round(@frameCount / 60)\n        \n        @seconds = seconds % 60\n        @minutes = Math.floor(seconds / 60)\n        \n        @frameCount++\n        \n            \n\n        \n \ngs.Component_Timer = Component_Timer",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_Timer,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_Timer = (function(superClass) {\n    extend(Component_Timer, superClass);\n\n\n    /**\n    * A component which adds timing-features to a game object. A timer-component\n    * can be used as a regular timer or as a stop-watch.\n    *\n    * @module gs\n    * @class Component_Timer\n    * @extends gs.Component\n    * @memberof gs\n     */\n\n    function Component_Timer() {\n      Component_Timer.__super__.constructor.call(this);\n\n      /**\n      * Indicates if the timer is running. \n      *\n      * @property isRunning\n      * @type boolean\n      * @readOnly\n       */\n      this.isRunning = false;\n\n      /**\n      * @property frameCount\n      * @type number\n      * @private\n       */\n      this.frameCount = 0;\n    }\n\n\n    /**\n    * Starts the timer. \n    *\n    * @method start\n     */\n\n    Component_Timer.prototype.start = function() {\n      this.isRunning = true;\n      if (this.object.stopWatch) {\n        return this.frameCount = 0;\n      } else {\n        return this.frameCount = this.minutes * 60 * 60 + this.seconds * 60;\n      }\n    };\n\n\n    /**\n    * Stops the timer. \n    *\n    * @method stop\n     */\n\n    Component_Timer.prototype.stop = function() {\n      return this.isRunning = false;\n    };\n\n\n    /**\n    * Resumes the timer. \n    *\n    * @method resume\n     */\n\n    Component_Timer.prototype.resume = function() {\n      return this.isRunning = true;\n    };\n\n\n    /**\n    * Pauses the timer. \n    *\n    * @method pause\n     */\n\n    Component_Timer.prototype.pause = function() {\n      return this.isRunning = false;\n    };\n\n\n    /**\n    * Updates the timer.\n    *\n    * @method update\n     */\n\n    Component_Timer.prototype.update = function() {\n      if (this.object.stopWatch) {\n        return this.updateStopWatch();\n      } else {\n        return this.updateTimer();\n      }\n    };\n\n\n    /**\n    * Updates the regular timer behavior\n    *\n    * @method updateTimer\n     */\n\n    Component_Timer.prototype.updateTimer = function() {\n      var ref, seconds;\n      if (this.isRunning && this.frameCount === 0) {\n        this.isRunning = false;\n        if ((ref = this.object.events) != null) {\n          ref.emit(\"finish\", this);\n        }\n      }\n      if (!this.isRunning) {\n        return;\n      }\n      seconds = Math.round(this.frameCount / 60);\n      this.seconds = seconds % 60;\n      this.minutes = Math.floor(seconds / 60);\n      return this.frameCount--;\n    };\n\n\n    /**\n    * Updates the stop-watch behavior\n    *\n    * @method updateStopWatch\n     */\n\n    Component_Timer.prototype.updateStopWatch = function() {\n      var seconds;\n      if (!this.isRunning) {\n        return;\n      }\n      seconds = Math.round(this.frameCount / 60);\n      this.seconds = seconds % 60;\n      this.minutes = Math.floor(seconds / 60);\n      return this.frameCount++;\n    };\n\n    return Component_Timer;\n\n  })(gs.Component);\n\n  gs.Component_Timer = Component_Timer;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}