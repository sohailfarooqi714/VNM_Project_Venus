{
    "uid": "9C4F6842K2187A4C1ESB129ECD7C93DB93B6",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_GridLayout",
        "type": "game_script",
        "order": 1,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_GridLayout\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_GridLayout extends ui.Object_UIElement\n    ###*\n    * A grid-layout which layouts all it sub-objects\n    * in a grid of rows and columns.\n    *\n    * @module ui\n    * @class Object_GridLayout\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n    ###  \n    constructor: (x, y, width, height, rows, columns) ->\n        super()\n        @dstRect.set(x || 0, y || 0, width || 1, height || 1 )\n        \n        ###*\n        * Indicates if the layout is resizable.\n        * @property resizable\n        * @type boolean\n        ###\n        @resizable = no\n        \n        ###*\n        * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type vn.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The layout's sub-objects.\n        * @property controls\n        * @type ui.Object_UIElement[]\n        ###\n        @controls = []\n        \n        ###*\n        * Number of rows for the grid.\n        * @property rows\n        * @type number\n        ###\n        @rows = rows\n        \n        ###*\n        * Number of columns for the grid.\n        * @property columns\n        * @type number\n        ###\n        @columns = columns\n        \n        ###*\n        * The spacing between the cells of the grid.\n        * @property cellSpacing\n        * @type ui.Spacing\n        ###\n        @cellSpacing = [0, 0, 0, 0]\n        \n        ###*\n        * Indicates if the layouts resizes to fit its content.\n        * @property sizeToFit\n        * @type boolean\n        ###\n        @sizeToFit = no\n        \n        ###*\n        * The behavior component to add grid-layout specific behavior.\n        * @property behavior\n        * @type gs.Component_GridLayoutBehavior\n        ###\n        @behavior = new gs.Component_GridLayoutBehavior()\n        \n        @addComponent(@behavior)\n        @addComponent(@animator)\n        \nui.Object_GridLayout = Object_GridLayout",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_GridLayout,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_GridLayout = (function(superClass) {\n    extend(Object_GridLayout, superClass);\n\n\n    /**\n    * A grid-layout which layouts all it sub-objects\n    * in a grid of rows and columns.\n    *\n    * @module ui\n    * @class Object_GridLayout\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_GridLayout(x, y, width, height, rows, columns) {\n      Object_GridLayout.__super__.constructor.call(this);\n      this.dstRect.set(x || 0, y || 0, width || 1, height || 1);\n\n      /**\n      * Indicates if the layout is resizable.\n      * @property resizable\n      * @type boolean\n       */\n      this.resizable = false;\n\n      /**\n      * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type vn.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The layout's sub-objects.\n      * @property controls\n      * @type ui.Object_UIElement[]\n       */\n      this.controls = [];\n\n      /**\n      * Number of rows for the grid.\n      * @property rows\n      * @type number\n       */\n      this.rows = rows;\n\n      /**\n      * Number of columns for the grid.\n      * @property columns\n      * @type number\n       */\n      this.columns = columns;\n\n      /**\n      * The spacing between the cells of the grid.\n      * @property cellSpacing\n      * @type ui.Spacing\n       */\n      this.cellSpacing = [0, 0, 0, 0];\n\n      /**\n      * Indicates if the layouts resizes to fit its content.\n      * @property sizeToFit\n      * @type boolean\n       */\n      this.sizeToFit = false;\n\n      /**\n      * The behavior component to add grid-layout specific behavior.\n      * @property behavior\n      * @type gs.Component_GridLayoutBehavior\n       */\n      this.behavior = new gs.Component_GridLayoutBehavior();\n      this.addComponent(this.behavior);\n      this.addComponent(this.animator);\n    }\n\n    return Object_GridLayout;\n\n  })(ui.Object_UIElement);\n\n  ui.Object_GridLayout = Object_GridLayout;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}