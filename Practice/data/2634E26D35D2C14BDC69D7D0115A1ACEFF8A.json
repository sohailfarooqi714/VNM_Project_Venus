{
    "uid": "2634E26D35D2C14BDC69D7D0115A1ACEFF8A",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_DomainContainer",
        "type": "game_script",
        "order": 2,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "scriptType": 0,
        "content": "# ===================================================================\n#\n#   Script: Component_Container\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_DomainContainer extends gs.Component_Container\n    ###*\n    * A container component allows an object to have sub-objects.\n    * @module gs\n    * @class Component_DomainContainer\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (disposeBehavior) ->\n        super(disposeBehavior)\n        \n        ###*\n        * The current domain. The default domain is an empty string. Please use\n        * <b>changeDomain</b> to change the current domain.\n        * @property domain\n        * @readOnly\n        ###\n        @domain = \"com.degica.vnm.default\"\n        @domains = [\"com.degica.vnm.default\"]\n     \n    ###*\n    * Changes the component and all sub-objects.\n    * @method changeDomain\n    * @param {string} domain - The domain to change to.\n    ###   \n    dispose: ->\n        super\n        \n        for domain in @domains\n            if domain != @domain\n                @object.subObjects = @object.subObjectsByDomain[domain]\n                @object.disposeObjects()\n        @object.subObjects = @object.subObjectsByDomain[@domain]\n        \n    ###*\n    * Changes the current domain.\n    * @method changeDomain\n    * @param {string} domain - The domain to change to.\n    ###   \n    changeDomain: (domain) ->\n        @domain = domain\n        objects = @object.subObjectsByDomain[domain]\n        if !objects\n            objects = @object.subObjectsByDomain[domain] = []\n            @domains = Object.keys(@object.subObjectsByDomain)\n            \n        @object.subObjects = objects\n    \n    ###*\n    * Sets the visibility of all sub objects of all domains.\n    * @method setVisible\n    * @param {boolean} visible - The new visibility.\n    ###\n    setVisible: (visible) ->\n        for domain in @domains\n            subObjects = @object.subObjectsByDomain[domain]\n            if subObjects then for subObject in subObjects\n                if subObject\n                    subObject.visible = visible\n                    subObject.update()\n                \n    ###*\n    * Updates all sub-objects and sorts them if necessary. It also removes\n    * disposed objects from the list of sub-objects.\n    * @method update\n    ###\n    update: ->\n        for domain in @domains\n            subObjects = @object.subObjectsByDomain[domain]\n\n            i = 0\n            while i < subObjects.length\n                subObject = subObjects[i]\n                if subObject?.active\n                    if subObject.disposed\n                        subObjects[i] = null\n                    else\n                        subObject.update()\n                i++\n                \n        return null\n                \n        \n        \ngs.Component_DomainContainer = Component_DomainContainer\n",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_DomainContainer,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_DomainContainer = (function(superClass) {\n    extend(Component_DomainContainer, superClass);\n\n\n    /**\n    * A container component allows an object to have sub-objects.\n    * @module gs\n    * @class Component_DomainContainer\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_DomainContainer(disposeBehavior) {\n      Component_DomainContainer.__super__.constructor.call(this, disposeBehavior);\n\n      /**\n      * The current domain. The default domain is an empty string. Please use\n      * <b>changeDomain</b> to change the current domain.\n      * @property domain\n      * @readOnly\n       */\n      this.domain = \"com.degica.vnm.default\";\n      this.domains = [\"com.degica.vnm.default\"];\n    }\n\n\n    /**\n    * Changes the component and all sub-objects.\n    * @method changeDomain\n    * @param {string} domain - The domain to change to.\n     */\n\n    Component_DomainContainer.prototype.dispose = function() {\n      var domain, j, len, ref;\n      Component_DomainContainer.__super__.dispose.apply(this, arguments);\n      ref = this.domains;\n      for (j = 0, len = ref.length; j < len; j++) {\n        domain = ref[j];\n        if (domain !== this.domain) {\n          this.object.subObjects = this.object.subObjectsByDomain[domain];\n          this.object.disposeObjects();\n        }\n      }\n      return this.object.subObjects = this.object.subObjectsByDomain[this.domain];\n    };\n\n\n    /**\n    * Changes the current domain.\n    * @method changeDomain\n    * @param {string} domain - The domain to change to.\n     */\n\n    Component_DomainContainer.prototype.changeDomain = function(domain) {\n      var objects;\n      this.domain = domain;\n      objects = this.object.subObjectsByDomain[domain];\n      if (!objects) {\n        objects = this.object.subObjectsByDomain[domain] = [];\n        this.domains = Object.keys(this.object.subObjectsByDomain);\n      }\n      return this.object.subObjects = objects;\n    };\n\n\n    /**\n    * Sets the visibility of all sub objects of all domains.\n    * @method setVisible\n    * @param {boolean} visible - The new visibility.\n     */\n\n    Component_DomainContainer.prototype.setVisible = function(visible) {\n      var domain, j, len, ref, results, subObject, subObjects;\n      ref = this.domains;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        domain = ref[j];\n        subObjects = this.object.subObjectsByDomain[domain];\n        if (subObjects) {\n          results.push((function() {\n            var k, len1, results1;\n            results1 = [];\n            for (k = 0, len1 = subObjects.length; k < len1; k++) {\n              subObject = subObjects[k];\n              if (subObject) {\n                subObject.visible = visible;\n                results1.push(subObject.update());\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          })());\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Updates all sub-objects and sorts them if necessary. It also removes\n    * disposed objects from the list of sub-objects.\n    * @method update\n     */\n\n    Component_DomainContainer.prototype.update = function() {\n      var domain, i, j, len, ref, subObject, subObjects;\n      ref = this.domains;\n      for (j = 0, len = ref.length; j < len; j++) {\n        domain = ref[j];\n        subObjects = this.object.subObjectsByDomain[domain];\n        i = 0;\n        while (i < subObjects.length) {\n          subObject = subObjects[i];\n          if (subObject != null ? subObject.active : void 0) {\n            if (subObject.disposed) {\n              subObjects[i] = null;\n            } else {\n              subObject.update();\n            }\n          }\n          i++;\n        }\n      }\n      return null;\n    };\n\n    return Component_DomainContainer;\n\n  })(gs.Component_Container);\n\n  gs.Component_DomainContainer = Component_DomainContainer;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}