{
    "uid": "3EAA6BFDKE6F9A4241SA320EB29D6E8E3F3F",
    "isLoaded": true,
    "lastModificationTime": 1421095529385,
    "items": {
        "name": "Component_CommonEventBehavior",
        "type": "game_script",
        "order": 17,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "content": "# ===================================================================\n#\n#   Script: Component_CommonEventBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_CommonEventBehavior extends gs.Component\n    ###*\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n    ###\n    onDataBundleRestore: (data, context) ->\n        if @object.rid?\n            @object.record = RecordManager.commonEvents[@object.rid]\n            @object.interpreter?.object = this\n            @object.commands = @object.record.commands\n        @setupEventHandlers()\n        \n    ###*\n    * A component which allows a game object to execute common-events.\n    *\n    * @module gs\n    * @class Component_CommonEventBehavior\n    * @extends gs.Component\n    * @memberof gs\n    ###\n    constructor: () ->\n        super()\n        \n        ###*\n        * @property readyToStart\n        * @type boolean\n        * @private\n        ###\n        @readyToStart = no\n        \n        ###*\n        * @property initialized\n        * @type boolean\n        * @private\n        ###\n        @initialized = no\n        \n        @callDepth = 0\n        \n    ###*\n    * Serializes the component into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ### \n    toDataBundle: ->\n        return {\n            initialized: @initialized,\n            readyToStart: @readyToStart\n        }\n        \n    ###*\n    * Restores the component from a data-bundle\n    *\n    * @method restore\n    * @param {Object} bundle- The data-bundle.\n    ###    \n    restore: (data) ->\n        @setup()\n        @readyToStart = data.readyToStart\n        @initialized = data.initialized\n        \n    ###*\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n    ### \n    setupEventHandlers: ->\n        if !@object.interpreter then return\n        \n        if @object.record.startCondition == 1\n            @object.interpreter.onFinish = => \n                if not @object.record.parallel\n                    @object.events?.emit(\"finish\", this)\n        else\n            if @object.record.parallel\n                @object.interpreter.onFinish = (sender) => @object.removeComponent(sender)\n            else\n                @object.interpreter.onFinish = (sender) => @object.events.emit(\"finish\", this)\n                    \n    ###*\n    * Initializes the common-event.\n    *\n    * @method setup\n    ###  \n    setup: ->\n        GameManager.variableStore.setupLocalVariables(@object.record)\n        \n        @object.record.parameters = if @object.record.parameters? then @object.record.parameters else []\n        @object.record.startCondition = if @object.record.startCondition? then @object.record.startCondition else 0\n        @object.record.parallel = if @object.record.parallel? then @object.record.parallel else no\n        @object.record.conditionSwitch = if @object.record.conditionSwitch? then @object.record.conditionSwitch else null\n        @object.record.conditionEnabled = @object.record.conditionEnabled\n        \n        if @object.record.startCondition == 1\n            @object.interpreter = new gs.Component_CommandInterpreter()\n            @object.interpreter.onFinish = => \n                if not @object.record.parallel\n                    @object.events?.emit(\"finish\", this)\n                else\n                    @restart()\n                    \n            \n            @object.interpreter.context.set(@object.record.index, @object.record)\n            @object.addComponent(@object.interpreter)\n\n        @initialized = yes\n    \n    ###*\n    * Starts the common-event interpreter with the specified parameters.\n    * \n    * @method start\n    * @param {Object} parameters The common-event's parameters which can be configured in database.\n    ###   \n    start: (parameters) ->\n        @startParameters = parameters        \n                \n        if @object.interpreter? and not @object.interpreter.isRunning\n            @object.commands = @object.record.commands\n            @readyToStart = yes\n            @object.events?.emit(\"start\", this)\n            \n        if @object.record.startCondition == 0 and @object.record.parallel\n            @object.events?.emit(\"finish\", this)\n  \n    ###*\n    * Initializes variable-store with the start-up parameters configured for the\n    * common-event in Database.\n    *\n    * @method setupParameters\n    ###\n    setupParameters: (parameters, parentContext) ->\n        if parameters? and parameters.values?\n            for i in [0...parameters.values.length]\n                value = parameters.values[i]\n                parameter = @object.record.parameters[i]\n                if parameter? and value?\n                    GameManager.variableStore.setupTempVariables(parentContext)\n                    switch parameter.type\n                        when 1 # Number\n                            value = GameManager.variableStore.numberValueOf(value)\n                            GameManager.variableStore.setupTempVariables(@object.interpreter.context)\n                            GameManager.variableStore.setNumberValueTo(parameter.numberVariable, value)\n                        when 2 # Boolean\n                            value = GameManager.variableStore.booleanValueOf(value)\n                            GameManager.variableStore.setupTempVariables(@object.interpreter.context)\n                            GameManager.variableStore.setBooleanValueTo(parameter.booleanVariable, value)\n                        when 3 # String\n                            value = GameManager.variableStore.stringValueOf(value)\n                            GameManager.variableStore.setupTempVariables(@object.interpreter.context)\n                            GameManager.variableStore.setStringValueTo(parameter.stringVariable, value)\n    ###*\n    * Calls the common-event with the specified parameters.\n    *\n    * @method call\n    * @param {Object} parameters The common-event's parameters which can be configured in database.\n    ### \n    call: (parameters, settings, parentContext) ->\n        if not @object.record.singleInstance\n            interpreter = new gs.Component_CommandInterpreter()\n            interpreter.context.set(@object.record.index + \"_\" + @callDepth, @object.record)\n            GameManager.variableStore.clearTempVariables(interpreter.context)\n            @object.commands = @object.record.commands\n            @callDepth++\n        else\n            interpreter = @object.interpreter || new gs.Component_CommandInterpreter()\n            interpreter.context.set(@object.record.index, @object.record)\n            @object.commands = @object.record.commands\n            \n        interpreter.repeat = no\n        interpreter.object = @object\n        interpreter.settings = settings if settings\n        @object.interpreter = interpreter\n        \n        GameManager.variableStore.setupTempVariables(interpreter.context)\n        @setupParameters(parameters, parentContext)\n            \n        if @object.record.parallel\n            interpreter.onFinish = (sender) => \n                @object.removeComponent(sender)\n                if not @object.record.singleInstance\n                    @callDepth--\n            interpreter.start()\n            @object.addComponent(interpreter)\n            \n            return null\n        else\n            interpreter.onFinish = (sender) => \n                @object.events.emit(\"finish\", this)\n            return interpreter\n       \n    ###*\n    * Stops the common-event interpreter.\n    *\n    * @method stop\n    ###      \n    stop: ->\n        if @object.interpreter?\n            @object.interpreter.stop()\n            @object.events?.emit(\"finish\", this)\n    \n    ###*\n    * Resumes a paused common-event interpreter.\n    *\n    * @method resume\n    ###           \n    resume: ->\n        if @object.interpreter?\n            @object.interpreter.resume()\n            @object.events?.emit(\"start\", this)\n            @object.events?.emit(\"resume\", this)\n    \n    \n    ###*\n    * Restarts the common event. If the common event has a condition then the restart\n    * will only happen if that condition is true.\n    *\n    * @method restart\n    ###  \n    restart: ->\n            if @object.record.conditionEnabled\n                if GameManager.variableStore.booleanValueOf(@object.record.conditionSwitch)\n                    @start()\n            else\n                @start()\n    \n    ###*\n    * Restarts the common event if it is parallel and the conditions are met.\n    *\n    * @method restartIfNecessary\n    ###   \n    restartIfNecessary: ->\n        if @object.interpreter? and @object.record.startCondition == 1 and not @object.interpreter.isRunning\n            @restart()\n            \n    ###*\n    * Updates the common-event interpreter.\n    *\n    * @method update\n    ###   \n    update: ->\n        if not @initialized\n            @setup()\n            \n        if @object.interpreter? and @readyToStart\n            @readyToStart = no\n            @setupParameters(@startParameters)\n            @object.interpreter.start()\n            \n        @restartIfNecessary()\n                \n    ###*\n    * Not implemented yet.\n    *\n    * @method erase\n    ### \n    erase: ->\n        \ngs.Component_CommonEventBehavior = Component_CommonEventBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_CommonEventBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_CommonEventBehavior = (function(superClass) {\n    extend(Component_CommonEventBehavior, superClass);\n\n\n    /**\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n     */\n\n    Component_CommonEventBehavior.prototype.onDataBundleRestore = function(data, context) {\n      var ref;\n      if (this.object.rid != null) {\n        this.object.record = RecordManager.commonEvents[this.object.rid];\n        if ((ref = this.object.interpreter) != null) {\n          ref.object = this;\n        }\n        this.object.commands = this.object.record.commands;\n      }\n      return this.setupEventHandlers();\n    };\n\n\n    /**\n    * A component which allows a game object to execute common-events.\n    *\n    * @module gs\n    * @class Component_CommonEventBehavior\n    * @extends gs.Component\n    * @memberof gs\n     */\n\n    function Component_CommonEventBehavior() {\n      Component_CommonEventBehavior.__super__.constructor.call(this);\n\n      /**\n      * @property readyToStart\n      * @type boolean\n      * @private\n       */\n      this.readyToStart = false;\n\n      /**\n      * @property initialized\n      * @type boolean\n      * @private\n       */\n      this.initialized = false;\n      this.callDepth = 0;\n    }\n\n\n    /**\n    * Serializes the component into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Component_CommonEventBehavior.prototype.toDataBundle = function() {\n      return {\n        initialized: this.initialized,\n        readyToStart: this.readyToStart\n      };\n    };\n\n\n    /**\n    * Restores the component from a data-bundle\n    *\n    * @method restore\n    * @param {Object} bundle- The data-bundle.\n     */\n\n    Component_CommonEventBehavior.prototype.restore = function(data) {\n      this.setup();\n      this.readyToStart = data.readyToStart;\n      return this.initialized = data.initialized;\n    };\n\n\n    /**\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n     */\n\n    Component_CommonEventBehavior.prototype.setupEventHandlers = function() {\n      if (!this.object.interpreter) {\n        return;\n      }\n      if (this.object.record.startCondition === 1) {\n        return this.object.interpreter.onFinish = (function(_this) {\n          return function() {\n            var ref;\n            if (!_this.object.record.parallel) {\n              return (ref = _this.object.events) != null ? ref.emit(\"finish\", _this) : void 0;\n            }\n          };\n        })(this);\n      } else {\n        if (this.object.record.parallel) {\n          return this.object.interpreter.onFinish = (function(_this) {\n            return function(sender) {\n              return _this.object.removeComponent(sender);\n            };\n          })(this);\n        } else {\n          return this.object.interpreter.onFinish = (function(_this) {\n            return function(sender) {\n              return _this.object.events.emit(\"finish\", _this);\n            };\n          })(this);\n        }\n      }\n    };\n\n\n    /**\n    * Initializes the common-event.\n    *\n    * @method setup\n     */\n\n    Component_CommonEventBehavior.prototype.setup = function() {\n      GameManager.variableStore.setupLocalVariables(this.object.record);\n      this.object.record.parameters = this.object.record.parameters != null ? this.object.record.parameters : [];\n      this.object.record.startCondition = this.object.record.startCondition != null ? this.object.record.startCondition : 0;\n      this.object.record.parallel = this.object.record.parallel != null ? this.object.record.parallel : false;\n      this.object.record.conditionSwitch = this.object.record.conditionSwitch != null ? this.object.record.conditionSwitch : null;\n      this.object.record.conditionEnabled = this.object.record.conditionEnabled;\n      if (this.object.record.startCondition === 1) {\n        this.object.interpreter = new gs.Component_CommandInterpreter();\n        this.object.interpreter.onFinish = (function(_this) {\n          return function() {\n            var ref;\n            if (!_this.object.record.parallel) {\n              return (ref = _this.object.events) != null ? ref.emit(\"finish\", _this) : void 0;\n            } else {\n              return _this.restart();\n            }\n          };\n        })(this);\n        this.object.interpreter.context.set(this.object.record.index, this.object.record);\n        this.object.addComponent(this.object.interpreter);\n      }\n      return this.initialized = true;\n    };\n\n\n    /**\n    * Starts the common-event interpreter with the specified parameters.\n    * \n    * @method start\n    * @param {Object} parameters The common-event's parameters which can be configured in database.\n     */\n\n    Component_CommonEventBehavior.prototype.start = function(parameters) {\n      var ref, ref1;\n      this.startParameters = parameters;\n      if ((this.object.interpreter != null) && !this.object.interpreter.isRunning) {\n        this.object.commands = this.object.record.commands;\n        this.readyToStart = true;\n        if ((ref = this.object.events) != null) {\n          ref.emit(\"start\", this);\n        }\n      }\n      if (this.object.record.startCondition === 0 && this.object.record.parallel) {\n        return (ref1 = this.object.events) != null ? ref1.emit(\"finish\", this) : void 0;\n      }\n    };\n\n\n    /**\n    * Initializes variable-store with the start-up parameters configured for the\n    * common-event in Database.\n    *\n    * @method setupParameters\n     */\n\n    Component_CommonEventBehavior.prototype.setupParameters = function(parameters, parentContext) {\n      var i, j, parameter, ref, results, value;\n      if ((parameters != null) && (parameters.values != null)) {\n        results = [];\n        for (i = j = 0, ref = parameters.values.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n          value = parameters.values[i];\n          parameter = this.object.record.parameters[i];\n          if ((parameter != null) && (value != null)) {\n            GameManager.variableStore.setupTempVariables(parentContext);\n            switch (parameter.type) {\n              case 1:\n                value = GameManager.variableStore.numberValueOf(value);\n                GameManager.variableStore.setupTempVariables(this.object.interpreter.context);\n                results.push(GameManager.variableStore.setNumberValueTo(parameter.numberVariable, value));\n                break;\n              case 2:\n                value = GameManager.variableStore.booleanValueOf(value);\n                GameManager.variableStore.setupTempVariables(this.object.interpreter.context);\n                results.push(GameManager.variableStore.setBooleanValueTo(parameter.booleanVariable, value));\n                break;\n              case 3:\n                value = GameManager.variableStore.stringValueOf(value);\n                GameManager.variableStore.setupTempVariables(this.object.interpreter.context);\n                results.push(GameManager.variableStore.setStringValueTo(parameter.stringVariable, value));\n                break;\n              default:\n                results.push(void 0);\n            }\n          } else {\n            results.push(void 0);\n          }\n        }\n        return results;\n      }\n    };\n\n\n    /**\n    * Calls the common-event with the specified parameters.\n    *\n    * @method call\n    * @param {Object} parameters The common-event's parameters which can be configured in database.\n     */\n\n    Component_CommonEventBehavior.prototype.call = function(parameters, settings, parentContext) {\n      var interpreter;\n      if (!this.object.record.singleInstance) {\n        interpreter = new gs.Component_CommandInterpreter();\n        interpreter.context.set(this.object.record.index + \"_\" + this.callDepth, this.object.record);\n        GameManager.variableStore.clearTempVariables(interpreter.context);\n        this.object.commands = this.object.record.commands;\n        this.callDepth++;\n      } else {\n        interpreter = this.object.interpreter || new gs.Component_CommandInterpreter();\n        interpreter.context.set(this.object.record.index, this.object.record);\n        this.object.commands = this.object.record.commands;\n      }\n      interpreter.repeat = false;\n      interpreter.object = this.object;\n      if (settings) {\n        interpreter.settings = settings;\n      }\n      this.object.interpreter = interpreter;\n      GameManager.variableStore.setupTempVariables(interpreter.context);\n      this.setupParameters(parameters, parentContext);\n      if (this.object.record.parallel) {\n        interpreter.onFinish = (function(_this) {\n          return function(sender) {\n            _this.object.removeComponent(sender);\n            if (!_this.object.record.singleInstance) {\n              return _this.callDepth--;\n            }\n          };\n        })(this);\n        interpreter.start();\n        this.object.addComponent(interpreter);\n        return null;\n      } else {\n        interpreter.onFinish = (function(_this) {\n          return function(sender) {\n            return _this.object.events.emit(\"finish\", _this);\n          };\n        })(this);\n        return interpreter;\n      }\n    };\n\n\n    /**\n    * Stops the common-event interpreter.\n    *\n    * @method stop\n     */\n\n    Component_CommonEventBehavior.prototype.stop = function() {\n      var ref;\n      if (this.object.interpreter != null) {\n        this.object.interpreter.stop();\n        return (ref = this.object.events) != null ? ref.emit(\"finish\", this) : void 0;\n      }\n    };\n\n\n    /**\n    * Resumes a paused common-event interpreter.\n    *\n    * @method resume\n     */\n\n    Component_CommonEventBehavior.prototype.resume = function() {\n      var ref, ref1;\n      if (this.object.interpreter != null) {\n        this.object.interpreter.resume();\n        if ((ref = this.object.events) != null) {\n          ref.emit(\"start\", this);\n        }\n        return (ref1 = this.object.events) != null ? ref1.emit(\"resume\", this) : void 0;\n      }\n    };\n\n\n    /**\n    * Restarts the common event. If the common event has a condition then the restart\n    * will only happen if that condition is true.\n    *\n    * @method restart\n     */\n\n    Component_CommonEventBehavior.prototype.restart = function() {\n      if (this.object.record.conditionEnabled) {\n        if (GameManager.variableStore.booleanValueOf(this.object.record.conditionSwitch)) {\n          return this.start();\n        }\n      } else {\n        return this.start();\n      }\n    };\n\n\n    /**\n    * Restarts the common event if it is parallel and the conditions are met.\n    *\n    * @method restartIfNecessary\n     */\n\n    Component_CommonEventBehavior.prototype.restartIfNecessary = function() {\n      if ((this.object.interpreter != null) && this.object.record.startCondition === 1 && !this.object.interpreter.isRunning) {\n        return this.restart();\n      }\n    };\n\n\n    /**\n    * Updates the common-event interpreter.\n    *\n    * @method update\n     */\n\n    Component_CommonEventBehavior.prototype.update = function() {\n      if (!this.initialized) {\n        this.setup();\n      }\n      if ((this.object.interpreter != null) && this.readyToStart) {\n        this.readyToStart = false;\n        this.setupParameters(this.startParameters);\n        this.object.interpreter.start();\n      }\n      return this.restartIfNecessary();\n    };\n\n\n    /**\n    * Not implemented yet.\n    *\n    * @method erase\n     */\n\n    Component_CommonEventBehavior.prototype.erase = function() {};\n\n    return Component_CommonEventBehavior;\n\n  })(gs.Component);\n\n  gs.Component_CommonEventBehavior = Component_CommonEventBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}