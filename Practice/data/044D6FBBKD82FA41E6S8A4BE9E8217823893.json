{
    "uid": "044D6FBBKD82FA41E6S8A4BE9E8217823893",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Live2DCharacter",
        "type": "game_script",
        "order": 5,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Live2DCharacter\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Live2DCharacter extends gs.Object_Visual\n    @objectCodecBlackList = [\"parent\"]\n    \n    ###*\n    * A game object for an animated Live2D visual novel character. \n    *\n    * @module gs\n    * @class Object_Live2DCharacter\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (record, data) ->\n        super(data)\n        @zIndex = 200\n        \n        ###*\n        * The ID of the character-record used.\n        * @property rid\n        * @type number\n        ###\n        @rid = data?.id || (record?.index ? -1)\n        \n        ###*\n        * The rotation-angle of the character in degrees. The rotation center depends on the\n        * anchor-point.\n        * @property angle\n        * @type number\n        ###\n        @angle = 0\n        \n        ###*\n        * The color tone of the object used for the visual presentation.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = new Tone(0, 0, 0, 0)\n        \n        ###*\n        * The color of the object used for the visual presentation.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = new Color(255, 255, 255, 0)\n        \n        ###*\n        * The Live2D model used for the visual presentation.\n        * @property model\n        * @type gs.Live2DModel\n        ###\n        @model = if data? then ResourceManager.getLive2DModel(\"Live2D/#{data.modelName}\") else null\n        \n        ###*\n        * The resource name of a Live2D model used for the visual presentation.\n        * @property modelName\n        * @type string\n        ###\n        @modelName = data?.modelName\n        \n        ###*\n        * The Live2D motion.\n        * @property motion\n        * @type gs.Live2DMotion\n        ###\n        @motion = data?.motion || name: \"\", loop: yes\n        \n        ###*\n        * The Live2D motion group.\n        * @property motion\n        * @type gs.Live2DMotionGroup\n        ###\n        @motionGroup = data?.motionGroup\n        \n        ###*\n        * The Live2D expression.\n        * @property expression\n        * @type gs.Live2DExpression\n        ###\n        @expression = data?.expression || name: \"\" #RecordManager.characterExpressions[data?.expressionId || 0]\n        \n        ###*\n        * The character's behavior component which contains the character-specific logic.\n        * @property behavior\n        * @type vn.Component_CharacterBehavior\n        ###\n        @behavior = new vn.Component_CharacterBehavior()\n        @logic = @behavior\n        \n        ###*\n        * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type vn.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Sprite\n        ###\n        @visual = new gs.Component_Live2D()\n        @visual.modelFolder = \"Live2D\"\n        \n        @addComponent(@logic)\n        @addComponent(@animator)\n        @addComponent(@visual)\n      \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###    \n    toDataBundle: -> \n        rid: @rid, \n        x: @dstRect.x, \n        y: @dstRect.y, \n        opacity: @opacity,\n        offset: @offset,\n        zoom: @zoom,\n        origin: @origin,\n        mirror: @mirror, \n        expression: @expression, \n        modelName: @modelName,\n        motion: @motion,\n        motionGroup: @motionGroup,\n        expression: @expression\n        \n        \n\nvn.Object_Live2DCharacter = Object_Live2DCharacter",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Live2DCharacter,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Live2DCharacter = (function(superClass) {\n    extend(Object_Live2DCharacter, superClass);\n\n    Object_Live2DCharacter.objectCodecBlackList = [\"parent\"];\n\n\n    /**\n    * A game object for an animated Live2D visual novel character. \n    *\n    * @module gs\n    * @class Object_Live2DCharacter\n    * @extends gs.Object_Visual\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_Live2DCharacter(record, data) {\n      var ref;\n      Object_Live2DCharacter.__super__.constructor.call(this, data);\n      this.zIndex = 200;\n\n      /**\n      * The ID of the character-record used.\n      * @property rid\n      * @type number\n       */\n      this.rid = (data != null ? data.id : void 0) || ((ref = record != null ? record.index : void 0) != null ? ref : -1);\n\n      /**\n      * The rotation-angle of the character in degrees. The rotation center depends on the\n      * anchor-point.\n      * @property angle\n      * @type number\n       */\n      this.angle = 0;\n\n      /**\n      * The color tone of the object used for the visual presentation.\n      * @property tone\n      * @type gs.Tone\n       */\n      this.tone = new Tone(0, 0, 0, 0);\n\n      /**\n      * The color of the object used for the visual presentation.\n      * @property color\n      * @type gs.Color\n       */\n      this.color = new Color(255, 255, 255, 0);\n\n      /**\n      * The Live2D model used for the visual presentation.\n      * @property model\n      * @type gs.Live2DModel\n       */\n      this.model = data != null ? ResourceManager.getLive2DModel(\"Live2D/\" + data.modelName) : null;\n\n      /**\n      * The resource name of a Live2D model used for the visual presentation.\n      * @property modelName\n      * @type string\n       */\n      this.modelName = data != null ? data.modelName : void 0;\n\n      /**\n      * The Live2D motion.\n      * @property motion\n      * @type gs.Live2DMotion\n       */\n      this.motion = (data != null ? data.motion : void 0) || {\n        name: \"\",\n        loop: true\n\n        /**\n        * The Live2D motion group.\n        * @property motion\n        * @type gs.Live2DMotionGroup\n         */\n      };\n      this.motionGroup = data != null ? data.motionGroup : void 0;\n\n      /**\n      * The Live2D expression.\n      * @property expression\n      * @type gs.Live2DExpression\n       */\n      this.expression = (data != null ? data.expression : void 0) || {\n        name: \"\"\n\n        /**\n        * The character's behavior component which contains the character-specific logic.\n        * @property behavior\n        * @type vn.Component_CharacterBehavior\n         */\n      };\n      this.behavior = new vn.Component_CharacterBehavior();\n      this.logic = this.behavior;\n\n      /**\n      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type vn.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Sprite\n       */\n      this.visual = new gs.Component_Live2D();\n      this.visual.modelFolder = \"Live2D\";\n      this.addComponent(this.logic);\n      this.addComponent(this.animator);\n      this.addComponent(this.visual);\n    }\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Live2DCharacter.prototype.toDataBundle = function() {\n      return {\n        rid: this.rid,\n        x: this.dstRect.x,\n        y: this.dstRect.y,\n        opacity: this.opacity,\n        offset: this.offset,\n        zoom: this.zoom,\n        origin: this.origin,\n        mirror: this.mirror,\n        expression: this.expression,\n        modelName: this.modelName,\n        motion: this.motion,\n        motionGroup: this.motionGroup,\n        expression: this.expression\n      };\n    };\n\n    return Object_Live2DCharacter;\n\n  })(gs.Object_Visual);\n\n  vn.Object_Live2DCharacter = Object_Live2DCharacter;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}