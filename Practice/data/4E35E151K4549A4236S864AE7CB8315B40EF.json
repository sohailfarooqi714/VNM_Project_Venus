{
    "uid": "4E35E151K4549A4236S864AE7CB8315B40EF",
    "isLoaded": true,
    "lastModificationTime": 1422817562378,
    "items": {
        "name": "RecordManager",
        "type": "game_script",
        "order": 7,
        "parentId": "C0268943K60B3A42B7SA6F1EDDCF2F642FD7",
        "content": "# ===================================================================\n#\n#   Script: RecordManager\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass RecordManager\n    ###*\n    * Manages the game's database and gives access to all data-records.\n    *\n    * @module gs\n    * @class RecordManager\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * Stores all data-record documents\n        * @property documents\n        * @type gs.Document[]\n        ### \n        @documents = null\n        \n        ###*\n        * Stores all data-record documents by category > id.\n        * @property collectionDocuments\n        * @type gs.Document[][]\n        ### \n        @collectionDocuments = []\n        \n        ###*\n        * Localizable strings of all data-record documents.\n        * @property localizableStrings\n        * @type Object\n        ### \n        @localizableStrings = {}\n        \n        ###*\n        * Indicates if all data-records are already translated.\n        * @property translated\n        * @type boolean\n        ### \n        @translated = no\n        \n        ###*\n        * Indicates if all data-records are loaded and initialized.\n        * @property initialized\n        * @type boolean\n        ### \n        @initialized = no\n        \n    ###*\n    * Loads all data-record documents.\n    *\n    * @method load\n    ###  \n    load: ->\n        @documents = DataManager.getDocumentsByType(\"data_record\")\n\n    ###*\n    * Initializes RecordManager and all loaded data-record documents for use. Needs to be\n    * called before RecordManager can be used.\n    *\n    * @method initialize\n    ###  \n    initialize: ->\n        iconSets = []\n        for document in @documents\n            if not this[document.items.category]?\n                this[document.items.category] = []\n                this[document.items.category + \"Collection\"] = []\n                this[document.items.category + \"Array\"] = []\n                @collectionDocuments.push(this[document.items.category + \"Collection\"])\n            if document.items.id?\n                this[document.items.category][document.items.id] = document.items.data\n                this[document.items.category].push(document.items.data)\n                this[document.items.category + \"Collection\"][document.items.id] = document\n                this[document.items.category + \"Collection\"].push(document)\n                this[document.items.category + \"Array\"].push(document.items.data)\n                document.items.data.index = document.items.id\n            if document.items.data? and document.items.data.icon?\n                if iconSets.indexOf(document.items.data.icon.name) == -1\n                    iconSets.push(document.items.data.icon.name)\n                    \n            if document.items.localizableStrings?\n                Object.mixin(@localizableStrings, document.items.localizableStrings)\n            \n        @system = @system[0]\n        @system.iconSets = iconSets\n        \n        if @system.colors\n            for color, i in @system.colors\n                @system.colors[i] = new Color(color)\n        \n        for objectPosition in @system.objectPositions\n            if !objectPosition then continue\n            objectPosition.func = eval(\"(function(object, params){\" + objectPosition.script + \"})\")\n            \n        @initialized = yes\n    \n    ###*\n    * Translates all localizable fields for each data-record.\n    *\n    * @method translate\n    ###      \n    translate: ->\n        if not @translated\n            @translated = yes\n            for document in @documents\n                if document.items.data.name? and document.items.data.name.lcId?\n                    document.items.data.name = lcs(document.items.data.name)\n                if document.items.data.description? and document.items.data.description.lcId?\n                    document.items.data.description = lcs(document.items.data.description)\n                if document.items.data.removeMessage? and document.items.data.removeMessage.lcId?\n                    document.items.data.removeMessage = lcs(document.items.data.removeMessage)\n                if document.items.data.usingMessage? and document.items.data.usingMessage.lcId?\n                    document.items.data.usingMessage = lcs(document.items.data.usingMessage)\n      \n\nwindow.RecordManager = new RecordManager()",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var RecordManager;\n\n  RecordManager = (function() {\n\n    /**\n    * Manages the game's database and gives access to all data-records.\n    *\n    * @module gs\n    * @class RecordManager\n    * @memberof gs\n    * @constructor\n     */\n    function RecordManager() {\n\n      /**\n      * Stores all data-record documents\n      * @property documents\n      * @type gs.Document[]\n       */\n      this.documents = null;\n\n      /**\n      * Stores all data-record documents by category > id.\n      * @property collectionDocuments\n      * @type gs.Document[][]\n       */\n      this.collectionDocuments = [];\n\n      /**\n      * Localizable strings of all data-record documents.\n      * @property localizableStrings\n      * @type Object\n       */\n      this.localizableStrings = {};\n\n      /**\n      * Indicates if all data-records are already translated.\n      * @property translated\n      * @type boolean\n       */\n      this.translated = false;\n\n      /**\n      * Indicates if all data-records are loaded and initialized.\n      * @property initialized\n      * @type boolean\n       */\n      this.initialized = false;\n    }\n\n\n    /**\n    * Loads all data-record documents.\n    *\n    * @method load\n     */\n\n    RecordManager.prototype.load = function() {\n      return this.documents = DataManager.getDocumentsByType(\"data_record\");\n    };\n\n\n    /**\n    * Initializes RecordManager and all loaded data-record documents for use. Needs to be\n    * called before RecordManager can be used.\n    *\n    * @method initialize\n     */\n\n    RecordManager.prototype.initialize = function() {\n      var color, document, i, iconSets, j, k, l, len, len1, len2, objectPosition, ref, ref1, ref2;\n      iconSets = [];\n      ref = this.documents;\n      for (j = 0, len = ref.length; j < len; j++) {\n        document = ref[j];\n        if (this[document.items.category] == null) {\n          this[document.items.category] = [];\n          this[document.items.category + \"Collection\"] = [];\n          this[document.items.category + \"Array\"] = [];\n          this.collectionDocuments.push(this[document.items.category + \"Collection\"]);\n        }\n        if (document.items.id != null) {\n          this[document.items.category][document.items.id] = document.items.data;\n          this[document.items.category].push(document.items.data);\n          this[document.items.category + \"Collection\"][document.items.id] = document;\n          this[document.items.category + \"Collection\"].push(document);\n          this[document.items.category + \"Array\"].push(document.items.data);\n          document.items.data.index = document.items.id;\n        }\n        if ((document.items.data != null) && (document.items.data.icon != null)) {\n          if (iconSets.indexOf(document.items.data.icon.name) === -1) {\n            iconSets.push(document.items.data.icon.name);\n          }\n        }\n        if (document.items.localizableStrings != null) {\n          Object.mixin(this.localizableStrings, document.items.localizableStrings);\n        }\n      }\n      this.system = this.system[0];\n      this.system.iconSets = iconSets;\n      if (this.system.colors) {\n        ref1 = this.system.colors;\n        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {\n          color = ref1[i];\n          this.system.colors[i] = new Color(color);\n        }\n      }\n      ref2 = this.system.objectPositions;\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        objectPosition = ref2[l];\n        if (!objectPosition) {\n          continue;\n        }\n        objectPosition.func = eval(\"(function(object, params){\" + objectPosition.script + \"})\");\n      }\n      return this.initialized = true;\n    };\n\n\n    /**\n    * Translates all localizable fields for each data-record.\n    *\n    * @method translate\n     */\n\n    RecordManager.prototype.translate = function() {\n      var document, j, len, ref, results;\n      if (!this.translated) {\n        this.translated = true;\n        ref = this.documents;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          document = ref[j];\n          if ((document.items.data.name != null) && (document.items.data.name.lcId != null)) {\n            document.items.data.name = lcs(document.items.data.name);\n          }\n          if ((document.items.data.description != null) && (document.items.data.description.lcId != null)) {\n            document.items.data.description = lcs(document.items.data.description);\n          }\n          if ((document.items.data.removeMessage != null) && (document.items.data.removeMessage.lcId != null)) {\n            document.items.data.removeMessage = lcs(document.items.data.removeMessage);\n          }\n          if ((document.items.data.usingMessage != null) && (document.items.data.usingMessage.lcId != null)) {\n            results.push(document.items.data.usingMessage = lcs(document.items.data.usingMessage));\n          } else {\n            results.push(void 0);\n          }\n        }\n        return results;\n      }\n    };\n\n    return RecordManager;\n\n  })();\n\n  window.RecordManager = new RecordManager();\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}