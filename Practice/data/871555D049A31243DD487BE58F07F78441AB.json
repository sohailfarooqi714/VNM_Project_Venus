{
    "uid": "871555D049A31243DD487BE58F07F78441AB",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_WebStartBehavior",
        "type": "game_script",
        "order": 3,
        "parentId": "0C1D8BE8KDB63A469AS9782EB90E63254DB3",
        "folder": false,
        "scriptType": 0,
        "content": "# ===================================================================\n#\n#   Script: Component_WebStartBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_WebStartBehavior extends gs.Component_LayoutSceneBehavior\n    ###*\n    * The web-start scene is used if the game has been loaded via mobile webbrowser. That web-start\n    * scene lets the player tap on the screen to start the actual game which is necessary to make\n    * audio-playback working because of browser-security.\n    *\n    * @module gs\n    * @class Component_WebStartBehavior \n    * @extends gs.Component_LayoutSceneBehavior\n    * @memberof gs\n    ###\n    constructor: ->\n        super\n    \n    ###*\n    * Initializes the web-start scene. It just creates a full-screen\n    * DIV layer with a touch event-handler to play a sound if tapped and then switch\n    * to the language-menu / intro-scene to start the actual game.\n    *\n    * @method initialize\n    ### \n    initialize: ->\n        super\n        window.music = new Audio()\n        window.music.src = gs.Application.getPlatformSpecificAudioFilePath(\"Audio/Sounds/choice_confirm_01\")\n        @sound = ResourceManager.getAudioBuffer(\"Audio/Sounds/choice_confirm_01\")\n        @button = jQuery(\"<div></div>\")\n        @button.css(\"position\", \"absolute\")\n        @button.css(\"left\", \"0px\")\n        @button.css(\"top\", \"0px\")\n        @button.width(Graphics.width)\n        @button.height(Graphics.height)\n        @button.css(\"background-color\", \"transparent\")\n        @button.css(\"z-order\", 999999)\n        @button.click (e) =>\n            @sound.play()    \n            window.music.play()\n            @button.remove()\n            @button = null\n            setTimeout ->\n                SceneManager.switchTo(new gs.Object_Layout(\"languageMenuLayout\"))\n            ,\n            450\n            \n        @button[0].addEventListener \"touchstart\", (e) =>\n            @sound.play()    \n            window.music.play()\n            \n            @button.remove()\n            @button = null\n            SceneManager.switchTo(new gs.Object_Layout(\"languageMenuLayout\"))\n            setTimeout ->\n                window.music.pause()\n                window.music = null\n                SceneManager.switchTo(new gs.Object_Layout(\"languageMenuLayout\"))\n            ,\n            450\n                \n                \n        jQuery(document.body).append(@button)\n        \n    ###*\n    * Prepares all visual game objects for the scene.\n    *\n    * @method prepareVisual\n    ### \n    prepareVisual: ->\n        super\n      \n    ###*\n    * Prepares all data for the scene and loads the necessary graphic and audio resources.\n    *\n    * @method prepareData\n    ###   \n    prepareData: ->\n        super\n        \n    ###*\n    * Update the scene's content. Here you can implement any kind of additional logic\n    * you want.\n    *\n    * @method updateContent\n    ### \n    updateContent: ->\n        super\n        \ngs.Component_WebStartBehavior = Component_WebStartBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_WebStartBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_WebStartBehavior = (function(superClass) {\n    extend(Component_WebStartBehavior, superClass);\n\n\n    /**\n    * The web-start scene is used if the game has been loaded via mobile webbrowser. That web-start\n    * scene lets the player tap on the screen to start the actual game which is necessary to make\n    * audio-playback working because of browser-security.\n    *\n    * @module gs\n    * @class Component_WebStartBehavior \n    * @extends gs.Component_LayoutSceneBehavior\n    * @memberof gs\n     */\n\n    function Component_WebStartBehavior() {\n      Component_WebStartBehavior.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /**\n    * Initializes the web-start scene. It just creates a full-screen\n    * DIV layer with a touch event-handler to play a sound if tapped and then switch\n    * to the language-menu / intro-scene to start the actual game.\n    *\n    * @method initialize\n     */\n\n    Component_WebStartBehavior.prototype.initialize = function() {\n      Component_WebStartBehavior.__super__.initialize.apply(this, arguments);\n      window.music = new Audio();\n      window.music.src = gs.Application.getPlatformSpecificAudioFilePath(\"Audio/Sounds/choice_confirm_01\");\n      this.sound = ResourceManager.getAudioBuffer(\"Audio/Sounds/choice_confirm_01\");\n      this.button = jQuery(\"<div></div>\");\n      this.button.css(\"position\", \"absolute\");\n      this.button.css(\"left\", \"0px\");\n      this.button.css(\"top\", \"0px\");\n      this.button.width(Graphics.width);\n      this.button.height(Graphics.height);\n      this.button.css(\"background-color\", \"transparent\");\n      this.button.css(\"z-order\", 999999);\n      this.button.click((function(_this) {\n        return function(e) {\n          _this.sound.play();\n          window.music.play();\n          _this.button.remove();\n          _this.button = null;\n          return setTimeout(function() {\n            return SceneManager.switchTo(new gs.Object_Layout(\"languageMenuLayout\"));\n          }, 450);\n        };\n      })(this));\n      this.button[0].addEventListener(\"touchstart\", (function(_this) {\n        return function(e) {\n          _this.sound.play();\n          window.music.play();\n          _this.button.remove();\n          _this.button = null;\n          SceneManager.switchTo(new gs.Object_Layout(\"languageMenuLayout\"));\n          return setTimeout(function() {\n            window.music.pause();\n            window.music = null;\n            return SceneManager.switchTo(new gs.Object_Layout(\"languageMenuLayout\"));\n          }, 450);\n        };\n      })(this));\n      return jQuery(document.body).append(this.button);\n    };\n\n\n    /**\n    * Prepares all visual game objects for the scene.\n    *\n    * @method prepareVisual\n     */\n\n    Component_WebStartBehavior.prototype.prepareVisual = function() {\n      return Component_WebStartBehavior.__super__.prepareVisual.apply(this, arguments);\n    };\n\n\n    /**\n    * Prepares all data for the scene and loads the necessary graphic and audio resources.\n    *\n    * @method prepareData\n     */\n\n    Component_WebStartBehavior.prototype.prepareData = function() {\n      return Component_WebStartBehavior.__super__.prepareData.apply(this, arguments);\n    };\n\n\n    /**\n    * Update the scene's content. Here you can implement any kind of additional logic\n    * you want.\n    *\n    * @method updateContent\n     */\n\n    Component_WebStartBehavior.prototype.updateContent = function() {\n      return Component_WebStartBehavior.__super__.updateContent.apply(this, arguments);\n    };\n\n    return Component_WebStartBehavior;\n\n  })(gs.Component_LayoutSceneBehavior);\n\n  gs.Component_WebStartBehavior = Component_WebStartBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}