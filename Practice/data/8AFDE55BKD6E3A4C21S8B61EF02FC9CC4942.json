{
    "uid": "8AFDE55BKD6E3A4C21S8B61EF02FC9CC4942",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Layout",
        "type": "game_script",
        "order": 14,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Layout\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Layout extends gs.Object_Base\n    ###*\n    * A layout object defines a new UI layout game scene. A UI layout scene\n    * displays in-game UI and let the user interact with it. For example: The\n    * title screen, the game menu, etc. \n    *\n    * @module gs\n    * @class Object_Layout\n    * @extends gs.Object_Base\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (layoutName) ->\n        super()\n        #super(null, null, gs.SceneManager)\n        \n        ###*\n        * Indicates that the UI layout is still in prepare-state and not ready.\n        * @property preparing\n        * @type boolean\n        ###\n        @preparing = yes\n        \n        ###*\n        * The layout descriptor.\n        * @property layoutData\n        * @type Object\n        ###\n        @layoutName = layoutName\n        @layoutData = ui.UiFactory.layouts[layoutName]\n        \n        ###*\n        * The behavior-component for the UI layour specific behavior.\n        * @property behavior\n        * @type gs.Component_LayoutSceneBehavior\n        ###\n        if @layoutData?.component\n            @behavior = new window[@layoutData.component.ns || \"gs\"][@layoutData.component.className]\n        else\n            @behavior = new gs.Component_LayoutSceneBehavior()\n        \n        ###*\n        * Indicates if the UI layout is visible.\n        * @property visible\n        * @type boolean\n        ###\n        @visible = yes\n \n        ###*\n        * An event-emitter to emit events.\n        * @property events\n        * @type gs.Component_EventEmitter\n        ###\n        @events = new gs.Component_EventEmitter()\n        \n        @addComponent(new gs.Component_InputHandler())\n        @addComponent(@behavior)\n        \n        \n        \ngs.Object_Layout = Object_Layout",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Layout,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Layout = (function(superClass) {\n    extend(Object_Layout, superClass);\n\n\n    /**\n    * A layout object defines a new UI layout game scene. A UI layout scene\n    * displays in-game UI and let the user interact with it. For example: The\n    * title screen, the game menu, etc. \n    *\n    * @module gs\n    * @class Object_Layout\n    * @extends gs.Object_Base\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_Layout(layoutName) {\n      var ref;\n      Object_Layout.__super__.constructor.call(this);\n\n      /**\n      * Indicates that the UI layout is still in prepare-state and not ready.\n      * @property preparing\n      * @type boolean\n       */\n      this.preparing = true;\n\n      /**\n      * The layout descriptor.\n      * @property layoutData\n      * @type Object\n       */\n      this.layoutName = layoutName;\n      this.layoutData = ui.UiFactory.layouts[layoutName];\n\n      /**\n      * The behavior-component for the UI layour specific behavior.\n      * @property behavior\n      * @type gs.Component_LayoutSceneBehavior\n       */\n      if ((ref = this.layoutData) != null ? ref.component : void 0) {\n        this.behavior = new window[this.layoutData.component.ns || \"gs\"][this.layoutData.component.className];\n      } else {\n        this.behavior = new gs.Component_LayoutSceneBehavior();\n      }\n\n      /**\n      * Indicates if the UI layout is visible.\n      * @property visible\n      * @type boolean\n       */\n      this.visible = true;\n\n      /**\n      * An event-emitter to emit events.\n      * @property events\n      * @type gs.Component_EventEmitter\n       */\n      this.events = new gs.Component_EventEmitter();\n      this.addComponent(new gs.Component_InputHandler());\n      this.addComponent(this.behavior);\n    }\n\n    return Object_Layout;\n\n  })(gs.Object_Base);\n\n  gs.Object_Layout = Object_Layout;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}