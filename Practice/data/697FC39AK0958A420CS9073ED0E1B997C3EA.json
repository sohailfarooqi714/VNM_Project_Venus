{
    "uid": "697FC39AK0958A420CS9073ED0E1B997C3EA",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Hotspot",
        "type": "game_script",
        "order": 2,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Hotspot\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Hotspot extends ui.Object_UIElement\n    Object.defineProperty(Object_Hotspot.prototype, \"selected\",\n        set: (v) -> @behavior.selected = v\n        get: -> @behavior.selected\n    )\n    \n    ###*\n    * A hotspot object to define an area on the screen which can respond\n    * to user-actions like mouse/touch actions. A hotspot can have multiple\n    * images for different states like hovered, selected, etc.\n    *\n    * @module ui\n    * @class Object_Hotspot\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n    ### \n    constructor: (imageName, imageHandling, flipX) ->\n        super\n        \n        ###*\n        * The UI object's source rectangle on screen.\n        * @property srcRect\n        * @type gs.Rect\n        ###\n        @srcRect = null\n        \n        ###*\n        * The UI object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Frame\n        ###\n        @visual = new gs.Component_Sprite()\n        \n        ###*\n        * The object's image-handling.\n        * @property imageHandling\n        * @type gs.ImageHandling\n        ###\n        @imageHandling = imageHandling ? 1\n        \n        ###*\n        * A behavior-component to hotspot-specific behavior to the object.\n        * @property behavior\n        * @type gs.Component_HotspotBehavior\n        ###\n        @behavior = new gs.Component_HotspotBehavior()\n        @behavior.imageHandling = @imageHandling\n        \n        ###*\n        * The UI object's bitmap used for visual presentation.\n        * @property bitmap\n        * @type gs.Bitmap\n        ###\n        @bitmap = ResourceManager.getBitmap(\"Graphics/Pictures/#{imageName}\")\n        \n        if @bitmap?\n            if @imageHandling == 1\n                @srcRect = new Rect(0, @bitmap.height / 2, @bitmap.width, @bitmap.height / 2)\n            else\n                @srcRect = new Rect(0, 0, @bitmap.width || 1, @bitmap.height || 1)\n            @dstRect.set(0, 0, @srcRect.width || 1, @srcRect.height || 1)\n        else\n            @srcRect = new Rect(0, 0, 1, 1)\n            @dstRect.set(0, 0,  1,  1)\n            \n        if flipX\n            @visual.mirror = yes\n  \n        @addComponent(@behavior)\n        @addComponent(@visual)\n        \nui.Object_Hotspot = Object_Hotspot",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Hotspot,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Hotspot = (function(superClass) {\n    extend(Object_Hotspot, superClass);\n\n    Object.defineProperty(Object_Hotspot.prototype, \"selected\", {\n      set: function(v) {\n        return this.behavior.selected = v;\n      },\n      get: function() {\n        return this.behavior.selected;\n      }\n    });\n\n\n    /**\n    * A hotspot object to define an area on the screen which can respond\n    * to user-actions like mouse/touch actions. A hotspot can have multiple\n    * images for different states like hovered, selected, etc.\n    *\n    * @module ui\n    * @class Object_Hotspot\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_Hotspot(imageName, imageHandling, flipX) {\n      Object_Hotspot.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The UI object's source rectangle on screen.\n      * @property srcRect\n      * @type gs.Rect\n       */\n      this.srcRect = null;\n\n      /**\n      * The UI object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Frame\n       */\n      this.visual = new gs.Component_Sprite();\n\n      /**\n      * The object's image-handling.\n      * @property imageHandling\n      * @type gs.ImageHandling\n       */\n      this.imageHandling = imageHandling != null ? imageHandling : 1;\n\n      /**\n      * A behavior-component to hotspot-specific behavior to the object.\n      * @property behavior\n      * @type gs.Component_HotspotBehavior\n       */\n      this.behavior = new gs.Component_HotspotBehavior();\n      this.behavior.imageHandling = this.imageHandling;\n\n      /**\n      * The UI object's bitmap used for visual presentation.\n      * @property bitmap\n      * @type gs.Bitmap\n       */\n      this.bitmap = ResourceManager.getBitmap(\"Graphics/Pictures/\" + imageName);\n      if (this.bitmap != null) {\n        if (this.imageHandling === 1) {\n          this.srcRect = new Rect(0, this.bitmap.height / 2, this.bitmap.width, this.bitmap.height / 2);\n        } else {\n          this.srcRect = new Rect(0, 0, this.bitmap.width || 1, this.bitmap.height || 1);\n        }\n        this.dstRect.set(0, 0, this.srcRect.width || 1, this.srcRect.height || 1);\n      } else {\n        this.srcRect = new Rect(0, 0, 1, 1);\n        this.dstRect.set(0, 0, 1, 1);\n      }\n      if (flipX) {\n        this.visual.mirror = true;\n      }\n      this.addComponent(this.behavior);\n      this.addComponent(this.visual);\n    }\n\n    return Object_Hotspot;\n\n  })(ui.Object_UIElement);\n\n  ui.Object_Hotspot = Object_Hotspot;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}