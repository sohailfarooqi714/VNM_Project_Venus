{
    "uid": "44F0ACF0K33D7A4596SB37BE1C1B90CB7A77",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_BlendAnimation",
        "type": "game_script",
        "order": 1,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_BlendAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_BlendAnimation extends gs.Component_Animation\n    ###*\n    * Executes a blend-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_BlendAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        ###*\n        * The easing-object used for the animation.\n        * @property easing\n        * @type gs.Easing\n        ###\n        @easing = new gs.Easing(null, data?.easing)\n        \n    ###*\n    * Serializes the blend-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###\n    toDataBundle: ->\n        easing: @easing\n     \n    ###*\n    * Updates the blend-animation.\n    *\n    * @method update\n    ###   \n    update: ->\n        super\n        if not @easing.isRunning then return\n\n        @easing.updateValue()\n        @object.opacity = @easing.value\n        \n        if not @easing.isRunning\n            @object.opacity = Math.round(@object.opacity)\n            @callback?(@object, this)\n \n    ###*\n    * Stops the blend-animation.\n    *\n    * @method stop \n    ###\n    stop: ->\n        if @easing.isRunning\n            @easing.isRunning = no\n            @callback?(@object, this)\n            \n    ###*\n    * Starts the blend-animation.\n    *\n    * @method start\n    * @param {number} opacity The target opacity.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if blending is finished. \n    ###  \n    start: (opacity, duration, easingType, callback) ->\n        if @easing.isRunning\n            @callback?(@object, this)\n            \n        @callback = callback\n        @easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]\n        if @object.opacity == opacity then return @callback?(@object, this)\n        \n        if duration == 0 or @isInstantSkip()\n            @object.opacity = opacity\n            @callback?(@object, this)\n        else\n            @easing.startValue(@object.opacity, opacity - @object.opacity, duration)\n        \ngs.Component_BlendAnimation = Component_BlendAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_BlendAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_BlendAnimation = (function(superClass) {\n    extend(Component_BlendAnimation, superClass);\n\n\n    /**\n    * Executes a blend-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_BlendAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_BlendAnimation(data) {\n      Component_BlendAnimation.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The easing-object used for the animation.\n      * @property easing\n      * @type gs.Easing\n       */\n      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);\n    }\n\n\n    /**\n    * Serializes the blend-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_BlendAnimation.prototype.toDataBundle = function() {\n      return {\n        easing: this.easing\n      };\n    };\n\n\n    /**\n    * Updates the blend-animation.\n    *\n    * @method update\n     */\n\n    Component_BlendAnimation.prototype.update = function() {\n      Component_BlendAnimation.__super__.update.apply(this, arguments);\n      if (!this.easing.isRunning) {\n        return;\n      }\n      this.easing.updateValue();\n      this.object.opacity = this.easing.value;\n      if (!this.easing.isRunning) {\n        this.object.opacity = Math.round(this.object.opacity);\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Stops the blend-animation.\n    *\n    * @method stop\n     */\n\n    Component_BlendAnimation.prototype.stop = function() {\n      if (this.easing.isRunning) {\n        this.easing.isRunning = false;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Starts the blend-animation.\n    *\n    * @method start\n    * @param {number} opacity The target opacity.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if blending is finished.\n     */\n\n    Component_BlendAnimation.prototype.start = function(opacity, duration, easingType, callback) {\n      if (this.easing.isRunning) {\n        if (typeof this.callback === \"function\") {\n          this.callback(this.object, this);\n        }\n      }\n      this.callback = callback;\n      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];\n      if (this.object.opacity === opacity) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n      if (duration === 0 || this.isInstantSkip()) {\n        this.object.opacity = opacity;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        return this.easing.startValue(this.object.opacity, opacity - this.object.opacity, duration);\n      }\n    };\n\n    return Component_BlendAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_BlendAnimation = Component_BlendAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}