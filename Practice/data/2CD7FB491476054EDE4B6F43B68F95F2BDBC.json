{
    "uid": "2CD7FB491476054EDE4B6F43B68F95F2BDBC",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_CallSceneInterpreter",
        "type": "game_script",
        "order": 19,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "scriptType": 0,
        "content": "# ===================================================================\n#\n#   Script: Component_CallSceneInterpreter\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_CallSceneInterpreter extends gs.Component_CommandInterpreter\n    @objectCodecBlackList = gs.Component_CommandInterpreter.objectCodecBlackList\n    \n    ###*\n    * A command interpreter used as a sub-interpreter to execute CallScene commands. See\n    * gs.Component_CommandInterpreter for more information.\n    *\n    * @module gs\n    * @class Component_CallSceneInterpreter\n    * @extends gs.Component_CommandInterpreter\n    * @memberof gs\n    ###\n    constructor: ->\n        super\n    ###*\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n    ###\n    onDataBundleRestore: (data, context) ->\n        sceneDocument = DataManager.getDocument(@context.id)\n        @context.set(sceneDocument.uid, sceneDocument)\n        @object = { commands: sceneDocument.items.commands }\n            \n    \nvn.Component_CallSceneInterpreter = Component_CallSceneInterpreter",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_CallSceneInterpreter,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_CallSceneInterpreter = (function(superClass) {\n    extend(Component_CallSceneInterpreter, superClass);\n\n    Component_CallSceneInterpreter.objectCodecBlackList = gs.Component_CommandInterpreter.objectCodecBlackList;\n\n\n    /**\n    * A command interpreter used as a sub-interpreter to execute CallScene commands. See\n    * gs.Component_CommandInterpreter for more information.\n    *\n    * @module gs\n    * @class Component_CallSceneInterpreter\n    * @extends gs.Component_CommandInterpreter\n    * @memberof gs\n     */\n\n    function Component_CallSceneInterpreter() {\n      Component_CallSceneInterpreter.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /**\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n     */\n\n    Component_CallSceneInterpreter.prototype.onDataBundleRestore = function(data, context) {\n      var sceneDocument;\n      sceneDocument = DataManager.getDocument(this.context.id);\n      this.context.set(sceneDocument.uid, sceneDocument);\n      return this.object = {\n        commands: sceneDocument.items.commands\n      };\n    };\n\n    return Component_CallSceneInterpreter;\n\n  })(gs.Component_CommandInterpreter);\n\n  vn.Component_CallSceneInterpreter = Component_CallSceneInterpreter;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}