{
    "uid": "D1E8BD12K8995A47C7S86E8E89AD5013D83D",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_MaskAnimation",
        "type": "game_script",
        "order": 2,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_MaskAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_MaskAnimation extends gs.Component_Animation\n    ###*\n    * Executes a mask-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_MaskAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        @easing = new gs.Easing(null, data?.easing)\n        @callback = null\n        @animationType = data?.animationType || 0\n    \n    ###*\n    * Serializes the mask-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###        \n    toDataBundle: ->\n        easing: @easing,\n        animationType: @animationType\n    \n    ###*\n    * Updates the mask-animation.\n    *\n    * @method update\n    ###    \n    update: ->\n        super()\n        if not @easing.isRunning then return\n        \n        @easing.updateValue()\n        @object.mask.value = @easing.value\n        \n        if not @easing.isRunning\n            if @animationType < 1\n                @object.mask.source = null\n                @object.mask.vague = 0\n            @animationType = 0\n            @callback?(@object, this)\n    \n    ###*\n    * Lets the game object appear on screen using a masking-effect.\n    *\n    * @method maskIn\n    * @param {gs.Mask} mask The mask used for the animation.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished. \n    ###       \n    maskIn: (mask, duration, easing, callback) ->\n        @easing.type = easing\n        @animationType = 0\n        @callback = callback\n        \n        if duration == 0 or @isInstantSkip()\n            @callback?(@object, this)\n        else\n            @object.mask.type = 1\n            @object.mask.source = ResourceManager.getBitmap(\"Graphics/Masks/#{mask.graphic?.name}\")\n            @object.mask.vague = mask.vague\n            @object.mask.value = 255\n            \n            @easing.startValue(255, -255 - mask.vague, duration)\n    \n    ###*\n    * Lets the game object disappear from screen using a masking-effect.\n    *\n    * @method maskIn\n    * @param {gs.Mask} mask The mask used for the animation.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished. \n    ###      \n    maskOut: (mask, duration, easing, callback) ->\n        @easing.type = easing\n        @animationType = 0\n        @callback = callback\n        \n        if duration == 0 or @isInstantSkip()\n            @callback?(@object, this)\n        else\n            @object.mask.type = 1\n            @object.mask.source = ResourceManager.getBitmap(\"Graphics/Masks/#{mask.graphic?.name}\")\n            @object.mask.vague = mask.vague\n            @object.mask.value = 0\n            \n            @easing.startValue(-mask.vague, 255 + mask.vague, duration)\n    \n    ###*\n    * Description follows...\n    *\n    * @method maskTo\n    * @param {gs.Mask} mask The mask used for the animation.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished. \n    ###       \n    maskTo: (mask, duration, easing, callback) ->\n        @easing.type = easing\n        @animationType = 1\n        @callback = callback\n\n        @object.mask.type = 1\n\n        # FIXME: Doubled code, see CommandInterpreter.commandMaskPicture\n        if mask.sourceType == 0\n            @object.mask.source = ResourceManager.getBitmap(\"Graphics/Masks/#{mask.graphic?.name}\")\n        else\n            if @object.mask.source?.videoElement?\n                @object.mask.source.pause()\n                \n            @object.mask.source = ResourceManager.getVideo(\"Movies/#{mask.video.name}\")\n            @object.mask.source?.play()\n            @object.mask.source?.loop = true\n            \n        @object.mask.vague = mask.vague\n\n        if duration == 0 or @isInstantSkip()\n            @animationType = 0\n            @object.mask.value = mask.value\n            @callback?(@object, this)\n        else\n            @easing.startValue(@object.mask.value, mask.value - @object.mask.value, duration)\n        \ngs.Component_MaskAnimation = Component_MaskAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_MaskAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_MaskAnimation = (function(superClass) {\n    extend(Component_MaskAnimation, superClass);\n\n\n    /**\n    * Executes a mask-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_MaskAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_MaskAnimation(data) {\n      Component_MaskAnimation.__super__.constructor.apply(this, arguments);\n      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);\n      this.callback = null;\n      this.animationType = (data != null ? data.animationType : void 0) || 0;\n    }\n\n\n    /**\n    * Serializes the mask-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_MaskAnimation.prototype.toDataBundle = function() {\n      return {\n        easing: this.easing,\n        animationType: this.animationType\n      };\n    };\n\n\n    /**\n    * Updates the mask-animation.\n    *\n    * @method update\n     */\n\n    Component_MaskAnimation.prototype.update = function() {\n      Component_MaskAnimation.__super__.update.call(this);\n      if (!this.easing.isRunning) {\n        return;\n      }\n      this.easing.updateValue();\n      this.object.mask.value = this.easing.value;\n      if (!this.easing.isRunning) {\n        if (this.animationType < 1) {\n          this.object.mask.source = null;\n          this.object.mask.vague = 0;\n        }\n        this.animationType = 0;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Lets the game object appear on screen using a masking-effect.\n    *\n    * @method maskIn\n    * @param {gs.Mask} mask The mask used for the animation.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished.\n     */\n\n    Component_MaskAnimation.prototype.maskIn = function(mask, duration, easing, callback) {\n      var ref;\n      this.easing.type = easing;\n      this.animationType = 0;\n      this.callback = callback;\n      if (duration === 0 || this.isInstantSkip()) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        this.object.mask.type = 1;\n        this.object.mask.source = ResourceManager.getBitmap(\"Graphics/Masks/\" + ((ref = mask.graphic) != null ? ref.name : void 0));\n        this.object.mask.vague = mask.vague;\n        this.object.mask.value = 255;\n        return this.easing.startValue(255, -255 - mask.vague, duration);\n      }\n    };\n\n\n    /**\n    * Lets the game object disappear from screen using a masking-effect.\n    *\n    * @method maskIn\n    * @param {gs.Mask} mask The mask used for the animation.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished.\n     */\n\n    Component_MaskAnimation.prototype.maskOut = function(mask, duration, easing, callback) {\n      var ref;\n      this.easing.type = easing;\n      this.animationType = 0;\n      this.callback = callback;\n      if (duration === 0 || this.isInstantSkip()) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        this.object.mask.type = 1;\n        this.object.mask.source = ResourceManager.getBitmap(\"Graphics/Masks/\" + ((ref = mask.graphic) != null ? ref.name : void 0));\n        this.object.mask.vague = mask.vague;\n        this.object.mask.value = 0;\n        return this.easing.startValue(-mask.vague, 255 + mask.vague, duration);\n      }\n    };\n\n\n    /**\n    * Description follows...\n    *\n    * @method maskTo\n    * @param {gs.Mask} mask The mask used for the animation.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished.\n     */\n\n    Component_MaskAnimation.prototype.maskTo = function(mask, duration, easing, callback) {\n      var ref, ref1, ref2, ref3;\n      this.easing.type = easing;\n      this.animationType = 1;\n      this.callback = callback;\n      this.object.mask.type = 1;\n      if (mask.sourceType === 0) {\n        this.object.mask.source = ResourceManager.getBitmap(\"Graphics/Masks/\" + ((ref = mask.graphic) != null ? ref.name : void 0));\n      } else {\n        if (((ref1 = this.object.mask.source) != null ? ref1.videoElement : void 0) != null) {\n          this.object.mask.source.pause();\n        }\n        this.object.mask.source = ResourceManager.getVideo(\"Movies/\" + mask.video.name);\n        if ((ref2 = this.object.mask.source) != null) {\n          ref2.play();\n        }\n        if ((ref3 = this.object.mask.source) != null) {\n          ref3.loop = true;\n        }\n      }\n      this.object.mask.vague = mask.vague;\n      if (duration === 0 || this.isInstantSkip()) {\n        this.animationType = 0;\n        this.object.mask.value = mask.value;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        return this.easing.startValue(this.object.mask.value, mask.value - this.object.mask.value, duration);\n      }\n    };\n\n    return Component_MaskAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_MaskAnimation = Component_MaskAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}