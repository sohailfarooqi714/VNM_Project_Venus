{
    "uid": "2ADC0E64K3E53A43DFSA080E702C95F0ABF5",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_Container",
        "type": "game_script",
        "order": 1,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_Container\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_Container extends gs.Component\n    ###*\n    * A container component allows an object to have sub-objects.\n    * @module gs\n    * @class Component_Container\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (disposeBehavior) ->\n        super\n        \n        ###*\n        * The behavior how the container deals with disposed game objects.\n        * @property disposeBehavior\n        * @default gs.ContainerDisposeBehavior.REMOVE\n        ###\n        @disposeBehavior = disposeBehavior ? gs.ContainerDisposeBehavior.REMOVE\n        \n    ###*\n    * Sorts the sub-objects by order-index.\n    * @method sort_\n    * @param {gs.Object_Base} a Object A\n    * @param {gs.Object_Base} b Object B\n    ###\n    sort_: (a, b) ->\n        if a.order > b.order\n          return -1\n        else if a.order < b.order\n          return 1\n        else\n          return 0\n          \n    ###*\n    * Sets the visibility of all sub objects.\n    * @method setVisible\n    * @param {boolean} visible - The new visibility.\n    ###\n    setVisible: (visible) ->\n        for subObject in @object.subObjects\n            if subObject\n                subObject.visible = visible\n                subObject.update()\n                \n    ###*\n    * Updates all sub-objects and sorts them if necessary. It also removes\n    * disposed objects from the list of sub-objects.\n    * @method update\n    ###\n    update: ->\n        super\n        \n        subObjects = @object.subObjects\n        if @object.needsSort\n            subObjects.sort(@sort_)\n            @object.needsSort = no\n          \n        i = 0\n        while i < subObjects.length\n            subObject = subObjects[i]\n            if subObject?.active\n                if subObject.disposed\n                    if @disposeBehavior == gs.ContainerDisposeBehavior.REMOVE\n                        subObjects.remove(subObject)\n                        i--\n                    else\n                        subObjects[i] = null\n                else\n                    subObject.update()\n            i++\n            \n        \ngs.Component_Container = Component_Container",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_Container,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_Container = (function(superClass) {\n    extend(Component_Container, superClass);\n\n\n    /**\n    * A container component allows an object to have sub-objects.\n    * @module gs\n    * @class Component_Container\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_Container(disposeBehavior) {\n      Component_Container.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The behavior how the container deals with disposed game objects.\n      * @property disposeBehavior\n      * @default gs.ContainerDisposeBehavior.REMOVE\n       */\n      this.disposeBehavior = disposeBehavior != null ? disposeBehavior : gs.ContainerDisposeBehavior.REMOVE;\n    }\n\n\n    /**\n    * Sorts the sub-objects by order-index.\n    * @method sort_\n    * @param {gs.Object_Base} a Object A\n    * @param {gs.Object_Base} b Object B\n     */\n\n    Component_Container.prototype.sort_ = function(a, b) {\n      if (a.order > b.order) {\n        return -1;\n      } else if (a.order < b.order) {\n        return 1;\n      } else {\n        return 0;\n      }\n    };\n\n\n    /**\n    * Sets the visibility of all sub objects.\n    * @method setVisible\n    * @param {boolean} visible - The new visibility.\n     */\n\n    Component_Container.prototype.setVisible = function(visible) {\n      var j, len, ref, results, subObject;\n      ref = this.object.subObjects;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        subObject = ref[j];\n        if (subObject) {\n          subObject.visible = visible;\n          results.push(subObject.update());\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Updates all sub-objects and sorts them if necessary. It also removes\n    * disposed objects from the list of sub-objects.\n    * @method update\n     */\n\n    Component_Container.prototype.update = function() {\n      var i, results, subObject, subObjects;\n      Component_Container.__super__.update.apply(this, arguments);\n      subObjects = this.object.subObjects;\n      if (this.object.needsSort) {\n        subObjects.sort(this.sort_);\n        this.object.needsSort = false;\n      }\n      i = 0;\n      results = [];\n      while (i < subObjects.length) {\n        subObject = subObjects[i];\n        if (subObject != null ? subObject.active : void 0) {\n          if (subObject.disposed) {\n            if (this.disposeBehavior === gs.ContainerDisposeBehavior.REMOVE) {\n              subObjects.remove(subObject);\n              i--;\n            } else {\n              subObjects[i] = null;\n            }\n          } else {\n            subObject.update();\n          }\n        }\n        results.push(i++);\n      }\n      return results;\n    };\n\n    return Component_Container;\n\n  })(gs.Component);\n\n  gs.Component_Container = Component_Container;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}