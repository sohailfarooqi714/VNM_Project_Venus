{
    "uid": "DBED0D62K6A03A47C0SA78CEBB556CA2372D",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_NumberInput",
        "type": "game_script",
        "order": 18,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_NumberInput\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_NumberInput extends gs.Component\n    ###*\n    * The number-input component defines the logic for the number-input window\n    * of the default In-Game UI. \n    *\n    * @module gs\n    * @class Component_NumberInput\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (params) ->\n        ###*\n        * The max. number of digits of the number.\n        * @property digits\n        * @type number\n        ###\n        @digits = ui.Component_FormulaHandler.fieldValue(this, params.digits)\n        \n        ###*\n        * The number-cursor position.\n        * @property digits\n        * @type number\n        * @protected\n        ###\n        @cursor = 0\n        \n        ###*\n        * The current number as text.\n        * @property number\n        * @type string\n        ###\n        @number = \"\"\n        \n    ###*\n    * Initializes the number-input component.\n    *\n    * @method setup\n    ###\n    setup: ->\n        text = \"\".fill(\"0\", @digits)\n        \n        return null\n        \n    ###*\n    * An action-method to add a single number/digit.\n    *\n    * @method action_addNumber\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} params The params-object which need a number-property containing the digit/number to add.\n    ###\n    action_addNumber: (sender, params) ->\n        number = ui.Component_FormulaHandler.fieldValue(sender, params.number)\n        if @number.length == 0 and number == 0 then return\n        \n        if @number.length < @digits\n            @number += number.toString()\n        else\n            @number = @number.replaceAt(@number.length-1, number.toString())\n        @setNumber(@number)\n            \n    ###*\n    * An action-method to clear the number at the current cursor position.\n    *\n    * @method action_removeNumber\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} [params=null] The params-object. Can be <b>null</b>.\n    ###       \n    action_removeNumber: (sender, params) ->\n        if @number.length > 0\n            @number = @number.substring(0, @number.length-1)\n            \n        @setNumber(@number)   \n        @setNumber(@number)\n    \n    ###*\n    * Puts the specified number into the UI label-objects to make it visible\n    * on screen.\n    *\n    * @method setNumber\n    * @param {string} number The number to set.\n    ###     \n    setNumber: (number) ->\n        text = number.lfill(\"0\", @digits)\n        for c, i in text\n            @object.controls[i].controls[1].text = c\n            # FIXME: Direct update call shouldn't be necessary. See TextInput.\n            @object.controls[i].controls[1].update()\n            \n        return null\n        \ngs.Component_NumberInput = Component_NumberInput",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_NumberInput,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_NumberInput = (function(superClass) {\n    extend(Component_NumberInput, superClass);\n\n\n    /**\n    * The number-input component defines the logic for the number-input window\n    * of the default In-Game UI. \n    *\n    * @module gs\n    * @class Component_NumberInput\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_NumberInput(params) {\n\n      /**\n      * The max. number of digits of the number.\n      * @property digits\n      * @type number\n       */\n      this.digits = ui.Component_FormulaHandler.fieldValue(this, params.digits);\n\n      /**\n      * The number-cursor position.\n      * @property digits\n      * @type number\n      * @protected\n       */\n      this.cursor = 0;\n\n      /**\n      * The current number as text.\n      * @property number\n      * @type string\n       */\n      this.number = \"\";\n    }\n\n\n    /**\n    * Initializes the number-input component.\n    *\n    * @method setup\n     */\n\n    Component_NumberInput.prototype.setup = function() {\n      var text;\n      text = \"\".fill(\"0\", this.digits);\n      return null;\n    };\n\n\n    /**\n    * An action-method to add a single number/digit.\n    *\n    * @method action_addNumber\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} params The params-object which need a number-property containing the digit/number to add.\n     */\n\n    Component_NumberInput.prototype.action_addNumber = function(sender, params) {\n      var number;\n      number = ui.Component_FormulaHandler.fieldValue(sender, params.number);\n      if (this.number.length === 0 && number === 0) {\n        return;\n      }\n      if (this.number.length < this.digits) {\n        this.number += number.toString();\n      } else {\n        this.number = this.number.replaceAt(this.number.length - 1, number.toString());\n      }\n      return this.setNumber(this.number);\n    };\n\n\n    /**\n    * An action-method to clear the number at the current cursor position.\n    *\n    * @method action_removeNumber\n    * @param {gs.Object_Base} sender The sender of the action.\n    * @param {Object} [params=null] The params-object. Can be <b>null</b>.\n     */\n\n    Component_NumberInput.prototype.action_removeNumber = function(sender, params) {\n      if (this.number.length > 0) {\n        this.number = this.number.substring(0, this.number.length - 1);\n      }\n      this.setNumber(this.number);\n      return this.setNumber(this.number);\n    };\n\n\n    /**\n    * Puts the specified number into the UI label-objects to make it visible\n    * on screen.\n    *\n    * @method setNumber\n    * @param {string} number The number to set.\n     */\n\n    Component_NumberInput.prototype.setNumber = function(number) {\n      var c, i, j, len, text;\n      text = number.lfill(\"0\", this.digits);\n      for (i = j = 0, len = text.length; j < len; i = ++j) {\n        c = text[i];\n        this.object.controls[i].controls[1].text = c;\n        this.object.controls[i].controls[1].update();\n      }\n      return null;\n    };\n\n    return Component_NumberInput;\n\n  })(gs.Component);\n\n  gs.Component_NumberInput = Component_NumberInput;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}