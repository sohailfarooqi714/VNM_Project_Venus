{
    "uid": "D3A4011838BF80460B58F607AF6563D9221E",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "CircularDistortionEffect",
        "type": "game_script",
        "order": 0,
        "parentId": "11501DAC2D04074EBF7A77A258891F726F54",
        "folder": false,
        "scriptType": 0,
        "content": "# ===================================================================\n#\n#   Script: CircularDistortionEffect\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass CircularDistortionEffect extends gs.GraphicEffect\n    ###*\n    * An example effect to show you how to define your own shader-based effects. It is important\n    * that the name-property matches the name of the registered EffectInfo in gs.Main.setupEffects. Keep in mind that using\n    * custom OpenGL/GLSL shaders binds your game to platforms with OpenGL support.\n    *\n    * All effects are fragment/pixel shaders by default.\n    *\n    * @module gs\n    * @class CircularDistortionEffect\n    * @extends gs.CircularDistortionEffect\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super(data)\n        @type = gs.GraphicEffectType.BASE\n        @name = \"circularDistortion\"\n     \n    ###*\n    * Setup the effect for rendering. All uniforms/shader-inputs need to be set here.\n    *\n    * @method setup\n    * @param {gs.Effect} effect - The shader-effect/program object which allows you to set uniforms.\n    * @param {gs.RenderTask} task - The render-task object contains additional information about the object being rendered.\n    * @param {gs.Texture2D} texture - The texture used for rendering.\n    ###   \n    setup: (effect, task, texture) ->\n        effect.setVector2Value(\"TextureMax\", Graphics.width / texture.realWidth, Graphics.height / texture.realHeight)\n        effect.setFloatValue(\"CircDistTime\", Graphics.frameCount / 50)\n        \n    ###*\n    * Called before the graphics system is initialized to register your custom shader-based effect. See\n    * gs.Main.setupEffects for more info.\n    *\n    * @method register\n    ###    \n    @register: ->\n        # This is an example of how to register your own custom shader-based effect.\n        gs.Effect.registerEffect(new gs.EffectInfo({\n            # Use BASE if the effect overwrites gl_FragColor. Use ADDON if the effect uses gl_FragColor as input.\n            type: gs.GraphicEffectType.BASE,\n            # The name-property needs to match the value of the name-property of the effect-class.\n            name: \"circularDistortion\",\n            # preprocessor defines, this not used in most cases except for internal effects.\n            defines: [\"\"],\n            # A list of all uniforms with correct syntax.\n            uniforms: [\"uniform sampler2D Texture0;\", \"uniform float CircDistTime;\", \"uniform vec2 TextureMax;\"],\n            # A list of all varyings with correct syntax\n            varying: [\"varying vec2 textureCoord;\", \"varying vec4 vColor;\"],\n            # A list of all functions calls with correct syntax.\n            functionCalls: [\"circular_distortion();\"],\n            # A list of all functions with correct syntax.\n            functions: [\"\"\"\n                void circular_distortion()\n                {\n                    vec2 uv = textureCoord;\n                    uv.x += sin(uv.y * 10.0 + CircDistTime) / 10.0;\n                    uv.y += cos(uv.x * 10.0 + CircDistTime) / 10.0;\n                \n                    gl_FragColor = texture2D(Texture0, max(mod(uv, TextureMax), 0.0));\n                    gl_FragColor[3] *= vColor[3]\n                }\n            \"\"\"]\n        }))\n\ngs.CircularDistortionEffect = CircularDistortionEffect     \n",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var CircularDistortionEffect,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  CircularDistortionEffect = (function(superClass) {\n    extend(CircularDistortionEffect, superClass);\n\n\n    /**\n    * An example effect to show you how to define your own shader-based effects. It is important\n    * that the name-property matches the name of the registered EffectInfo in gs.Main.setupEffects. Keep in mind that using\n    * custom OpenGL/GLSL shaders binds your game to platforms with OpenGL support.\n    *\n    * All effects are fragment/pixel shaders by default.\n    *\n    * @module gs\n    * @class CircularDistortionEffect\n    * @extends gs.CircularDistortionEffect\n    * @memberof gs\n    * @constructor\n     */\n\n    function CircularDistortionEffect(data) {\n      CircularDistortionEffect.__super__.constructor.call(this, data);\n      this.type = gs.GraphicEffectType.BASE;\n      this.name = \"circularDistortion\";\n    }\n\n\n    /**\n    * Setup the effect for rendering. All uniforms/shader-inputs need to be set here.\n    *\n    * @method setup\n    * @param {gs.Effect} effect - The shader-effect/program object which allows you to set uniforms.\n    * @param {gs.RenderTask} task - The render-task object contains additional information about the object being rendered.\n    * @param {gs.Texture2D} texture - The texture used for rendering.\n     */\n\n    CircularDistortionEffect.prototype.setup = function(effect, task, texture) {\n      effect.setVector2Value(\"TextureMax\", Graphics.width / texture.realWidth, Graphics.height / texture.realHeight);\n      return effect.setFloatValue(\"CircDistTime\", Graphics.frameCount / 50);\n    };\n\n\n    /**\n    * Called before the graphics system is initialized to register your custom shader-based effect. See\n    * gs.Main.setupEffects for more info.\n    *\n    * @method register\n     */\n\n    CircularDistortionEffect.register = function() {\n      return gs.Effect.registerEffect(new gs.EffectInfo({\n        type: gs.GraphicEffectType.BASE,\n        name: \"circularDistortion\",\n        defines: [\"\"],\n        uniforms: [\"uniform sampler2D Texture0;\", \"uniform float CircDistTime;\", \"uniform vec2 TextureMax;\"],\n        varying: [\"varying vec2 textureCoord;\", \"varying vec4 vColor;\"],\n        functionCalls: [\"circular_distortion();\"],\n        functions: [\"void circular_distortion()\\n{\\n    vec2 uv = textureCoord;\\n    uv.x += sin(uv.y * 10.0 + CircDistTime) / 10.0;\\n    uv.y += cos(uv.x * 10.0 + CircDistTime) / 10.0;\\n\\n    gl_FragColor = texture2D(Texture0, max(mod(uv, TextureMax), 0.0));\\n    gl_FragColor[3] *= vColor[3]\\n}\"]\n      }));\n    };\n\n    return CircularDistortionEffect;\n\n  })(gs.GraphicEffect);\n\n  gs.CircularDistortionEffect = CircularDistortionEffect;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}