{
    "uid": "B3C3E1B9K3F67A4C85SBC37E4BDDDAA1F7BC",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_ColorAnimation",
        "type": "game_script",
        "order": 10,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_ColorAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_ColorAnimation extends gs.Component_Animation\n    ###*\n    * Executes a color-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_MoveAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        ###*\n        * The easing-object used for the animation.\n        * @property easing\n        * @type gs.Easing\n        ###\n        @easing = new gs.Easing(null, data?.easing)\n        \n        ###*\n        * The start-color.\n        * @property sourceColor\n        * @type gs.Color\n        * @protected\n        ###\n        @sourceColor = data?.sourceColor || new Color()\n        \n        ###*\n        * The end-color.\n        * @property targetColor\n        * @type gs.Color\n        * @protected\n        ###\n        @targetColor = data?.targetColor || new Color()\n     \n    ###*\n    * Serializes the color-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###    \n    toDataBundle: ->\n        easing: @easing,\n        sourceColor: @sourceColor,\n        targetColor: @targetColor\n     \n     \n \n    ###*\n    * Updates the color-animation\n    *\n    * @method update\n    ###    \n    update: ->\n        super\n        \n        if not @easing.isRunning then return\n        \n        @easing.updateValue()\n        a = @easing.value\n    \n        @object.color.red = Math.floor((@sourceColor.red * a + @targetColor.red * (255 - a)) / 255)\n        @object.color.green = Math.floor((@sourceColor.green * a + @targetColor.green * (255 - a)) / 255)\n        @object.color.blue = Math.floor((@sourceColor.blue * a + @targetColor.blue * (255 - a)) / 255)\n        @object.color.alpha = Math.floor((@sourceColor.alpha * a + @targetColor.alpha * (255 - a)) / 255)\n\n        if not @easing.isRunning\n            @object.color = @targetColor\n            @callback?(@object, this)\n    \n    ###*\n    * Starts the color-animation.\n    *\n    * @method colorTo\n    * @param {Color} color The target color.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished.\n    ###          \n    start: (color, duration, easingType, callback) ->\n        @callback = callback\n        @easing.type = easingType\n        \n        if @object.color.red == color.red and @object.color.green == color.green and\n            @object.color.blue == color.blue and @object.color.alpha == color.alpha\n           @callback?(@object, this)\n    \n        if duration == 0 or @isInstantSkip()\n            @object.color = color\n            @callback?(@object, this)\n        else\n            @sourceColor = new Color(@object.color)\n            @targetColor = color\n            @easing.startValue(255, -255, duration)\n        \ngs.Component_ColorAnimation = Component_ColorAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_ColorAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_ColorAnimation = (function(superClass) {\n    extend(Component_ColorAnimation, superClass);\n\n\n    /**\n    * Executes a color-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_MoveAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_ColorAnimation(data) {\n      Component_ColorAnimation.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The easing-object used for the animation.\n      * @property easing\n      * @type gs.Easing\n       */\n      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);\n\n      /**\n      * The start-color.\n      * @property sourceColor\n      * @type gs.Color\n      * @protected\n       */\n      this.sourceColor = (data != null ? data.sourceColor : void 0) || new Color();\n\n      /**\n      * The end-color.\n      * @property targetColor\n      * @type gs.Color\n      * @protected\n       */\n      this.targetColor = (data != null ? data.targetColor : void 0) || new Color();\n    }\n\n\n    /**\n    * Serializes the color-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_ColorAnimation.prototype.toDataBundle = function() {\n      return {\n        easing: this.easing,\n        sourceColor: this.sourceColor,\n        targetColor: this.targetColor\n      };\n    };\n\n\n    /**\n    * Updates the color-animation\n    *\n    * @method update\n     */\n\n    Component_ColorAnimation.prototype.update = function() {\n      var a;\n      Component_ColorAnimation.__super__.update.apply(this, arguments);\n      if (!this.easing.isRunning) {\n        return;\n      }\n      this.easing.updateValue();\n      a = this.easing.value;\n      this.object.color.red = Math.floor((this.sourceColor.red * a + this.targetColor.red * (255 - a)) / 255);\n      this.object.color.green = Math.floor((this.sourceColor.green * a + this.targetColor.green * (255 - a)) / 255);\n      this.object.color.blue = Math.floor((this.sourceColor.blue * a + this.targetColor.blue * (255 - a)) / 255);\n      this.object.color.alpha = Math.floor((this.sourceColor.alpha * a + this.targetColor.alpha * (255 - a)) / 255);\n      if (!this.easing.isRunning) {\n        this.object.color = this.targetColor;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Starts the color-animation.\n    *\n    * @method colorTo\n    * @param {Color} color The target color.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback-function called when the animation is finished.\n     */\n\n    Component_ColorAnimation.prototype.start = function(color, duration, easingType, callback) {\n      this.callback = callback;\n      this.easing.type = easingType;\n      if (this.object.color.red === color.red && this.object.color.green === color.green && this.object.color.blue === color.blue && this.object.color.alpha === color.alpha) {\n        if (typeof this.callback === \"function\") {\n          this.callback(this.object, this);\n        }\n      }\n      if (duration === 0 || this.isInstantSkip()) {\n        this.object.color = color;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        this.sourceColor = new Color(this.object.color);\n        this.targetColor = color;\n        return this.easing.startValue(255, -255, duration);\n      }\n    };\n\n    return Component_ColorAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_ColorAnimation = Component_ColorAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}