{
    "uid": "5D77390EKDA50A4FB7SBF0CE5BFDF3D799F1",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_InputHandler",
        "type": "game_script",
        "order": 22,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_InputHandler\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_InputHandler extends gs.Component\n    ###*\n    * The input-handler component is an interface between the input-system\n    * of the basic-engine and the game's event-system. In regular this\n    * component is used only by game scene to allow its game objects to\n    * receive input-events.\n    *\n    * Those input-events are necessary to solve the problem which game-object\n    * responds to a user-action first by building a responder-chain.\n    *\n    * @module gs\n    * @class Component_InputHandler\n    * @extends gs.Component\n    * @memberof gs\n    ###\n    constructor: ->\n        ###*\n        * Indicates if all input events, such as mouse and keyboard event, should be blocked.\n        *\n        * @property blockInput\n        * @type boolean\n        * @default false\n        ###\n        @blockInput = no\n     \n    ###*\n    * Sets up event handlers.\n    *\n    * @method setup\n    ###   \n    setup: ->\n        super\n        \n        gs.GlobalEventManager.on \"uiAnimationStart\", ((e) =>\n            @blockInput = yes\n        ), null, @object\n        gs.GlobalEventManager.on \"uiAnimationFinish\", ((e) =>\n            @blockInput = no\n        ), null, @object\n    \n    ###*\n    * Disposes the component and removes event handlers.\n    *\n    * @method dispose\n    ###    \n    dispose: ->\n        super\n        gs.GlobalEventManager.offByOwner(\"uiAnimationStart\", @object)\n        gs.GlobalEventManager.offByOwner(\"uiAnimationFinish\", @object)\n        \n    ###*\n    * Updates the component by checking the input-system and firing\n    * an input-event if necessary.\n    *\n    * @method update\n    ###\n    update: ->\n        return if @blockInput\n        \n        if Input.Mouse.moved\n            gs.GlobalEventManager.emit(\"mouseMoved\")\n        if Input.Mouse.buttonDown\n            gs.GlobalEventManager.emit(\"mouseDown\")\n        if Input.Mouse.buttonUp\n            gs.GlobalEventManager.emit(\"mouseUp\")\n        if Input.keyDown\n            gs.GlobalEventManager.emit(\"keyDown\")\n        if Input.keyUp\n            gs.GlobalEventManager.emit(\"keyUp\")\n        if Input.Mouse.wheelChanged\n            gs.GlobalEventManager.emit(\"mouseWheel\")\n            \ngs.Component_InputHandler = Component_InputHandler",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_InputHandler,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_InputHandler = (function(superClass) {\n    extend(Component_InputHandler, superClass);\n\n\n    /**\n    * The input-handler component is an interface between the input-system\n    * of the basic-engine and the game's event-system. In regular this\n    * component is used only by game scene to allow its game objects to\n    * receive input-events.\n    *\n    * Those input-events are necessary to solve the problem which game-object\n    * responds to a user-action first by building a responder-chain.\n    *\n    * @module gs\n    * @class Component_InputHandler\n    * @extends gs.Component\n    * @memberof gs\n     */\n\n    function Component_InputHandler() {\n\n      /**\n      * Indicates if all input events, such as mouse and keyboard event, should be blocked.\n      *\n      * @property blockInput\n      * @type boolean\n      * @default false\n       */\n      this.blockInput = false;\n    }\n\n\n    /**\n    * Sets up event handlers.\n    *\n    * @method setup\n     */\n\n    Component_InputHandler.prototype.setup = function() {\n      Component_InputHandler.__super__.setup.apply(this, arguments);\n      gs.GlobalEventManager.on(\"uiAnimationStart\", ((function(_this) {\n        return function(e) {\n          return _this.blockInput = true;\n        };\n      })(this)), null, this.object);\n      return gs.GlobalEventManager.on(\"uiAnimationFinish\", ((function(_this) {\n        return function(e) {\n          return _this.blockInput = false;\n        };\n      })(this)), null, this.object);\n    };\n\n\n    /**\n    * Disposes the component and removes event handlers.\n    *\n    * @method dispose\n     */\n\n    Component_InputHandler.prototype.dispose = function() {\n      Component_InputHandler.__super__.dispose.apply(this, arguments);\n      gs.GlobalEventManager.offByOwner(\"uiAnimationStart\", this.object);\n      return gs.GlobalEventManager.offByOwner(\"uiAnimationFinish\", this.object);\n    };\n\n\n    /**\n    * Updates the component by checking the input-system and firing\n    * an input-event if necessary.\n    *\n    * @method update\n     */\n\n    Component_InputHandler.prototype.update = function() {\n      if (this.blockInput) {\n        return;\n      }\n      if (Input.Mouse.moved) {\n        gs.GlobalEventManager.emit(\"mouseMoved\");\n      }\n      if (Input.Mouse.buttonDown) {\n        gs.GlobalEventManager.emit(\"mouseDown\");\n      }\n      if (Input.Mouse.buttonUp) {\n        gs.GlobalEventManager.emit(\"mouseUp\");\n      }\n      if (Input.keyDown) {\n        gs.GlobalEventManager.emit(\"keyDown\");\n      }\n      if (Input.keyUp) {\n        gs.GlobalEventManager.emit(\"keyUp\");\n      }\n      if (Input.Mouse.wheelChanged) {\n        return gs.GlobalEventManager.emit(\"mouseWheel\");\n      }\n    };\n\n    return Component_InputHandler;\n\n  })(gs.Component);\n\n  gs.Component_InputHandler = Component_InputHandler;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}