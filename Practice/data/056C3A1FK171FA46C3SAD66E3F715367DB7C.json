{
    "uid": "056C3A1FK171FA46C3SAD66E3F715367DB7C",
    "isLoaded": true,
    "lastModificationTime": 1427833915209,
    "items": {
        "name": "Main",
        "type": "game_script",
        "order": 8,
        "parentId": "ROOT",
        "content": "# ===================================================================\n#\n#   Script: Main\n#\n# ===================================================================\n#\n#   Entry point of your game.\n#\n# ===================================================================\nclass Main\n    ###*\n    * Controls the boot-process of the game.\n    *\n    * @module gs\n    * @class Main\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        window.$ = jQuery.noConflict()\n\n        @languagesLoaded = no\n        @frameCallback = null\n\n    ###*\n    * Updates the current frame.\n    *\n    * @method updateFrame\n    ###\n    updateFrame: ->\n        if $PARAMS.showDebugInfo\n            window.startTime = if window.performance? then window.performance.now() else Date.now()\n\n        SceneManager.update()\n        Graphics.frameCount++\n\n        if $PARAMS.showDebugInfo\n            if not @debugSprite? then @debugSprite = new Sprite_Debug()\n\n            window.endTime = if window.performance? then window.performance.now() else Date.now()\n            if Graphics.frameCount % 30 == 0\n                @debugSprite.frameTime = (endTime - startTime)\n                @debugSprite.redraw()\n\n    ###*\n    * Loads game data.\n    *\n    * @method loadData\n    ###\n    loadData: ->\n        RecordManager.load()\n        DataManager.getDocumentsByType(\"global_variables\")\n        DataManager.getDocumentsByType(\"language_profile\")\n        DataManager.getDocumentsByType(\"vn.chapter\")\n\n    ###*\n    * Loads system data.\n    *\n    * @method loadSystemData\n    ###\n    loadSystemData: ->\n        DataManager.getDocument(\"RESOURCES\")\n        DataManager.getDocument(\"SUMMARIES\")\n\n    ###*\n    * Loads system resources such as graphics, sounds, fonts, etc.\n    *\n    * @method loadSystemResources\n    ###\n    loadSystemResources: ->\n        ResourceManager.loadFonts()\n        ResourceLoader.loadSystemSounds(RecordManager.system)\n        ResourceLoader.loadSystemGraphics(RecordManager.system)\n\n        for language in LanguageManager.languages\n            if language.icon?.name?.length > 0\n                ResourceManager.getBitmap(\"Graphics/Icons/#{language.icon.name}\")\n\n        gs.Fonts.initialize()\n\n    ###*\n    * Gets game settings.\n    *\n    * @method getSettings\n    ###\n    getSettings: ->\n        settings = GameStorage.getObject(\"settings\")\n\n        if not settings? or settings.version != 342\n            GameManager.resetSettings()\n            settings = GameManager.settings\n\n        return settings\n\n    ###*\n    * Sets up the game's global data. If it is outdated, this method will\n    * reset the global game data.\n    *\n    * @method setupGlobalData\n    ###\n    setupGlobalData: ->\n        globalData = GameStorage.getObject(\"globalData\")\n        GameManager.globalData = globalData\n\n        if !globalData || globalData.version != 342\n            GameManager.resetGlobalData()\n\n    ###*\n    * Sets up game settings.\n    *\n    * @method setupGameSettings\n    * @param {Object} settings - Current game settings.\n    ###\n    setupGameSettings: (settings) ->\n        GameManager.settings = settings\n        GameManager.settings.fullScreen = Graphics.isFullscreen()\n\n        for character, i in RecordManager.charactersArray\n            if character and !GameManager.settings.voicesByCharacter[character.index]\n                GameManager.settings.voicesByCharacter[character.index] = 100\n        for cg, i in RecordManager.cgGalleryArray\n            if cg? and !GameManager.globalData.cgGallery[cg.index]\n                GameManager.globalData.cgGallery[cg.index] = { unlocked: no }\n\n    ###*\n    * Sets up audio settings.\n    *\n    * @method setupAudioSettings\n    * @param {Object} settings - Current game settings.\n    ###\n    setupAudioSettings: (settings) ->\n        AudioManager.generalSoundVolume = settings.seVolume\n        AudioManager.generalMusicVolume = settings.bgmVolume\n        AudioManager.generalVoiceVolume = settings.voiceVolume\n\n    ###*\n    * Sets up video settings.\n    *\n    * @method setupVideoSettings\n    * @param {Object} settings - Current game settings.\n    ###\n    setupVideoSettings: (settings) ->\n        settings.renderer = 1\n        Graphics.keepRatio = !settings.adjustAspectRatio\n        Graphics.onResize()\n\n    ###*\n    * Sets up settings.\n    *\n    * @method setupSettings\n    ###\n    setupSettings: ->\n        settings = @getSettings()\n\n        @setupGlobalData()\n        @setupGameSettings(settings)\n        @setupAudioSettings(settings)\n        @setupVideoSettings(settings)\n\n\n        GameStorage.setObject(\"settings\", settings)\n\n    ###*\n    * Loads all system resources needed to start the actual game.\n    *\n    * @method load\n    * @param {Function} callback - Called when all system resources are loaded.\n    ###\n    load: (callback) ->\n        @loadSystemData()\n\n        DataManager.events.on \"loaded\", =>\n            GameManager.tempFields = new gs.GameTemp()\n            window.$tempFields = GameManager.tempFields\n\n            if @languagesLoaded\n                RecordManager.initialize()\n                LanguageManager.initialize()\n                SceneManager.initialize()\n                @setupSettings()\n            else\n                @loadData()\n\n            if @languagesLoaded\n                @loadSystemResources()\n                DataManager.events.off \"loaded\"\n                ResourceManager.events.on \"loaded\", =>\n                    GameManager.setupCursor()\n                    ResourceManager.events.off \"loaded\"\n                    ui.UIManager.setup()\n                    callback()\n\n            @languagesLoaded = yes\n\n\n    ###*\n    * Sets up the application.\n    *\n    * @method setupApplication\n    ###\n    setupApplication: ->\n        $PARAMS.showDebugInfo = no\n        window.ResourceManager = new window.ResourceManager()\n        window.DataManager = new window.DataManager()\n\n        # Force OpenGL renderer\n        window.Graphics = new Graphics_OpenGL()\n        window.gs.Graphics = window.Graphics\n        window.Renderer = window.Renderer_OpenGL\n\n        # Force linear filtering\n        Texture2D.filter = 1\n\n    ###*\n    * Initializes the input system to enable support for keyboard, mouse, touch, etc.\n    *\n    * @method setupInput\n    ###\n    setupInput: ->\n        Input.initialize()\n        Input.Mouse.initialize()\n\n    ###*\n    * Initializes the video system with the game's resolution. It is necessary to\n    * call this method before using graphic object such as bitmaps, sprites, etc.\n    *\n    * @method setupVideo\n    ###\n    setupVideo: ->\n        @frameCallback = @createFrameCallback()\n\n        Graphics.initialize($PARAMS.resolution.width, $PARAMS.resolution.height)\n        #Graphics.onFocusReceive = => GameManager.tempSettings.skip = no\n        Graphics.onDispose = => ResourceManager.dispose()\n        Graphics.formats = [320, 384, 427]\n        Graphics.scale = 0.5 / 240 * Graphics.height\n        Font.defaultSize = Math.round(9 / 240 * Graphics.height)\n\n        Graphics.onEachFrame(@frameCallback)\n\n    ###*\n    * Registers shader-based effects. It is important to register all effects\n    * before the graphics system is initialized.\n    *\n    * @method setupEffects\n    ###\n    setupEffects: ->\n        # Register built-in LOD/Box Blur effect\n        gs.Effect.registerEffect(gs.Effect.fragmentShaderInfos.lod_blur)\n        # Register built-in pixelate effect\n        gs.Effect.registerEffect(gs.Effect.fragmentShaderInfos.pixelate)\n\n        # This is an example of how to register your own shader-effect.\n        # See Effects > CircularDistortionEffect script for more info.\n        # gs.CircularDistortionEffect.register()\n    ###*\n    * Initializes the Live2D. If Live2D is not available, it does nothing. Needs to be\n    * called before using Live2D.\n    *\n    * @method setupLive2D\n    ###\n    setupLive2D: ->\n        Live2D.init()\n        Live2D.setGL($gl)\n        Live2DFramework.setPlatformManager(new L2DPlatformManager())\n\n    ###*\n    * Creates the frame-callback function called once per frame to update and render\n    * the game.\n    *\n    * @method setupLive2D\n    * @return {Function} The frame-callback function.\n    ###\n    createFrameCallback: ->\n        callback = null\n\n        if $PARAMS.preview? or ($PARAMS.testOffline && window.parent != window)\n            callback = (time) =>\n                try\n                    if $PARAMS.preview && !$PARAMS.preview.error\n                        @updateFrame()\n                catch ex\n                    if $PARAMS.preview or GameManager.inLivePreview\n                        $PARAMS.preview = error: ex\n                    console.log(ex)\n        else\n            callback = (time) => @updateFrame()\n\n        return callback\n\n    ###*\n    * Creates the start scene object. If an intro-scene is set, this method returns the\n    * intro-scene. If the game runs in Live-Preview, this method returns the selected\n    * scene in editor.\n    *\n    * @method createStartScene\n    * @return {gs.Object_Base} The start-scene.\n    ###\n    createStartScene: ->\n        scene = null\n        introScene = null\n\n        if RecordManager.system.useIntroScene\n            introScene = DataManager.getDocumentSummary(RecordManager.system.introInfo?.scene?.uid)\n\n        if $PARAMS.preview or introScene\n            scene = new vn.Object_Scene()\n            scene.sceneData.uid = $PARAMS.preview?.scene.uid || RecordManager.system.introInfo?.scene?.uid\n            scene.events.on \"dispose\", (e) -> GameManager.sceneData.uid = null\n        else if LanguageManager.languages.length > 1\n            scene = new gs.Object_Layout(\"languageMenuLayout\")\n        else\n            scene = new gs.Object_Layout(\"titleLayout\")\n\n        return scene\n\n    ###*\n    * Boots the game by setting up the application window as well as the video, audio and input system.\n    *\n    * @method start\n    ###\n    start: ->\n        @setupApplication()\n        @setupEffects()\n        @setupVideo()\n        @setupLive2D()\n        @setupInput()\n\n        @load => SceneManager.switchTo(@createStartScene())\n\n\n# The entry point of the game.\ngs.Main = new Main()\ngs.Application.initialize()\ngs.Application.onReady = ->\n    # Add meta data to all class objects necessary for object serialization.\n    Object.keys(gs).forEach (k) -> gs[k].$namespace = \"gs\"; gs[k].$name = k\n    Object.keys(vn).forEach (k) -> vn[k].$namespace = \"vn\"; vn[k].$name = k\n    Object.keys(ui).forEach (k) -> ui[k].$namespace = \"ui\"; ui[k].$name = k\n\n    gs.Main.start()\n\n\n\n\n\n",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Main;\n\n  Main = (function() {\n\n    /**\n    * Controls the boot-process of the game.\n    *\n    * @module gs\n    * @class Main\n    * @memberof gs\n    * @constructor\n     */\n    function Main() {\n      window.$ = jQuery.noConflict();\n      this.languagesLoaded = false;\n      this.frameCallback = null;\n    }\n\n\n    /**\n    * Updates the current frame.\n    *\n    * @method updateFrame\n     */\n\n    Main.prototype.updateFrame = function() {\n      if ($PARAMS.showDebugInfo) {\n        window.startTime = window.performance != null ? window.performance.now() : Date.now();\n      }\n      SceneManager.update();\n      Graphics.frameCount++;\n      if ($PARAMS.showDebugInfo) {\n        if (this.debugSprite == null) {\n          this.debugSprite = new Sprite_Debug();\n        }\n        window.endTime = window.performance != null ? window.performance.now() : Date.now();\n        if (Graphics.frameCount % 30 === 0) {\n          this.debugSprite.frameTime = endTime - startTime;\n          return this.debugSprite.redraw();\n        }\n      }\n    };\n\n\n    /**\n    * Loads game data.\n    *\n    * @method loadData\n     */\n\n    Main.prototype.loadData = function() {\n      RecordManager.load();\n      DataManager.getDocumentsByType(\"global_variables\");\n      DataManager.getDocumentsByType(\"language_profile\");\n      return DataManager.getDocumentsByType(\"vn.chapter\");\n    };\n\n\n    /**\n    * Loads system data.\n    *\n    * @method loadSystemData\n     */\n\n    Main.prototype.loadSystemData = function() {\n      DataManager.getDocument(\"RESOURCES\");\n      return DataManager.getDocument(\"SUMMARIES\");\n    };\n\n\n    /**\n    * Loads system resources such as graphics, sounds, fonts, etc.\n    *\n    * @method loadSystemResources\n     */\n\n    Main.prototype.loadSystemResources = function() {\n      var j, language, len, ref, ref1, ref2;\n      ResourceManager.loadFonts();\n      ResourceLoader.loadSystemSounds(RecordManager.system);\n      ResourceLoader.loadSystemGraphics(RecordManager.system);\n      ref = LanguageManager.languages;\n      for (j = 0, len = ref.length; j < len; j++) {\n        language = ref[j];\n        if (((ref1 = language.icon) != null ? (ref2 = ref1.name) != null ? ref2.length : void 0 : void 0) > 0) {\n          ResourceManager.getBitmap(\"Graphics/Icons/\" + language.icon.name);\n        }\n      }\n      return gs.Fonts.initialize();\n    };\n\n\n    /**\n    * Gets game settings.\n    *\n    * @method getSettings\n     */\n\n    Main.prototype.getSettings = function() {\n      var settings;\n      settings = GameStorage.getObject(\"settings\");\n      if ((settings == null) || settings.version !== 342) {\n        GameManager.resetSettings();\n        settings = GameManager.settings;\n      }\n      return settings;\n    };\n\n\n    /**\n    * Sets up the game's global data. If it is outdated, this method will\n    * reset the global game data.\n    *\n    * @method setupGlobalData\n     */\n\n    Main.prototype.setupGlobalData = function() {\n      var globalData;\n      globalData = GameStorage.getObject(\"globalData\");\n      GameManager.globalData = globalData;\n      if (!globalData || globalData.version !== 342) {\n        return GameManager.resetGlobalData();\n      }\n    };\n\n\n    /**\n    * Sets up game settings.\n    *\n    * @method setupGameSettings\n    * @param {Object} settings - Current game settings.\n     */\n\n    Main.prototype.setupGameSettings = function(settings) {\n      var cg, character, i, j, l, len, len1, ref, ref1, results;\n      GameManager.settings = settings;\n      GameManager.settings.fullScreen = Graphics.isFullscreen();\n      ref = RecordManager.charactersArray;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        character = ref[i];\n        if (character && !GameManager.settings.voicesByCharacter[character.index]) {\n          GameManager.settings.voicesByCharacter[character.index] = 100;\n        }\n      }\n      ref1 = RecordManager.cgGalleryArray;\n      results = [];\n      for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {\n        cg = ref1[i];\n        if ((cg != null) && !GameManager.globalData.cgGallery[cg.index]) {\n          results.push(GameManager.globalData.cgGallery[cg.index] = {\n            unlocked: false\n          });\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Sets up audio settings.\n    *\n    * @method setupAudioSettings\n    * @param {Object} settings - Current game settings.\n     */\n\n    Main.prototype.setupAudioSettings = function(settings) {\n      AudioManager.generalSoundVolume = settings.seVolume;\n      AudioManager.generalMusicVolume = settings.bgmVolume;\n      return AudioManager.generalVoiceVolume = settings.voiceVolume;\n    };\n\n\n    /**\n    * Sets up video settings.\n    *\n    * @method setupVideoSettings\n    * @param {Object} settings - Current game settings.\n     */\n\n    Main.prototype.setupVideoSettings = function(settings) {\n      settings.renderer = 1;\n      Graphics.keepRatio = !settings.adjustAspectRatio;\n      return Graphics.onResize();\n    };\n\n\n    /**\n    * Sets up settings.\n    *\n    * @method setupSettings\n     */\n\n    Main.prototype.setupSettings = function() {\n      var settings;\n      settings = this.getSettings();\n      this.setupGlobalData();\n      this.setupGameSettings(settings);\n      this.setupAudioSettings(settings);\n      this.setupVideoSettings(settings);\n      return GameStorage.setObject(\"settings\", settings);\n    };\n\n\n    /**\n    * Loads all system resources needed to start the actual game.\n    *\n    * @method load\n    * @param {Function} callback - Called when all system resources are loaded.\n     */\n\n    Main.prototype.load = function(callback) {\n      this.loadSystemData();\n      return DataManager.events.on(\"loaded\", (function(_this) {\n        return function() {\n          GameManager.tempFields = new gs.GameTemp();\n          window.$tempFields = GameManager.tempFields;\n          if (_this.languagesLoaded) {\n            RecordManager.initialize();\n            LanguageManager.initialize();\n            SceneManager.initialize();\n            _this.setupSettings();\n          } else {\n            _this.loadData();\n          }\n          if (_this.languagesLoaded) {\n            _this.loadSystemResources();\n            DataManager.events.off(\"loaded\");\n            ResourceManager.events.on(\"loaded\", function() {\n              GameManager.setupCursor();\n              ResourceManager.events.off(\"loaded\");\n              ui.UIManager.setup();\n              return callback();\n            });\n          }\n          return _this.languagesLoaded = true;\n        };\n      })(this));\n    };\n\n\n    /**\n    * Sets up the application.\n    *\n    * @method setupApplication\n     */\n\n    Main.prototype.setupApplication = function() {\n      $PARAMS.showDebugInfo = false;\n      window.ResourceManager = new window.ResourceManager();\n      window.DataManager = new window.DataManager();\n      window.Graphics = new Graphics_OpenGL();\n      window.gs.Graphics = window.Graphics;\n      window.Renderer = window.Renderer_OpenGL;\n      return Texture2D.filter = 1;\n    };\n\n\n    /**\n    * Initializes the input system to enable support for keyboard, mouse, touch, etc.\n    *\n    * @method setupInput\n     */\n\n    Main.prototype.setupInput = function() {\n      Input.initialize();\n      return Input.Mouse.initialize();\n    };\n\n\n    /**\n    * Initializes the video system with the game's resolution. It is necessary to\n    * call this method before using graphic object such as bitmaps, sprites, etc.\n    *\n    * @method setupVideo\n     */\n\n    Main.prototype.setupVideo = function() {\n      this.frameCallback = this.createFrameCallback();\n      Graphics.initialize($PARAMS.resolution.width, $PARAMS.resolution.height);\n      Graphics.onDispose = (function(_this) {\n        return function() {\n          return ResourceManager.dispose();\n        };\n      })(this);\n      Graphics.formats = [320, 384, 427];\n      Graphics.scale = 0.5 / 240 * Graphics.height;\n      Font.defaultSize = Math.round(9 / 240 * Graphics.height);\n      return Graphics.onEachFrame(this.frameCallback);\n    };\n\n\n    /**\n    * Registers shader-based effects. It is important to register all effects\n    * before the graphics system is initialized.\n    *\n    * @method setupEffects\n     */\n\n    Main.prototype.setupEffects = function() {\n      gs.Effect.registerEffect(gs.Effect.fragmentShaderInfos.lod_blur);\n      return gs.Effect.registerEffect(gs.Effect.fragmentShaderInfos.pixelate);\n    };\n\n\n    /**\n    * Initializes the Live2D. If Live2D is not available, it does nothing. Needs to be\n    * called before using Live2D.\n    *\n    * @method setupLive2D\n     */\n\n    Main.prototype.setupLive2D = function() {\n      Live2D.init();\n      Live2D.setGL($gl);\n      return Live2DFramework.setPlatformManager(new L2DPlatformManager());\n    };\n\n\n    /**\n    * Creates the frame-callback function called once per frame to update and render\n    * the game.\n    *\n    * @method setupLive2D\n    * @return {Function} The frame-callback function.\n     */\n\n    Main.prototype.createFrameCallback = function() {\n      var callback;\n      callback = null;\n      if (($PARAMS.preview != null) || ($PARAMS.testOffline && window.parent !== window)) {\n        callback = (function(_this) {\n          return function(time) {\n            var ex;\n            try {\n              if ($PARAMS.preview && !$PARAMS.preview.error) {\n                return _this.updateFrame();\n              }\n            } catch (error) {\n              ex = error;\n              if ($PARAMS.preview || GameManager.inLivePreview) {\n                $PARAMS.preview = {\n                  error: ex\n                };\n              }\n              return console.log(ex);\n            }\n          };\n        })(this);\n      } else {\n        callback = (function(_this) {\n          return function(time) {\n            return _this.updateFrame();\n          };\n        })(this);\n      }\n      return callback;\n    };\n\n\n    /**\n    * Creates the start scene object. If an intro-scene is set, this method returns the\n    * intro-scene. If the game runs in Live-Preview, this method returns the selected\n    * scene in editor.\n    *\n    * @method createStartScene\n    * @return {gs.Object_Base} The start-scene.\n     */\n\n    Main.prototype.createStartScene = function() {\n      var introScene, ref, ref1, ref2, ref3, ref4, scene;\n      scene = null;\n      introScene = null;\n      if (RecordManager.system.useIntroScene) {\n        introScene = DataManager.getDocumentSummary((ref = RecordManager.system.introInfo) != null ? (ref1 = ref.scene) != null ? ref1.uid : void 0 : void 0);\n      }\n      if ($PARAMS.preview || introScene) {\n        scene = new vn.Object_Scene();\n        scene.sceneData.uid = ((ref2 = $PARAMS.preview) != null ? ref2.scene.uid : void 0) || ((ref3 = RecordManager.system.introInfo) != null ? (ref4 = ref3.scene) != null ? ref4.uid : void 0 : void 0);\n        scene.events.on(\"dispose\", function(e) {\n          return GameManager.sceneData.uid = null;\n        });\n      } else if (LanguageManager.languages.length > 1) {\n        scene = new gs.Object_Layout(\"languageMenuLayout\");\n      } else {\n        scene = new gs.Object_Layout(\"titleLayout\");\n      }\n      return scene;\n    };\n\n\n    /**\n    * Boots the game by setting up the application window as well as the video, audio and input system.\n    *\n    * @method start\n     */\n\n    Main.prototype.start = function() {\n      this.setupApplication();\n      this.setupEffects();\n      this.setupVideo();\n      this.setupLive2D();\n      this.setupInput();\n      return this.load((function(_this) {\n        return function() {\n          return SceneManager.switchTo(_this.createStartScene());\n        };\n      })(this));\n    };\n\n    return Main;\n\n  })();\n\n  gs.Main = new Main();\n\n  gs.Application.initialize();\n\n  gs.Application.onReady = function() {\n    Object.keys(gs).forEach(function(k) {\n      gs[k].$namespace = \"gs\";\n      return gs[k].$name = k;\n    });\n    Object.keys(vn).forEach(function(k) {\n      vn[k].$namespace = \"vn\";\n      return vn[k].$name = k;\n    });\n    Object.keys(ui).forEach(function(k) {\n      ui[k].$namespace = \"ui\";\n      return ui[k].$name = k;\n    });\n    return gs.Main.start();\n  };\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}