{
    "uid": "4C5917AAK0FD4A457ES869CEB180950AC2D4",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_UIElement",
        "type": "game_script",
        "order": 0,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_UIElement\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_UIElement extends gs.Object_Base\n    #\n    # The UI object's image used for visual presentation.\n    # @property image\n    # @type string\n    #\n    @accessors \"image\", \n        set: (image) ->\n            if image != @image_\n                @image_ = image\n                @needsUpdate = yes\n        get: -> @image_\n        \n    #\n    # The UI object's image used for visual presentation.\n    # @property image\n    # @type string\n    #\n    @accessors \"opacity\", \n        set: (opacity) ->\n            if opacity != @opacity_\n                @opacity_ = opacity\n                @needsUpdate = yes\n        get: -> @opacity_\n        \n    #\n    # The UI object's image used for visual presentation.\n    # @property image\n    # @type string\n    #\n    @accessors \"clipRect\", \n        set: (clipRect) ->\n            if clipRect != @clipRect_\n                @clipRect_ = clipRect\n                @needsUpdate = yes\n        get: -> @clipRect_\n     \n \n    @accessors \"visible\", \n        set: (v) -> \n            if v != @visible_\n                @visible_ = v\n                @needsUpdate = yes\n                @fullRefresh()\n            \n        get: -> @visible_ and (!@parent or @parent.visible)\n        \n    \n    \n    ###*\n    * The base class for all In-Game UI objects.\n    *\n    * @module ui\n    * @class Object_UIElement\n    * @extends gs.Object_Base\n    * @memberof ui\n    * @constructor\n    ###        \n    constructor: ->\n        super()\n        \n        @id = \"\"\n        \n        ###*\n        * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object\n        * will not change any binding-targets for the current binding-execution period.\n        * @property breakBindingChain\n        * @type boolean\n        ###\n        @breakBindingChain = no\n        @numbers = new Array(10)\n        @data = new Array(10)\n        @controlsByStyle = new Array(ui.UIManager.stylesById.length)\n        @parentsByStyle = new Array(ui.UIManager.stylesById.length)\n        @styles = []\n        @activeStyles = []\n        @focusable = no\n        \n        ###*\n        * The UI object's destination rectangle on screen.\n        * @property dstRect\n        * @type ui.Component_UIElementRectangle\n        ###\n        @dstRect = new ui.UIElementRectangle(this)\n        \n        ###*\n        * The UI object's margin. The margin defines an extra space around the UI object. \n        * The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n        * @property margin\n        * @type ui.Space\n        ###\n        @margin = new ui.Space(0, 0, 0, 0)\n        \n        ###*\n        * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n        * @property padding\n        * @type ui.Space\n        ###\n        @padding = new ui.Space(0, 0, 0, 0)\n        \n        ###*\n        * The UI object's alignment.\n        * @property alignment\n        * @type ui.Alignment\n        ###\n        @alignment = 0\n        \n        ###*\n        * Indicates if the UI object is visible on screen.\n        * @property visible\n        * @type boolean\n        ###\n        @visible = yes\n        \n        ###*\n        * Indicates if the UI object is enabled and responds to user actions.\n        * @property enabled\n        * @type boolean\n        ###\n        @enabled = yes\n        \n        ###*\n        * The UI object's origin.\n        * @property origin\n        * @type gs.Vector2\n        ###\n        @origin = new ui.UIElementPoint(this) #x: 0, y: 0\n        \n        ###*\n        * The UI object's offset.\n        * @property offset\n        * @type gs.Vector2\n        ###\n        @offset = new ui.UIElementPoint(this) #x: 0, y: 0\n        \n        ###*\n        * The UI object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.\n        * @property opacity\n        * @type number\n        ###\n        @opacity = 255\n        \n        ###*\n        * The UI object's resize behavior.\n        * @property resizable\n        * @type boolean\n        ###\n        @resizable = no\n        \n        ###*\n        * The UI object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner\n        * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1\n        * places the object with its lower-right corner.\n        * @property anchor\n        * @type gs.Point\n        ###\n        @anchor = new gs.Point(0.0, 0.0)\n        \n        ###*\n        * The UI object's zoom-setting for x and y axis. The default value is\n        * { x: 1.0, y: 1.0 }\n        * @property zoom\n        * @type gs.Point\n        ###\n        @zoom = new gs.Point(1.0, 1.0)\n        \n        ###*\n        * The UI object's color.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = new Color(255, 255, 255, 0)\n        @tone = new Tone(0, 0, 0, 0)\n        \n        ###*\n        * The UI object's rotation-angle in degrees. The rotation center depends on the\n        * anchor-point.\n        * @property angle\n        * @type number\n        ###\n        @angle = 0\n        \n        ###*\n        * The UI object's mask for masking-effects.\n        * @property mask\n        * @type gs.Mask\n        ###\n        @mask = new gs.Mask()\n        \n        ###*\n        * An event-emitter to emit events.\n        * @property events\n        * @type gs.Component_EventEmitter\n        ###\n        @events = new gs.EventEmitter()\n        \n        ###*\n        * The update-behavior of the UI object. The default is ui.UpdateBehavior.NORMAL.\n        * @property updateBehavior\n        * @type ui.UpdateBehavior\n        ###\n        @updateBehavior = ui.UpdateBehavior.NORMAL\n        \n        ###*\n        * @property image_\n        * @type string\n        * @protected\n        ###\n        @image_ = null\n        \n        ###*\n        * The object's clip-rect for visual presentation.\n        * @property clipRect_\n        * @type gs.Rect\n        * @protected\n        ###\n        @clipRect_ = null\n        \n        ###*\n        * @property visible_\n        * @type boolean\n        * @protected\n        ###\n        @visible_ = yes\n        \n        @addComponent(@events)\n       \n     \n    ###*\n    * Restores the object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n    ###   \n    restore: (data) ->\n        @anchor = new gs.Point(data.anchor.x, data.anchor.y)\n        @offset = new gs.Point(data.offset.x, data.offset.y)\n        @dstRect.x = data.x\n        @dstRect.y = data.y\n        @opacity = data.opacity\n        @zoom = new gs.Point(data.zoom.x, data.zoom.y)\n        @angle = data.angle\n        @zIndex = data.zIndex\n        @visible_ = data.visible\n        @rid = data.rid\n        \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###   \n    toDataBundle: -> \n        return {\n            rid: @rid, \n            x: @dstRect.x, \n            y: @dstRect.y,\n            opacity: @opacity,\n            zoom: @zoom,\n            angle: @angle,\n            anchor: { x: @anchor.x, y: @anchor.y },\n            zIndex: @zIndex,\n            offset: { x: @offset.x, y: @offset.y },\n            visible: @visible_\n        }\n        \nui.Object_UIElement = Object_UIElement",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_UIElement,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_UIElement = (function(superClass) {\n    extend(Object_UIElement, superClass);\n\n    Object_UIElement.accessors(\"image\", {\n      set: function(image) {\n        if (image !== this.image_) {\n          this.image_ = image;\n          return this.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.image_;\n      }\n    });\n\n    Object_UIElement.accessors(\"opacity\", {\n      set: function(opacity) {\n        if (opacity !== this.opacity_) {\n          this.opacity_ = opacity;\n          return this.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.opacity_;\n      }\n    });\n\n    Object_UIElement.accessors(\"clipRect\", {\n      set: function(clipRect) {\n        if (clipRect !== this.clipRect_) {\n          this.clipRect_ = clipRect;\n          return this.needsUpdate = true;\n        }\n      },\n      get: function() {\n        return this.clipRect_;\n      }\n    });\n\n    Object_UIElement.accessors(\"visible\", {\n      set: function(v) {\n        if (v !== this.visible_) {\n          this.visible_ = v;\n          this.needsUpdate = true;\n          return this.fullRefresh();\n        }\n      },\n      get: function() {\n        return this.visible_ && (!this.parent || this.parent.visible);\n      }\n    });\n\n\n    /**\n    * The base class for all In-Game UI objects.\n    *\n    * @module ui\n    * @class Object_UIElement\n    * @extends gs.Object_Base\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_UIElement() {\n      Object_UIElement.__super__.constructor.call(this);\n      this.id = \"\";\n\n      /**\n      * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object\n      * will not change any binding-targets for the current binding-execution period.\n      * @property breakBindingChain\n      * @type boolean\n       */\n      this.breakBindingChain = false;\n      this.numbers = new Array(10);\n      this.data = new Array(10);\n      this.controlsByStyle = new Array(ui.UIManager.stylesById.length);\n      this.parentsByStyle = new Array(ui.UIManager.stylesById.length);\n      this.styles = [];\n      this.activeStyles = [];\n      this.focusable = false;\n\n      /**\n      * The UI object's destination rectangle on screen.\n      * @property dstRect\n      * @type ui.Component_UIElementRectangle\n       */\n      this.dstRect = new ui.UIElementRectangle(this);\n\n      /**\n      * The UI object's margin. The margin defines an extra space around the UI object. \n      * The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n      * @property margin\n      * @type ui.Space\n       */\n      this.margin = new ui.Space(0, 0, 0, 0);\n\n      /**\n      * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n      * @property padding\n      * @type ui.Space\n       */\n      this.padding = new ui.Space(0, 0, 0, 0);\n\n      /**\n      * The UI object's alignment.\n      * @property alignment\n      * @type ui.Alignment\n       */\n      this.alignment = 0;\n\n      /**\n      * Indicates if the UI object is visible on screen.\n      * @property visible\n      * @type boolean\n       */\n      this.visible = true;\n\n      /**\n      * Indicates if the UI object is enabled and responds to user actions.\n      * @property enabled\n      * @type boolean\n       */\n      this.enabled = true;\n\n      /**\n      * The UI object's origin.\n      * @property origin\n      * @type gs.Vector2\n       */\n      this.origin = new ui.UIElementPoint(this);\n\n      /**\n      * The UI object's offset.\n      * @property offset\n      * @type gs.Vector2\n       */\n      this.offset = new ui.UIElementPoint(this);\n\n      /**\n      * The UI object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.\n      * @property opacity\n      * @type number\n       */\n      this.opacity = 255;\n\n      /**\n      * The UI object's resize behavior.\n      * @property resizable\n      * @type boolean\n       */\n      this.resizable = false;\n\n      /**\n      * The UI object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner\n      * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1\n      * places the object with its lower-right corner.\n      * @property anchor\n      * @type gs.Point\n       */\n      this.anchor = new gs.Point(0.0, 0.0);\n\n      /**\n      * The UI object's zoom-setting for x and y axis. The default value is\n      * { x: 1.0, y: 1.0 }\n      * @property zoom\n      * @type gs.Point\n       */\n      this.zoom = new gs.Point(1.0, 1.0);\n\n      /**\n      * The UI object's color.\n      * @property color\n      * @type gs.Color\n       */\n      this.color = new Color(255, 255, 255, 0);\n      this.tone = new Tone(0, 0, 0, 0);\n\n      /**\n      * The UI object's rotation-angle in degrees. The rotation center depends on the\n      * anchor-point.\n      * @property angle\n      * @type number\n       */\n      this.angle = 0;\n\n      /**\n      * The UI object's mask for masking-effects.\n      * @property mask\n      * @type gs.Mask\n       */\n      this.mask = new gs.Mask();\n\n      /**\n      * An event-emitter to emit events.\n      * @property events\n      * @type gs.Component_EventEmitter\n       */\n      this.events = new gs.EventEmitter();\n\n      /**\n      * The update-behavior of the UI object. The default is ui.UpdateBehavior.NORMAL.\n      * @property updateBehavior\n      * @type ui.UpdateBehavior\n       */\n      this.updateBehavior = ui.UpdateBehavior.NORMAL;\n\n      /**\n      * @property image_\n      * @type string\n      * @protected\n       */\n      this.image_ = null;\n\n      /**\n      * The object's clip-rect for visual presentation.\n      * @property clipRect_\n      * @type gs.Rect\n      * @protected\n       */\n      this.clipRect_ = null;\n\n      /**\n      * @property visible_\n      * @type boolean\n      * @protected\n       */\n      this.visible_ = true;\n      this.addComponent(this.events);\n    }\n\n\n    /**\n    * Restores the object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n     */\n\n    Object_UIElement.prototype.restore = function(data) {\n      this.anchor = new gs.Point(data.anchor.x, data.anchor.y);\n      this.offset = new gs.Point(data.offset.x, data.offset.y);\n      this.dstRect.x = data.x;\n      this.dstRect.y = data.y;\n      this.opacity = data.opacity;\n      this.zoom = new gs.Point(data.zoom.x, data.zoom.y);\n      this.angle = data.angle;\n      this.zIndex = data.zIndex;\n      this.visible_ = data.visible;\n      return this.rid = data.rid;\n    };\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_UIElement.prototype.toDataBundle = function() {\n      return {\n        rid: this.rid,\n        x: this.dstRect.x,\n        y: this.dstRect.y,\n        opacity: this.opacity,\n        zoom: this.zoom,\n        angle: this.angle,\n        anchor: {\n          x: this.anchor.x,\n          y: this.anchor.y\n        },\n        zIndex: this.zIndex,\n        offset: {\n          x: this.offset.x,\n          y: this.offset.y\n        },\n        visible: this.visible_\n      };\n    };\n\n    return Object_UIElement;\n\n  })(gs.Object_Base);\n\n  ui.Object_UIElement = Object_UIElement;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}