{
    "uid": "502491DC8D02C346337BEF567513C3011397",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_ImageMap",
        "type": "game_script",
        "order": 14,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_ImageMap\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_ImageMap extends ui.Object_UIElement\n    @objectCodecBlackList = [\"parent\", \"target\", \"controlsByStyle\", \"parentsByStyle\", \"styles\", \"activeStyles\"]\n    \n    ###*\n    * An image-map UI object to display an image-map for UI interaction. \n    *\n    * @module ui\n    * @class Object_ImageMap\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n    ###\n    constructor: ->\n        super\n\n        ###*\n        * The names of the images used for the different states of the image-map.<br>\n        *\n        * - 0 = Ground Image\n        * - 1 = Hovered\n        * - 2 = Unselected\n        * - 3 = Selected\n        * - 4 = Selected Hovered\n        *\n        * @property images\n        * @type string[]\n        ###\n        @images = []\n        \n        ###*\n        * The hotspot data of the image-map. Each entry is a single hotspot on the image-map.\n        * @property hotspots\n        * @type gs.ImageMapHotspot[]\n        ###\n        @hotspots = []\n        \n        ###*\n        * The color tone of the object used for the visual presentation.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = new gs.Tone(0, 0, 0, 0)\n        \n        ###*\n        * The color of the object used for the visual presentation.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = new gs.Color(255, 255, 255, 0)\n        \n        ###*\n        * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type vn.Component_Animator\n        ###\n        @animator = new gs.Component_Animator()\n        \n        ###*\n        * The object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_ImageMap\n        ###\n        @visual = new gs.Component_ImageMap()\n        \n        @addComponent(@animator)\n        @addComponent(@visual)\n        @addComponent(@events)\n        \nui.Object_ImageMap = Object_ImageMap",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_ImageMap,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_ImageMap = (function(superClass) {\n    extend(Object_ImageMap, superClass);\n\n    Object_ImageMap.objectCodecBlackList = [\"parent\", \"target\", \"controlsByStyle\", \"parentsByStyle\", \"styles\", \"activeStyles\"];\n\n\n    /**\n    * An image-map UI object to display an image-map for UI interaction. \n    *\n    * @module ui\n    * @class Object_ImageMap\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_ImageMap() {\n      Object_ImageMap.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The names of the images used for the different states of the image-map.<br>\n      *\n      * - 0 = Ground Image\n      * - 1 = Hovered\n      * - 2 = Unselected\n      * - 3 = Selected\n      * - 4 = Selected Hovered\n      *\n      * @property images\n      * @type string[]\n       */\n      this.images = [];\n\n      /**\n      * The hotspot data of the image-map. Each entry is a single hotspot on the image-map.\n      * @property hotspots\n      * @type gs.ImageMapHotspot[]\n       */\n      this.hotspots = [];\n\n      /**\n      * The color tone of the object used for the visual presentation.\n      * @property tone\n      * @type gs.Tone\n       */\n      this.tone = new gs.Tone(0, 0, 0, 0);\n\n      /**\n      * The color of the object used for the visual presentation.\n      * @property color\n      * @type gs.Color\n       */\n      this.color = new gs.Color(255, 255, 255, 0);\n\n      /**\n      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type vn.Component_Animator\n       */\n      this.animator = new gs.Component_Animator();\n\n      /**\n      * The object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_ImageMap\n       */\n      this.visual = new gs.Component_ImageMap();\n      this.addComponent(this.animator);\n      this.addComponent(this.visual);\n      this.addComponent(this.events);\n    }\n\n    return Object_ImageMap;\n\n  })(ui.Object_UIElement);\n\n  ui.Object_ImageMap = Object_ImageMap;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}