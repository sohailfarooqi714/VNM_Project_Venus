{
    "uid": "C36C2E79K2769A40AES994EE16EAD26D7EC9",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_FreeLayoutBehavior",
        "type": "game_script",
        "order": 4,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_FreeLayoutBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_FreeLayoutBehavior extends gs.Component_LayoutBehavior\n    ###*\n    * Turns a game object into a free-layout and layouts all sub-objects\n    * at their specified positions. So that kind of layout allows each sub-object\n    * to be freely positioned.\n    * <br>\n    * In addition, each sub-object can have different alignment options.\n    *\n    * @module gs\n    * @class Component_FreeLayoutBehavior\n    * @extends gs.Component_LayoutBehavior\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: -> \n        super\n\n    ###*\n    * Sizes the layout to fit its content.\n    *\n    * @method sizeToFit\n    ### \n    sizeToFit: ->\n        rect = @object.dstRect\n        if @object.sizeToFit\n            for control in @object.subObjects\n                if !control.alignmentX\n                    rect.width = Math.max(control.margin.left + control.dstRect.width + control.margin.right, rect.width || 1)\n                if !control.alignmentY\n                    rect.height = Math.max(control.margin.top + control.dstRect.height + control.margin.bottom, rect.height || 1)\n    \n    ###*\n    * Updates a specified control.\n    *\n    * @method updateControl\n    * @protected\n    * @param {gs.Object_Base} control The control to update\n    ###         \n    updateControl: (control) ->\n        super\n        \n        rect = @object.dstRect\n        margin = control.margin\n\n        if control.alignmentX == 1\n            control.dstRect.x = (rect.width - (control.dstRect.width+margin.right+margin.left)) / 2\n        else if control.alignmentX == 2\n            control.dstRect.x = rect.width*@object.zoom.x - (control.dstRect.width + control.margin.right)*control.zoom.x \n     \n        if control.alignmentY == 1\n            control.dstRect.y = (rect.height*@object.zoom.y - (control.dstRect.height+margin.bottom+margin.top)*control.zoom.y) / 2\n        else if control.alignmentY == 2\n            control.dstRect.y = rect.height - (control.dstRect.height + control.margin.bottom)\n       \n        \n        \n    ###*\n    * Layouts the sub-objects.\n    *\n    * @method update\n    ###\n    update: ->\n        super\n        \n        for control, i in @object.subObjects\n            @updateControl(control)\n            \n        @sizeToFit()\n \n            \n        return null    \n        \ngs.Component_FreeLayoutBehavior = Component_FreeLayoutBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_FreeLayoutBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_FreeLayoutBehavior = (function(superClass) {\n    extend(Component_FreeLayoutBehavior, superClass);\n\n\n    /**\n    * Turns a game object into a free-layout and layouts all sub-objects\n    * at their specified positions. So that kind of layout allows each sub-object\n    * to be freely positioned.\n    * <br>\n    * In addition, each sub-object can have different alignment options.\n    *\n    * @module gs\n    * @class Component_FreeLayoutBehavior\n    * @extends gs.Component_LayoutBehavior\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_FreeLayoutBehavior() {\n      Component_FreeLayoutBehavior.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /**\n    * Sizes the layout to fit its content.\n    *\n    * @method sizeToFit\n     */\n\n    Component_FreeLayoutBehavior.prototype.sizeToFit = function() {\n      var control, j, len, rect, ref, results;\n      rect = this.object.dstRect;\n      if (this.object.sizeToFit) {\n        ref = this.object.subObjects;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          control = ref[j];\n          if (!control.alignmentX) {\n            rect.width = Math.max(control.margin.left + control.dstRect.width + control.margin.right, rect.width || 1);\n          }\n          if (!control.alignmentY) {\n            results.push(rect.height = Math.max(control.margin.top + control.dstRect.height + control.margin.bottom, rect.height || 1));\n          } else {\n            results.push(void 0);\n          }\n        }\n        return results;\n      }\n    };\n\n\n    /**\n    * Updates a specified control.\n    *\n    * @method updateControl\n    * @protected\n    * @param {gs.Object_Base} control The control to update\n     */\n\n    Component_FreeLayoutBehavior.prototype.updateControl = function(control) {\n      var margin, rect;\n      Component_FreeLayoutBehavior.__super__.updateControl.apply(this, arguments);\n      rect = this.object.dstRect;\n      margin = control.margin;\n      if (control.alignmentX === 1) {\n        control.dstRect.x = (rect.width - (control.dstRect.width + margin.right + margin.left)) / 2;\n      } else if (control.alignmentX === 2) {\n        control.dstRect.x = rect.width * this.object.zoom.x - (control.dstRect.width + control.margin.right) * control.zoom.x;\n      }\n      if (control.alignmentY === 1) {\n        return control.dstRect.y = (rect.height * this.object.zoom.y - (control.dstRect.height + margin.bottom + margin.top) * control.zoom.y) / 2;\n      } else if (control.alignmentY === 2) {\n        return control.dstRect.y = rect.height - (control.dstRect.height + control.margin.bottom);\n      }\n    };\n\n\n    /**\n    * Layouts the sub-objects.\n    *\n    * @method update\n     */\n\n    Component_FreeLayoutBehavior.prototype.update = function() {\n      var control, i, j, len, ref;\n      Component_FreeLayoutBehavior.__super__.update.apply(this, arguments);\n      ref = this.object.subObjects;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        control = ref[i];\n        this.updateControl(control);\n      }\n      this.sizeToFit();\n      return null;\n    };\n\n    return Component_FreeLayoutBehavior;\n\n  })(gs.Component_LayoutBehavior);\n\n  gs.Component_FreeLayoutBehavior = Component_FreeLayoutBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}