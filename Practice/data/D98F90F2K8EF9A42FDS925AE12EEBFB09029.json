{
    "uid": "D98F90F2K8EF9A42FDS925AE12EEBFB09029",
    "isLoaded": true,
    "lastModificationTime": 1426885735019,
    "items": {
        "name": "ResourceManager",
        "type": "game_script",
        "order": 4,
        "parentId": "C0268943K60B3A42B7SA6F1EDDCF2F642FD7",
        "content": "# ===================================================================\n#\n#   Script: ResourceManager\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass ResourceManagerContext\n    ###*\n    * If associated to a gs.ResourceManager, a resource context registers all loaded resources\n    * resources. If gs.ResourceManager needs to dispose resources, it will only dispose\n    * resource associated if the current context.\n    *\n    * By default, each game scene creates it's own resource context to only dispose resources\n    * created by itself.\n    *\n    * @module gs\n    * @class ResourceManager\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * All resources associated with this context.\n        * @property resources\n        * @type Object[]\n        * @readOnly\n        ###\n        @resources = []\n\n\n    ###*\n    * Converts the resource context into a data-bundle for serialization. The data-bundle will only contain\n    * the names of the resources associated with this context but not the resource-data itself.\n    * @method toDataBundle\n    * @return {string[]} An array of resource names associated with this context.\n    ###\n    toDataBundle: -> @resources.select (r) -> r.name\n\n    ###*\n    * Initializes the resource context from a data-bundle. Any already existing resource associations\n    * with this context will be deleted.\n    * @method fromDataBundle\n    ###\n    fromDataBundle: (data, resourcesByPath) -> @resources = data.select (n) -> name: n, data: resourcesByPath[n]\n\n    ###*\n    * Adds the specified resource to the context.\n    * @method add\n    * @param {string} name - A unique name for the resource like the file-path for example.\n    * @param {gs.Bitmap|gs.AudioBuffer|gs.Video|gs.Live2DModel} data - The resource data like a gs.Bitmap object for example.\n    ###\n    add: (name, resource) -> @resources.push({ name: name, data: resource })\n\n    ###*\n    * Removes the resource with the specified name from the context.\n    * @method remove\n    * @param {string} name - The name of the resource to remove. For Example: The file name.\n    ###\n    remove: (name) -> @resources.remove(@resources.first((r) -> r.name == name))\n\ngs.ResourceManagerContext = ResourceManagerContext\n\nclass ResourceManager\n    ###*\n    * Manages the resources of the game like graphics, audio, fonts, etc. It\n    * offers a lot of methods to easily access game resources and automatically\n    * caches them. So if an image is requested a second time it will be taken\n    * from the cache instead of loading it again.\n    *\n    * @module gs\n    * @class ResourceManager\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * Current resource context. All loaded resources will be associated with it. If current context\n        * is set to <b>null</b>, the <b>systemContext</b> is used instead.\n        * @property context\n        * @type gs.ResourceManagerContext\n        * @protected\n        ###\n        @context_ = null\n\n        ###*\n        * System resource context. All loaded system resources are associated with this context. Resources\n        * which are associated with the system context are not disposed until the game ends.\n        * @property context\n        * @type gs.ResourceManagerContext\n        ###\n        @systemContext = @createContext()\n\n        ###*\n        * Holds in-memory created bitmaps.\n        * @property customBitmapsByKey\n        * @type Object\n        * @protected\n        ###\n        @customBitmapsByKey = {}\n\n        ###*\n        * Caches resources by file path.\n        * @property resourcesByPath\n        * @type Object\n        * @protected\n        ###\n        @resourcesByPath = {}\n\n        ###*\n        * Caches resources by file path and HUE.\n        * @property resourcesByPath\n        * @type Object\n        * @protected\n        ###\n        @resourcesByPathHue = {}\n\n        ###*\n        * Stores all loaded resources.\n        * @property resources\n        * @type Object[]\n        ###\n        @resources = []\n\n        ###*\n        * Indicates if all requested resources are loaded.\n        * @property resourcesLoaded\n        * @type boolean\n        ###\n        @resourcesLoaded = true\n\n        ###*\n        * @property events\n        * @type gs.EventEmitter\n        ###\n        @events = new gs.EventEmitter()\n\n    ###*\n    * Current resource context. All loaded resources will be associated with it. If current context\n    * is set to <b>null</b>, the <b>systemContext</b> is used instead.\n    * @property context\n    * @type gs.ResourceManagerContext\n    ###\n    @accessors \"context\",\n        set: (v) -> @context_ = v\n        get: -> @context_ ? @systemContext\n\n    ###*\n    * Creates a new resource context. Use <b>context</b> to set the new created context\n    * as current context.\n    *\n    * @method createContext\n    ###\n    createContext: -> new gs.ResourceManagerContext()\n\n    ###*\n    * Disposes all bitmap resources associated with the current context.\n    *\n    * @method disposeBitmaps\n    ###\n    disposeBitmaps: ->\n        for resource in @context.resources\n            if resource.data instanceof gs.Bitmap\n                resource.data.dispose()\n                @resources.remove(@resources.first ((r) ->\n                    result = r.filePath == resource.data.filePath\n                    r.dispose() if result\n\n                    return result\n                ))\n                @resources.remove(resource.data)\n                if resource.name\n                    @resourcesByPath[resource.name] = null\n                    delete @resourcesByPath[resource.name]\n    ###*\n    * Disposes all video resources associated with the current context.\n    *\n    * @method disposeVideos\n    ###\n    disposeVideos: ->\n        for resource in @context.resources\n            if resource.data instanceof gs.Video\n                resource.data.dispose()\n                @resources.remove(resource.data)\n                @resourcesByPath[resource.name] = null\n                delete @resourcesByPath[resource.name]\n\n    ###*\n    * Disposes all audio resources associated with the current context.\n    *\n    * @method disposeAudio\n    ###\n    disposeAudio: ->\n        AudioManager.dispose(@context)\n\n        for resource in @context.resources\n            if resource.data instanceof GS.AudioBuffer or resource instanceof GS.AudioBufferStream\n                resource.data.dispose()\n                @resources.remove(resource.data)\n                @resourcesByPath[resource.name] = null\n                delete @resourcesByPath[resource.name]\n\n    ###*\n    * Disposes all Live2D resources associated with the current context.\n    *\n    * @method disposeLive2D\n    ###\n    disposeLive2D: ->\n        for resource in @context.resources\n            if resource.data instanceof gs.Live2DModel\n                resource.data.dispose()\n                @resources.remove(resource.data)\n                @resourcesByPath[resource.name] = null\n                delete @resourcesByPath[resource.name]\n\n    ###*\n    * Disposes all resources.\n    *\n    * @method dispose\n    ###\n    dispose: ->\n        @disposeBitmaps()\n        @disposeVideos()\n        @disposeAudio()\n        @disposeLive2D()\n\n        @context = @systemContext\n\n    ###*\n    * Loads all custom fonts in Graphics/Fonts folder.\n    *\n    * @method loadFonts\n    ###\n    loadFonts: ->\n        resource = { loaded: no }\n        @resources.push(resource)\n        @resourcesByPath[\"Graphics/Fonts\"] = resource\n\n        gs.Font.loadCustomFonts((error) =>\n            @resourcesByPath[\"Graphics/Fonts\"].loaded = yes\n            if error\n                @resourcesByPath[\"Graphics/Fonts\"].error = yes\n        )\n    ###*\n    * Gets a custom created bitmap by key.\n    *\n    * @method getCustomBitmap\n    * @param {String} key - The key for the bitmap to get.\n    * @return {gs.Bitmap} The bitmap or <b>null</b> if no bitmap exists for the specified key.\n    ###\n    getCustomBitmap: (key) ->\n        return @customBitmapsByKey[key]\n\n    ###*\n    * Sets a custom created bitmap for a specified key.\n    *\n    * @method setCustomBitmap\n    * @param {String} key - The key for the bitmap to set.\n    * @param {gs.Bitmap} bitmap - The bitmap to set.\n    ###\n    setCustomBitmap: (key, bitmap) ->\n        @customBitmapsByKey[key] = bitmap\n        if not bitmap.loaded?\n            @resources.push(bitmap)\n            @resourcesLoaded = false\n\n    ###*\n    * Adds a custom created bitmap to the resource manager.\n    *\n    * @method addCustomBitmap\n    * @param {gs.Bitmap} bitmap - The bitmap to add.\n    ###\n    addCustomBitmap: (bitmap) ->\n        @context.resources.push(name: \"\", data: bitmap)\n\n    ###*\n    * Gets a Live2D model.\n    *\n    * @method getLive2DModel\n    * @param {String} filePath - Path to the Live2D model file.\n    * @return {gs.Live2DModel} The Live2D model or <b>null</b> if no model exists at the specified file path.\n    ###\n    getLive2DModel: (filePath) ->\n        result = @resourcesByPath[filePath]\n\n        if not result? or result.disposed\n            profile = LanguageManager.profile\n            result = new gs.Live2DModel(filePath, (if profile? and profile.items? then profile.items.code else null))\n            @resourcesByPath[filePath] = result\n            @resources.push(result)\n            @resourcesLoaded = false\n            @context.resources.push(name: filePath, data: result)\n\n        return result\n\n    ###*\n    * Gets a font.\n    *\n    * @method getFont\n    * @param {String} name - The name of the font to get.\n    * @param {number} size - The size of the font to get.\n    * @return {gs.Font} The font or <b>null</b> if no font with the specified name exists.\n    ###\n    getFont: (name, size) ->\n        result = new Font(name, size)\n\n        @resources.push(result)\n        @resourcesLoaded = false\n\n        return result\n\n    ###*\n    * Gets a video.\n    *\n    * @method getVideo\n    * @param {String} filePath - Path to the video file.\n    * @return {gs.Video} The video or <b>null</b> if no video exists at the specified file path.\n    ###\n    getVideo: (filePath) ->\n        if filePath.endsWith(\"/\") then return null\n\n        result = @resourcesByPath[filePath]\n\n        if not result? or result.disposed\n            profile = LanguageManager.profile\n            result = new gs.Video(filePath, (if profile? and profile.items? then profile.items.code else null))\n            @resourcesByPath[filePath] = result\n            @resources.push(result)\n            @resourcesLoaded = false\n            @context.resources.push(name: filePath, data: result)\n\n        return result\n\n    ###*\n    * Gets a bitmap.\n    *\n    * @method getBitmap\n    * @param {String} filePath - Path to the bitmap file.\n    * @param {number} hue - The bitmap's hue. The bitmap will be loaded and then recolored.\n    * @return {gs.Bitmap} The bitmap or <b>null</b> if no bitmap exists at the specified file path.\n    ###\n    getBitmap: (filePath, hue) ->\n        if filePath.endsWith(\"/\") then return null\n\n        hue = hue || 0\n        result = @resourcesByPath[filePath] || @customBitmapsByKey[filePath]\n\n        if not result?\n            profile = LanguageManager.profile\n            result = new Bitmap(filePath, (if profile? and profile.items? then profile.items.code else null), no)\n            result.hue = hue\n            result.filePath = filePath\n            @resourcesByPath[filePath] = result\n            @resources.push(result)\n            @resourcesLoaded = false\n            @context.resources.push(name: filePath, data: result)\n        else if not result.loaded and result.hue != hue\n            profile = LanguageManager.profile\n            result = new Bitmap(filePath, (if profile? and profile.items? then profile.items.code else null))\n            result.hue = hue\n            result.filePath = filePath\n            @resources.push(result)\n            @resourcesLoaded = false\n        else if hue > 0\n            hueBitmap = @resourcesByPathHue[filePath+\"@\"+hue]\n            if not hueBitmap? and result.loaded\n                hueBitmap = new Bitmap(result.image)\n                hueBitmap.changeHue(hue)\n                @resourcesByPathHue[filePath+\"@\"+hue] = hueBitmap\n            if hueBitmap? then result = hueBitmap\n\n        return result\n\n    ###*\n    * Gets an HTML image.\n    *\n    * @method getImage\n    * @param {String} filePath - Path to the image file.\n    * @return {HTMLImageElement} The image or <b>null</b> if no image exists at the specified file path.\n    ###\n    getImage: (filePath) ->\n        result = @resourcesByPath[filePath]\n\n        if not result?\n            result = new Bitmap(\"resources/#{filePath}.png\");\n\n            @resourcesByPath[filePath] = result\n            @resources.push(result)\n            @resourcesLoaded = false\n\n        return result\n\n    ###*\n    * Gets an audio stream.\n    *\n    * @method getAudioStream\n    * @param {String} filePath - Path to the audio file.\n    * @return {gs.AudioBuffer} The audio buffer or <b>null</b> if no audio file exists at the specified file path.\n    ###\n    getAudioStream: (filePath) ->\n        result = @resourcesByPath[filePath]\n        profile = LanguageManager.profile\n        languageCode = if profile? and profile.items? then profile.items.code else null\n\n        if not result?\n            result = new GS.AudioBuffer(filePath)\n\n            @resourcesByPath[filePath] = result\n            @resources.push(result)\n            @resourcesLoaded = false\n\n            @context.resources.push(name: filePath, data: result)\n\n\n\n        return result\n\n    ###*\n    * Gets an audio buffer. The audio data is fully loaded and decoded in memory. It is recommeneded\n    * for sound effects but for a long background music, <b>getAudioStream</b> should be used instead. That is especially\n    * the case on mobile devices.\n    *\n    * @method getAudioBuffer\n    * @param {String} filePath - Path to the audio file.\n    * @return {gs.AudioBuffer} The audio buffer or <b>null</b> if no audio file exists at the specified file path.\n    ###\n    getAudioBuffer: (filePath) ->\n        result = @resourcesByPath[filePath]\n        profile = LanguageManager.profile\n        languageCode = if profile? and profile.items? then profile.items.code else null\n\n        if not result?\n            result = new GS.AudioBuffer(filePath)\n\n            @resourcesByPath[filePath] = result\n            @resources.push(result)\n            @resourcesLoaded = false\n\n            @context.resources.push(name: filePath, data: result)\n\n        return result\n\n    ###*\n    * Updates the loading process. Needs to be called once per frame to keep\n    * the ResourceManager up to date.\n    *\n    * @method update\n    ###\n    update: ->\n        if not @events? then @events = new gs.EventEmitter()\n        if not @resourcesLoaded\n            @resourcesLoaded = true\n            for i in [0...@resources.length]\n                if not @resources[i].loaded\n                    @resourcesLoaded = false\n                    break\n                else if @resources[i].hue? and @resources[i].hue > 0\n                    bitmap = new Bitmap(@resources[i].image)\n\n                    @resourcesByPath[@resources[i].filePath] = bitmap\n                    @resources[i].changeHue(@resources[i].hue)\n                    @resourcesByPathHue[@resources[i].filePath+\"@\"+@resources[i].hue] = @resources[i]\n                    delete @resources[i].filePath\n                    delete @resources[i].hue\n            if @resourcesLoaded\n                @events.emit(\"loaded\", this)\n\n        return null\n\nwindow.ResourceManager = ResourceManager\ngs.ResourceManager = ResourceManager",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var ResourceManager, ResourceManagerContext;\n\n  ResourceManagerContext = (function() {\n\n    /**\n    * If associated to a gs.ResourceManager, a resource context registers all loaded resources\n    * resources. If gs.ResourceManager needs to dispose resources, it will only dispose\n    * resource associated if the current context.\n    *\n    * By default, each game scene creates it's own resource context to only dispose resources\n    * created by itself.\n    *\n    * @module gs\n    * @class ResourceManager\n    * @memberof gs\n    * @constructor\n     */\n    function ResourceManagerContext() {\n\n      /**\n      * All resources associated with this context.\n      * @property resources\n      * @type Object[]\n      * @readOnly\n       */\n      this.resources = [];\n    }\n\n\n    /**\n    * Converts the resource context into a data-bundle for serialization. The data-bundle will only contain\n    * the names of the resources associated with this context but not the resource-data itself.\n    * @method toDataBundle\n    * @return {string[]} An array of resource names associated with this context.\n     */\n\n    ResourceManagerContext.prototype.toDataBundle = function() {\n      return this.resources.select(function(r) {\n        return r.name;\n      });\n    };\n\n\n    /**\n    * Initializes the resource context from a data-bundle. Any already existing resource associations\n    * with this context will be deleted.\n    * @method fromDataBundle\n     */\n\n    ResourceManagerContext.prototype.fromDataBundle = function(data, resourcesByPath) {\n      return this.resources = data.select(function(n) {\n        return {\n          name: n,\n          data: resourcesByPath[n]\n        };\n      });\n    };\n\n\n    /**\n    * Adds the specified resource to the context.\n    * @method add\n    * @param {string} name - A unique name for the resource like the file-path for example.\n    * @param {gs.Bitmap|gs.AudioBuffer|gs.Video|gs.Live2DModel} data - The resource data like a gs.Bitmap object for example.\n     */\n\n    ResourceManagerContext.prototype.add = function(name, resource) {\n      return this.resources.push({\n        name: name,\n        data: resource\n      });\n    };\n\n\n    /**\n    * Removes the resource with the specified name from the context.\n    * @method remove\n    * @param {string} name - The name of the resource to remove. For Example: The file name.\n     */\n\n    ResourceManagerContext.prototype.remove = function(name) {\n      return this.resources.remove(this.resources.first(function(r) {\n        return r.name === name;\n      }));\n    };\n\n    return ResourceManagerContext;\n\n  })();\n\n  gs.ResourceManagerContext = ResourceManagerContext;\n\n  ResourceManager = (function() {\n\n    /**\n    * Manages the resources of the game like graphics, audio, fonts, etc. It\n    * offers a lot of methods to easily access game resources and automatically\n    * caches them. So if an image is requested a second time it will be taken\n    * from the cache instead of loading it again.\n    *\n    * @module gs\n    * @class ResourceManager\n    * @memberof gs\n    * @constructor\n     */\n    function ResourceManager() {\n\n      /**\n      * Current resource context. All loaded resources will be associated with it. If current context\n      * is set to <b>null</b>, the <b>systemContext</b> is used instead.\n      * @property context\n      * @type gs.ResourceManagerContext\n      * @protected\n       */\n      this.context_ = null;\n\n      /**\n      * System resource context. All loaded system resources are associated with this context. Resources\n      * which are associated with the system context are not disposed until the game ends.\n      * @property context\n      * @type gs.ResourceManagerContext\n       */\n      this.systemContext = this.createContext();\n\n      /**\n      * Holds in-memory created bitmaps.\n      * @property customBitmapsByKey\n      * @type Object\n      * @protected\n       */\n      this.customBitmapsByKey = {};\n\n      /**\n      * Caches resources by file path.\n      * @property resourcesByPath\n      * @type Object\n      * @protected\n       */\n      this.resourcesByPath = {};\n\n      /**\n      * Caches resources by file path and HUE.\n      * @property resourcesByPath\n      * @type Object\n      * @protected\n       */\n      this.resourcesByPathHue = {};\n\n      /**\n      * Stores all loaded resources.\n      * @property resources\n      * @type Object[]\n       */\n      this.resources = [];\n\n      /**\n      * Indicates if all requested resources are loaded.\n      * @property resourcesLoaded\n      * @type boolean\n       */\n      this.resourcesLoaded = true;\n\n      /**\n      * @property events\n      * @type gs.EventEmitter\n       */\n      this.events = new gs.EventEmitter();\n    }\n\n\n    /**\n    * Current resource context. All loaded resources will be associated with it. If current context\n    * is set to <b>null</b>, the <b>systemContext</b> is used instead.\n    * @property context\n    * @type gs.ResourceManagerContext\n     */\n\n    ResourceManager.accessors(\"context\", {\n      set: function(v) {\n        return this.context_ = v;\n      },\n      get: function() {\n        var ref;\n        return (ref = this.context_) != null ? ref : this.systemContext;\n      }\n    });\n\n\n    /**\n    * Creates a new resource context. Use <b>context</b> to set the new created context\n    * as current context.\n    *\n    * @method createContext\n     */\n\n    ResourceManager.prototype.createContext = function() {\n      return new gs.ResourceManagerContext();\n    };\n\n\n    /**\n    * Disposes all bitmap resources associated with the current context.\n    *\n    * @method disposeBitmaps\n     */\n\n    ResourceManager.prototype.disposeBitmaps = function() {\n      var j, len, ref, resource, results;\n      ref = this.context.resources;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        resource = ref[j];\n        if (resource.data instanceof gs.Bitmap) {\n          resource.data.dispose();\n          this.resources.remove(this.resources.first((function(r) {\n            var result;\n            result = r.filePath === resource.data.filePath;\n            if (result) {\n              r.dispose();\n            }\n            return result;\n          })));\n          this.resources.remove(resource.data);\n          if (resource.name) {\n            this.resourcesByPath[resource.name] = null;\n            results.push(delete this.resourcesByPath[resource.name]);\n          } else {\n            results.push(void 0);\n          }\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Disposes all video resources associated with the current context.\n    *\n    * @method disposeVideos\n     */\n\n    ResourceManager.prototype.disposeVideos = function() {\n      var j, len, ref, resource, results;\n      ref = this.context.resources;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        resource = ref[j];\n        if (resource.data instanceof gs.Video) {\n          resource.data.dispose();\n          this.resources.remove(resource.data);\n          this.resourcesByPath[resource.name] = null;\n          results.push(delete this.resourcesByPath[resource.name]);\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Disposes all audio resources associated with the current context.\n    *\n    * @method disposeAudio\n     */\n\n    ResourceManager.prototype.disposeAudio = function() {\n      var j, len, ref, resource, results;\n      AudioManager.dispose(this.context);\n      ref = this.context.resources;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        resource = ref[j];\n        if (resource.data instanceof GS.AudioBuffer || resource instanceof GS.AudioBufferStream) {\n          resource.data.dispose();\n          this.resources.remove(resource.data);\n          this.resourcesByPath[resource.name] = null;\n          results.push(delete this.resourcesByPath[resource.name]);\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Disposes all Live2D resources associated with the current context.\n    *\n    * @method disposeLive2D\n     */\n\n    ResourceManager.prototype.disposeLive2D = function() {\n      var j, len, ref, resource, results;\n      ref = this.context.resources;\n      results = [];\n      for (j = 0, len = ref.length; j < len; j++) {\n        resource = ref[j];\n        if (resource.data instanceof gs.Live2DModel) {\n          resource.data.dispose();\n          this.resources.remove(resource.data);\n          this.resourcesByPath[resource.name] = null;\n          results.push(delete this.resourcesByPath[resource.name]);\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n\n    /**\n    * Disposes all resources.\n    *\n    * @method dispose\n     */\n\n    ResourceManager.prototype.dispose = function() {\n      this.disposeBitmaps();\n      this.disposeVideos();\n      this.disposeAudio();\n      this.disposeLive2D();\n      return this.context = this.systemContext;\n    };\n\n\n    /**\n    * Loads all custom fonts in Graphics/Fonts folder.\n    *\n    * @method loadFonts\n     */\n\n    ResourceManager.prototype.loadFonts = function() {\n      var resource;\n      resource = {\n        loaded: false\n      };\n      this.resources.push(resource);\n      this.resourcesByPath[\"Graphics/Fonts\"] = resource;\n      return gs.Font.loadCustomFonts((function(_this) {\n        return function(error) {\n          _this.resourcesByPath[\"Graphics/Fonts\"].loaded = true;\n          if (error) {\n            return _this.resourcesByPath[\"Graphics/Fonts\"].error = true;\n          }\n        };\n      })(this));\n    };\n\n\n    /**\n    * Gets a custom created bitmap by key.\n    *\n    * @method getCustomBitmap\n    * @param {String} key - The key for the bitmap to get.\n    * @return {gs.Bitmap} The bitmap or <b>null</b> if no bitmap exists for the specified key.\n     */\n\n    ResourceManager.prototype.getCustomBitmap = function(key) {\n      return this.customBitmapsByKey[key];\n    };\n\n\n    /**\n    * Sets a custom created bitmap for a specified key.\n    *\n    * @method setCustomBitmap\n    * @param {String} key - The key for the bitmap to set.\n    * @param {gs.Bitmap} bitmap - The bitmap to set.\n     */\n\n    ResourceManager.prototype.setCustomBitmap = function(key, bitmap) {\n      this.customBitmapsByKey[key] = bitmap;\n      if (bitmap.loaded == null) {\n        this.resources.push(bitmap);\n        return this.resourcesLoaded = false;\n      }\n    };\n\n\n    /**\n    * Adds a custom created bitmap to the resource manager.\n    *\n    * @method addCustomBitmap\n    * @param {gs.Bitmap} bitmap - The bitmap to add.\n     */\n\n    ResourceManager.prototype.addCustomBitmap = function(bitmap) {\n      return this.context.resources.push({\n        name: \"\",\n        data: bitmap\n      });\n    };\n\n\n    /**\n    * Gets a Live2D model.\n    *\n    * @method getLive2DModel\n    * @param {String} filePath - Path to the Live2D model file.\n    * @return {gs.Live2DModel} The Live2D model or <b>null</b> if no model exists at the specified file path.\n     */\n\n    ResourceManager.prototype.getLive2DModel = function(filePath) {\n      var profile, result;\n      result = this.resourcesByPath[filePath];\n      if ((result == null) || result.disposed) {\n        profile = LanguageManager.profile;\n        result = new gs.Live2DModel(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null));\n        this.resourcesByPath[filePath] = result;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n        this.context.resources.push({\n          name: filePath,\n          data: result\n        });\n      }\n      return result;\n    };\n\n\n    /**\n    * Gets a font.\n    *\n    * @method getFont\n    * @param {String} name - The name of the font to get.\n    * @param {number} size - The size of the font to get.\n    * @return {gs.Font} The font or <b>null</b> if no font with the specified name exists.\n     */\n\n    ResourceManager.prototype.getFont = function(name, size) {\n      var result;\n      result = new Font(name, size);\n      this.resources.push(result);\n      this.resourcesLoaded = false;\n      return result;\n    };\n\n\n    /**\n    * Gets a video.\n    *\n    * @method getVideo\n    * @param {String} filePath - Path to the video file.\n    * @return {gs.Video} The video or <b>null</b> if no video exists at the specified file path.\n     */\n\n    ResourceManager.prototype.getVideo = function(filePath) {\n      var profile, result;\n      if (filePath.endsWith(\"/\")) {\n        return null;\n      }\n      result = this.resourcesByPath[filePath];\n      if ((result == null) || result.disposed) {\n        profile = LanguageManager.profile;\n        result = new gs.Video(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null));\n        this.resourcesByPath[filePath] = result;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n        this.context.resources.push({\n          name: filePath,\n          data: result\n        });\n      }\n      return result;\n    };\n\n\n    /**\n    * Gets a bitmap.\n    *\n    * @method getBitmap\n    * @param {String} filePath - Path to the bitmap file.\n    * @param {number} hue - The bitmap's hue. The bitmap will be loaded and then recolored.\n    * @return {gs.Bitmap} The bitmap or <b>null</b> if no bitmap exists at the specified file path.\n     */\n\n    ResourceManager.prototype.getBitmap = function(filePath, hue) {\n      var hueBitmap, profile, result;\n      if (filePath.endsWith(\"/\")) {\n        return null;\n      }\n      hue = hue || 0;\n      result = this.resourcesByPath[filePath] || this.customBitmapsByKey[filePath];\n      if (result == null) {\n        profile = LanguageManager.profile;\n        result = new Bitmap(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null), false);\n        result.hue = hue;\n        result.filePath = filePath;\n        this.resourcesByPath[filePath] = result;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n        this.context.resources.push({\n          name: filePath,\n          data: result\n        });\n      } else if (!result.loaded && result.hue !== hue) {\n        profile = LanguageManager.profile;\n        result = new Bitmap(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null));\n        result.hue = hue;\n        result.filePath = filePath;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n      } else if (hue > 0) {\n        hueBitmap = this.resourcesByPathHue[filePath + \"@\" + hue];\n        if ((hueBitmap == null) && result.loaded) {\n          hueBitmap = new Bitmap(result.image);\n          hueBitmap.changeHue(hue);\n          this.resourcesByPathHue[filePath + \"@\" + hue] = hueBitmap;\n        }\n        if (hueBitmap != null) {\n          result = hueBitmap;\n        }\n      }\n      return result;\n    };\n\n\n    /**\n    * Gets an HTML image.\n    *\n    * @method getImage\n    * @param {String} filePath - Path to the image file.\n    * @return {HTMLImageElement} The image or <b>null</b> if no image exists at the specified file path.\n     */\n\n    ResourceManager.prototype.getImage = function(filePath) {\n      var result;\n      result = this.resourcesByPath[filePath];\n      if (result == null) {\n        result = new Bitmap(\"resources/\" + filePath + \".png\");\n        this.resourcesByPath[filePath] = result;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n      }\n      return result;\n    };\n\n\n    /**\n    * Gets an audio stream.\n    *\n    * @method getAudioStream\n    * @param {String} filePath - Path to the audio file.\n    * @return {gs.AudioBuffer} The audio buffer or <b>null</b> if no audio file exists at the specified file path.\n     */\n\n    ResourceManager.prototype.getAudioStream = function(filePath) {\n      var languageCode, profile, result;\n      result = this.resourcesByPath[filePath];\n      profile = LanguageManager.profile;\n      languageCode = (profile != null) && (profile.items != null) ? profile.items.code : null;\n      if (result == null) {\n        result = new GS.AudioBuffer(filePath);\n        this.resourcesByPath[filePath] = result;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n        this.context.resources.push({\n          name: filePath,\n          data: result\n        });\n      }\n      return result;\n    };\n\n\n    /**\n    * Gets an audio buffer. The audio data is fully loaded and decoded in memory. It is recommeneded\n    * for sound effects but for a long background music, <b>getAudioStream</b> should be used instead. That is especially\n    * the case on mobile devices.\n    *\n    * @method getAudioBuffer\n    * @param {String} filePath - Path to the audio file.\n    * @return {gs.AudioBuffer} The audio buffer or <b>null</b> if no audio file exists at the specified file path.\n     */\n\n    ResourceManager.prototype.getAudioBuffer = function(filePath) {\n      var languageCode, profile, result;\n      result = this.resourcesByPath[filePath];\n      profile = LanguageManager.profile;\n      languageCode = (profile != null) && (profile.items != null) ? profile.items.code : null;\n      if (result == null) {\n        result = new GS.AudioBuffer(filePath);\n        this.resourcesByPath[filePath] = result;\n        this.resources.push(result);\n        this.resourcesLoaded = false;\n        this.context.resources.push({\n          name: filePath,\n          data: result\n        });\n      }\n      return result;\n    };\n\n\n    /**\n    * Updates the loading process. Needs to be called once per frame to keep\n    * the ResourceManager up to date.\n    *\n    * @method update\n     */\n\n    ResourceManager.prototype.update = function() {\n      var bitmap, i, j, ref;\n      if (this.events == null) {\n        this.events = new gs.EventEmitter();\n      }\n      if (!this.resourcesLoaded) {\n        this.resourcesLoaded = true;\n        for (i = j = 0, ref = this.resources.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n          if (!this.resources[i].loaded) {\n            this.resourcesLoaded = false;\n            break;\n          } else if ((this.resources[i].hue != null) && this.resources[i].hue > 0) {\n            bitmap = new Bitmap(this.resources[i].image);\n            this.resourcesByPath[this.resources[i].filePath] = bitmap;\n            this.resources[i].changeHue(this.resources[i].hue);\n            this.resourcesByPathHue[this.resources[i].filePath + \"@\" + this.resources[i].hue] = this.resources[i];\n            delete this.resources[i].filePath;\n            delete this.resources[i].hue;\n          }\n        }\n        if (this.resourcesLoaded) {\n          this.events.emit(\"loaded\", this);\n        }\n      }\n      return null;\n    };\n\n    return ResourceManager;\n\n  })();\n\n  window.ResourceManager = ResourceManager;\n\n  gs.ResourceManager = ResourceManager;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}