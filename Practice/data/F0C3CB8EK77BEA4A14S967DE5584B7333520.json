{
    "uid": "F0C3CB8EK77BEA4A14S967DE5584B7333520",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_GridLayoutBehavior",
        "type": "game_script",
        "order": 7,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_GridLayoutBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_GridLayoutBehavior extends gs.Component_LayoutBehavior\n    ###*\n    * Turns a game object into a free-layout and layouts all sub-objects\n    * in a grid of rows and columns.\n\n    * @module gs\n    * @class Component_GridLayoutBehavior\n    * @extends gs.Component_LayoutBehavior\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        super\n        \n        @column = 0\n        @row = 0\n\n    sizeToFit: ->\n        \n    ###*\n    * Updates a specified control.\n    *\n    * @method updateControl\n    * @protected\n    * @param {gs.Object_Base} control The control to update\n    ### \n    updateControl: (control) ->\n        super\n        \n        cellSpacing = @object.cellSpacing\n        rect = @object.dstRect\n        \n        control.parent = @object\n        control.dstRect.x = cellSpacing[0] + @column * (control.dstRect.width+cellSpacing[2])\n        control.dstRect.y = cellSpacing[1] + @row * (control.dstRect.height+cellSpacing[3])\n        if control.needsUpdate\n            control.needsUpdate = no\n            control.update()\n       \n        if @object.sizeToFit\n            rect.width = Math.max(control.dstRect.x + control.dstRect.width + cellSpacing[2], rect.width || 0)\n            rect.height = Math.max(control.dstRect.y + control.dstRect.height + cellSpacing[3], rect.height || 0)\n           \n        \n    ###*\n    * Updates the grid-layout.\n    *\n    * @method update\n    ###\n    update: ->\n        @updateOrigin()\n        \n        cellSpacing = @object.cellSpacing\n        rows = @object.rows\n        columns = @object.columns\n        @row = 0\n        @column = 0\n        offset = (@object.listOffset||0) * (rows * columns) \n        count = Math.min(@object.subObjects.length, rows * columns + offset)\n        rect = @object.dstRect\n        \n        for i in [offset...count]\n            control = @object.subObjects[i]\n            control.index = i\n\n            @updateControl(control)\n\n            @column++\n            if @column >= columns\n                @column = 0\n                @row++\n\n            if @row >= rows\n                break\n        \n        if @object.clipRect?\n            @object.clipRect.set(rect.x, rect.y, rect.width, rect.height)      \n        \ngs.Component_GridLayoutBehavior = Component_GridLayoutBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_GridLayoutBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_GridLayoutBehavior = (function(superClass) {\n    extend(Component_GridLayoutBehavior, superClass);\n\n\n    /**\n    * Turns a game object into a free-layout and layouts all sub-objects\n    * in a grid of rows and columns.\n    \n    * @module gs\n    * @class Component_GridLayoutBehavior\n    * @extends gs.Component_LayoutBehavior\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_GridLayoutBehavior() {\n      Component_GridLayoutBehavior.__super__.constructor.apply(this, arguments);\n      this.column = 0;\n      this.row = 0;\n    }\n\n    Component_GridLayoutBehavior.prototype.sizeToFit = function() {};\n\n\n    /**\n    * Updates a specified control.\n    *\n    * @method updateControl\n    * @protected\n    * @param {gs.Object_Base} control The control to update\n     */\n\n    Component_GridLayoutBehavior.prototype.updateControl = function(control) {\n      var cellSpacing, rect;\n      Component_GridLayoutBehavior.__super__.updateControl.apply(this, arguments);\n      cellSpacing = this.object.cellSpacing;\n      rect = this.object.dstRect;\n      control.parent = this.object;\n      control.dstRect.x = cellSpacing[0] + this.column * (control.dstRect.width + cellSpacing[2]);\n      control.dstRect.y = cellSpacing[1] + this.row * (control.dstRect.height + cellSpacing[3]);\n      if (control.needsUpdate) {\n        control.needsUpdate = false;\n        control.update();\n      }\n      if (this.object.sizeToFit) {\n        rect.width = Math.max(control.dstRect.x + control.dstRect.width + cellSpacing[2], rect.width || 0);\n        return rect.height = Math.max(control.dstRect.y + control.dstRect.height + cellSpacing[3], rect.height || 0);\n      }\n    };\n\n\n    /**\n    * Updates the grid-layout.\n    *\n    * @method update\n     */\n\n    Component_GridLayoutBehavior.prototype.update = function() {\n      var cellSpacing, columns, control, count, i, j, offset, rect, ref, ref1, rows;\n      this.updateOrigin();\n      cellSpacing = this.object.cellSpacing;\n      rows = this.object.rows;\n      columns = this.object.columns;\n      this.row = 0;\n      this.column = 0;\n      offset = (this.object.listOffset || 0) * (rows * columns);\n      count = Math.min(this.object.subObjects.length, rows * columns + offset);\n      rect = this.object.dstRect;\n      for (i = j = ref = offset, ref1 = count; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n        control = this.object.subObjects[i];\n        control.index = i;\n        this.updateControl(control);\n        this.column++;\n        if (this.column >= columns) {\n          this.column = 0;\n          this.row++;\n        }\n        if (this.row >= rows) {\n          break;\n        }\n      }\n      if (this.object.clipRect != null) {\n        return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);\n      }\n    };\n\n    return Component_GridLayoutBehavior;\n\n  })(gs.Component_LayoutBehavior);\n\n  gs.Component_GridLayoutBehavior = Component_GridLayoutBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}