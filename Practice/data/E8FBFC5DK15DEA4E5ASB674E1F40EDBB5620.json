{
    "uid": "E8FBFC5DK15DEA4E5ASB674E1F40EDBB5620",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_Quad",
        "type": "game_script",
        "order": 5,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_Quad\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_Quad extends gs.Component_Visual\n    ###*\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n    ###\n    onDataBundleRestore: (data, context) ->\n        @setupEventHandlers()\n        \n    ###*\n    * A quad component displays rectangle on the screen using the color\n    * of the game object.\n    *\n    * @module gs\n    * @class Component_Quad\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        super\n        \n        ###*\n        * The native quad-object to display a colored rectangle on screen.\n        * @property quad\n        * @type gs.Quad\n        * @protected\n        ###\n        @quad = null \n        \n    ###*\n    * Disposes the quad.\n    * @method dispose\n    ###\n    dispose: -> @quad.dispose()\n    \n    ###*\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n    ### \n    setupEventHandlers: ->\n        @quad.onIndexChange = =>\n            @object.rIndex = @quad.index\n            \n    ###*\n    * Sets up the quad.\n    * @method setup\n    ###\n    setup: ->\n        @isSetup = yes\n        @quad = new gs.Quad(Graphics.viewport)\n        @setupEventHandlers()\n        @update()\n    \n    ###*\n    * Updates the quad and its properties.\n    * @method update\n    ###\n    update: ->\n        super\n        \n        @setup() if not @isSetup\n        @object.rIndex = @quad.index\n        @quad.rect.set(@object.dstRect.x, @object.dstRect.y, @object.dstRect.width, @object.dstRect.height)\n        @quad.visible = @object.visible\n        @quad.ox = -@object.origin.x\n        @quad.oy = -@object.origin.y\n        @quad.z = (@object.zIndex || 0) + (if !@object.parent then 0 else @object.parent.zIndex || 0)\n        @quad.color = @object.color || Colors.TRANSPARENT\n        @quad.opacity = @object.opacity ? 255\n        @quad.clipRect = @object.clipRect\n\ngs.Component_Quad = Component_Quad",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_Quad,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_Quad = (function(superClass) {\n    extend(Component_Quad, superClass);\n\n\n    /**\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n     */\n\n    Component_Quad.prototype.onDataBundleRestore = function(data, context) {\n      return this.setupEventHandlers();\n    };\n\n\n    /**\n    * A quad component displays rectangle on the screen using the color\n    * of the game object.\n    *\n    * @module gs\n    * @class Component_Quad\n    * @extends gs.Component\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_Quad() {\n      Component_Quad.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The native quad-object to display a colored rectangle on screen.\n      * @property quad\n      * @type gs.Quad\n      * @protected\n       */\n      this.quad = null;\n    }\n\n\n    /**\n    * Disposes the quad.\n    * @method dispose\n     */\n\n    Component_Quad.prototype.dispose = function() {\n      return this.quad.dispose();\n    };\n\n\n    /**\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n     */\n\n    Component_Quad.prototype.setupEventHandlers = function() {\n      return this.quad.onIndexChange = (function(_this) {\n        return function() {\n          return _this.object.rIndex = _this.quad.index;\n        };\n      })(this);\n    };\n\n\n    /**\n    * Sets up the quad.\n    * @method setup\n     */\n\n    Component_Quad.prototype.setup = function() {\n      this.isSetup = true;\n      this.quad = new gs.Quad(Graphics.viewport);\n      this.setupEventHandlers();\n      return this.update();\n    };\n\n\n    /**\n    * Updates the quad and its properties.\n    * @method update\n     */\n\n    Component_Quad.prototype.update = function() {\n      var ref;\n      Component_Quad.__super__.update.apply(this, arguments);\n      if (!this.isSetup) {\n        this.setup();\n      }\n      this.object.rIndex = this.quad.index;\n      this.quad.rect.set(this.object.dstRect.x, this.object.dstRect.y, this.object.dstRect.width, this.object.dstRect.height);\n      this.quad.visible = this.object.visible;\n      this.quad.ox = -this.object.origin.x;\n      this.quad.oy = -this.object.origin.y;\n      this.quad.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);\n      this.quad.color = this.object.color || Colors.TRANSPARENT;\n      this.quad.opacity = (ref = this.object.opacity) != null ? ref : 255;\n      return this.quad.clipRect = this.object.clipRect;\n    };\n\n    return Component_Quad;\n\n  })(gs.Component_Visual);\n\n  gs.Component_Quad = Component_Quad;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}