{
    "uid": "C8BBDC08K70C4A4302S9DFBE9A4F740CE150",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_ShakeAnimation",
        "type": "game_script",
        "order": 11,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_ShakeAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_ShakeAnimation extends gs.Component_Animation\n    ###*\n    * Executes a horizontal shake-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_ShakeAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        @easingX = new gs.Easing(null, data?.easingX)\n        @easingY = new gs.Easing(null, data?.easingY)\n        @range = data?.range || { x: 0, y: 0 }\n        @speed = data?.speed || 0\n        @callback = null\n        @isRunning = data?.isRunning ? no\n        @duration = data?.duration || 0\n        \n    \n    ###*\n    * Serializes the shake-animation into a data-bundle.\n    *\n    * @method toDataBundle\n    ###     \n    toDataBundle: ->\n        easingX: @easingX,\n        easingY: @easingY,\n        range: @range,\n        duration: @duration,\n        speed: @speed,\n        isRunning: @isRunning\n     \n    ###*\n    * Skips the animation. That is used to skip an animation if the user\n    * wants to skip very fast through a visual novel scene.\n    *\n    * @method skip\n    ###   \n    skip: -> \n        if @easingX.duration > 1\n            @easingX.duration = 1\n            @easingX.time = 0\n        if @easingY.duration > 1\n            @easingY.duration = 1\n            @easingY.time = 0\n    \n    ###*\n    * Starts the shake-animation.\n    *\n    * @method start\n    * @param {gs.Range} range The horizontal shake-range.\n    * @param {number} speed The shake-speed.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished. \n    ###      \n    start: (range, speed, duration, easing, callback) ->\n        @range = range\n        @easingX.type = easing\n        @easingY.type = easing\n        @speed = speed\n        @duration = duration\n        @callback = callback\n        \n        if @duration == 0 or @isInstantSkip()\n            @callback?(@object, this)\n        else\n            @isRunning = yes\n            @startOffset = x: @object.offset.x, y: @object.offset.y\n            if range.x != 0\n                @easingX.startValue(@startOffset.x, range.x, Math.max(range.x / speed, 1))\n            if range.y != 0\n                @easingY.startValue(@startOffset.y, range.y, Math.max(range.y / speed, 1))\n            \n    ###*\n    * Updates the shake-animation.\n    *\n    * @method update\n    ### \n    update: ->\n        super()\n        \n        if (@duration == 0 or @isInstantSkip()) and @isRunning\n            @easingX.isRunning = no\n            @easingY.isRunning = no\n            @object.offset.x = 0\n            @object.offset.y = 0\n            @isRunning = no\n            @callback?(@object, this)\n            \n        if not @isRunning then return\n        \n        @easingX.updateValue()\n        @easingY.updateValue()\n        \n        if @easingY.isRunning\n            @object.offset.y = Math.round(@easingY.value)\n        if @easingX.isRunning\n            @object.offset.x = Math.round(@easingX.value)\n        \n        if not @easingX.isRunning\n            @easingX.startValue(@object.offset.x, (if @object.offset.x > 0 then -(@range.x*2) else (@range.x*2)), Math.max(@range.x*2 / @speed, 2))\n        if not @easingY.isRunning\n            @easingY.startValue(@object.offset.y, (if @object.offset.y > 0 then -(@range.y*2) else (@range.y*2)), Math.max(@range.y*2 / @speed, 2))\n        \n        \n        @duration--\n            \ngs.Component_ShakeAnimation = Component_ShakeAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_ShakeAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_ShakeAnimation = (function(superClass) {\n    extend(Component_ShakeAnimation, superClass);\n\n\n    /**\n    * Executes a horizontal shake-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_ShakeAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_ShakeAnimation(data) {\n      var ref;\n      Component_ShakeAnimation.__super__.constructor.apply(this, arguments);\n      this.easingX = new gs.Easing(null, data != null ? data.easingX : void 0);\n      this.easingY = new gs.Easing(null, data != null ? data.easingY : void 0);\n      this.range = (data != null ? data.range : void 0) || {\n        x: 0,\n        y: 0\n      };\n      this.speed = (data != null ? data.speed : void 0) || 0;\n      this.callback = null;\n      this.isRunning = (ref = data != null ? data.isRunning : void 0) != null ? ref : false;\n      this.duration = (data != null ? data.duration : void 0) || 0;\n    }\n\n\n    /**\n    * Serializes the shake-animation into a data-bundle.\n    *\n    * @method toDataBundle\n     */\n\n    Component_ShakeAnimation.prototype.toDataBundle = function() {\n      return {\n        easingX: this.easingX,\n        easingY: this.easingY,\n        range: this.range,\n        duration: this.duration,\n        speed: this.speed,\n        isRunning: this.isRunning\n      };\n    };\n\n\n    /**\n    * Skips the animation. That is used to skip an animation if the user\n    * wants to skip very fast through a visual novel scene.\n    *\n    * @method skip\n     */\n\n    Component_ShakeAnimation.prototype.skip = function() {\n      if (this.easingX.duration > 1) {\n        this.easingX.duration = 1;\n        this.easingX.time = 0;\n      }\n      if (this.easingY.duration > 1) {\n        this.easingY.duration = 1;\n        return this.easingY.time = 0;\n      }\n    };\n\n\n    /**\n    * Starts the shake-animation.\n    *\n    * @method start\n    * @param {gs.Range} range The horizontal shake-range.\n    * @param {number} speed The shake-speed.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished.\n     */\n\n    Component_ShakeAnimation.prototype.start = function(range, speed, duration, easing, callback) {\n      this.range = range;\n      this.easingX.type = easing;\n      this.easingY.type = easing;\n      this.speed = speed;\n      this.duration = duration;\n      this.callback = callback;\n      if (this.duration === 0 || this.isInstantSkip()) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        this.isRunning = true;\n        this.startOffset = {\n          x: this.object.offset.x,\n          y: this.object.offset.y\n        };\n        if (range.x !== 0) {\n          this.easingX.startValue(this.startOffset.x, range.x, Math.max(range.x / speed, 1));\n        }\n        if (range.y !== 0) {\n          return this.easingY.startValue(this.startOffset.y, range.y, Math.max(range.y / speed, 1));\n        }\n      }\n    };\n\n\n    /**\n    * Updates the shake-animation.\n    *\n    * @method update\n     */\n\n    Component_ShakeAnimation.prototype.update = function() {\n      Component_ShakeAnimation.__super__.update.call(this);\n      if ((this.duration === 0 || this.isInstantSkip()) && this.isRunning) {\n        this.easingX.isRunning = false;\n        this.easingY.isRunning = false;\n        this.object.offset.x = 0;\n        this.object.offset.y = 0;\n        this.isRunning = false;\n        if (typeof this.callback === \"function\") {\n          this.callback(this.object, this);\n        }\n      }\n      if (!this.isRunning) {\n        return;\n      }\n      this.easingX.updateValue();\n      this.easingY.updateValue();\n      if (this.easingY.isRunning) {\n        this.object.offset.y = Math.round(this.easingY.value);\n      }\n      if (this.easingX.isRunning) {\n        this.object.offset.x = Math.round(this.easingX.value);\n      }\n      if (!this.easingX.isRunning) {\n        this.easingX.startValue(this.object.offset.x, (this.object.offset.x > 0 ? -(this.range.x * 2) : this.range.x * 2), Math.max(this.range.x * 2 / this.speed, 2));\n      }\n      if (!this.easingY.isRunning) {\n        this.easingY.startValue(this.object.offset.y, (this.object.offset.y > 0 ? -(this.range.y * 2) : this.range.y * 2), Math.max(this.range.y * 2 / this.speed, 2));\n      }\n      return this.duration--;\n    };\n\n    return Component_ShakeAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_ShakeAnimation = Component_ShakeAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}