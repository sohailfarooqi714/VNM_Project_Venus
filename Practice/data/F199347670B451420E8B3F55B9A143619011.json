{
    "uid": "F199347670B451420E8B3F55B9A143619011",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_WobbleAnimation",
        "type": "game_script",
        "order": 14,
        "parentId": "A8E9945CKEE5CA4855SAC81E480CB8098E0E",
        "folder": false,
        "scriptType": 0,
        "content": "# ===================================================================\n#\n#   Script: Component_WobbleAnimation\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_WobbleAnimation extends gs.Component_Animation\n    ###*\n    * Executes a blur-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_WobbleAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super\n        \n        ###*\n        * The easing-object used for the animation.\n        * @property easing\n        * @type gs.Easing\n        ###\n        @powerEasing = new gs.Easing(null, data?.powerEasing)\n        @speedEasing = new gs.Easing(null, data?.speedEasing)\n        \n    ###*\n    * Updates the blend-animation.\n    *\n    * @method update\n    ###   \n    update: ->\n        super\n        if !@powerEasing.isRunning and !@speedEasing.isRunning then return\n\n        @powerEasing.updateValue()\n        @speedEasing.updateValue()\n        @object.effects.wobble.power = @powerEasing.value\n        @object.effects.wobble.speed = @speedEasing.value\n        \n        if !@powerEasing.isRunning and !@speedEasing.isRunning\n            @callback?(@object, this)\n \n    ###*\n    * Starts the blend-animation.\n    *\n    * @method start\n    * @param {number} power The target power.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished. \n    ###  \n    start: (power, speed, duration, easingType, callback) ->\n        @callback = callback\n        @powerEasing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]\n        @speedEasing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]\n        if @object.effects.wobble.power == power or @object.effects.wobble.speed == speed then return @callback?(@object, this)\n        \n        if duration == 0 or @isInstantSkip()\n            @object.effects.wobble.power = power\n            @object.effects.wobble.speed = speed\n            @callback?(@object, this)\n        else\n            @powerEasing.startValue(@object.effects.wobble.power, power - @object.effects.wobble.power, duration)\n            @speedEasing.startValue(@object.effects.wobble.speed, speed - @object.effects.wobble.speed, duration)\n        \ngs.Component_WobbleAnimation = Component_WobbleAnimation",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_WobbleAnimation,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_WobbleAnimation = (function(superClass) {\n    extend(Component_WobbleAnimation, superClass);\n\n\n    /**\n    * Executes a blur-animation on a game-object.\n    *\n    * @module gs\n    * @class Component_WobbleAnimation\n    * @extends gs.Component_Animation\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_WobbleAnimation(data) {\n      Component_WobbleAnimation.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The easing-object used for the animation.\n      * @property easing\n      * @type gs.Easing\n       */\n      this.powerEasing = new gs.Easing(null, data != null ? data.powerEasing : void 0);\n      this.speedEasing = new gs.Easing(null, data != null ? data.speedEasing : void 0);\n    }\n\n\n    /**\n    * Updates the blend-animation.\n    *\n    * @method update\n     */\n\n    Component_WobbleAnimation.prototype.update = function() {\n      Component_WobbleAnimation.__super__.update.apply(this, arguments);\n      if (!this.powerEasing.isRunning && !this.speedEasing.isRunning) {\n        return;\n      }\n      this.powerEasing.updateValue();\n      this.speedEasing.updateValue();\n      this.object.effects.wobble.power = this.powerEasing.value;\n      this.object.effects.wobble.speed = this.speedEasing.value;\n      if (!this.powerEasing.isRunning && !this.speedEasing.isRunning) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n    };\n\n\n    /**\n    * Starts the blend-animation.\n    *\n    * @method start\n    * @param {number} power The target power.\n    * @param {number} duration The duration in frames.\n    * @param {Object} easingType The easing-type.\n    * @param {function} [callback] An optional callback called if the animation is finished.\n     */\n\n    Component_WobbleAnimation.prototype.start = function(power, speed, duration, easingType, callback) {\n      this.callback = callback;\n      this.powerEasing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];\n      this.speedEasing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];\n      if (this.object.effects.wobble.power === power || this.object.effects.wobble.speed === speed) {\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      }\n      if (duration === 0 || this.isInstantSkip()) {\n        this.object.effects.wobble.power = power;\n        this.object.effects.wobble.speed = speed;\n        return typeof this.callback === \"function\" ? this.callback(this.object, this) : void 0;\n      } else {\n        this.powerEasing.startValue(this.object.effects.wobble.power, power - this.object.effects.wobble.power, duration);\n        return this.speedEasing.startValue(this.object.effects.wobble.speed, speed - this.object.effects.wobble.speed, duration);\n      }\n    };\n\n    return Component_WobbleAnimation;\n\n  })(gs.Component_Animation);\n\n  gs.Component_WobbleAnimation = Component_WobbleAnimation;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type"
    ],
    "externalItems": []
}