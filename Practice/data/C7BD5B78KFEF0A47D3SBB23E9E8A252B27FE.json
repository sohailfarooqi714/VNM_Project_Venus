{
    "uid": "C7BD5B78KFEF0A47D3SBB23E9E8A252B27FE",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Easing",
        "type": "game_script",
        "order": 3,
        "parentId": "2EC9F946K6417A4973S8308E368608E89B8B",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Easing\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Easing\n    @accessors \"type\", \n        set: (v) ->\n            if v != @type_\n                @type_ = v\n                @func = gs.Easings.EASE_FUNCTIONS[@type_[0]][@type_[1]]\n        get: -> @type_\n        \n    ###*\n    * The Easing class provides different types of animation using different easings. The easing\n    * of an animation controls how hard/soft the animation starts and/or stops.\n    *\n    * @module gs\n    * @class Easing\n    * @memberof gs\n    * @constructor\n    * @param {gs.Easings} type - The easing-type.\n    * @param {Object} [data=null] - A data-bundle to restore the easing from.\n    ###\n    constructor: (type, data) ->\n        if data?\n            Object.mixin(this, data)\n        else\n            ###*\n            * Frame counter for the animation. \n            * @property time\n            * @type number\n            * @protected\n            ###\n            @time = 0\n            \n            ###*\n            * Delta X \n            * @property dx\n            * @type number\n            * @protected\n            ###\n            @dx = 0\n            \n            ###*\n            * Delta Y\n            * @property dy\n            * @type number\n            * @protected\n            ###\n            @dy = 0\n            \n            ###*\n            * @property startX\n            * @type number\n            * @protected\n            ###\n            @startX = 0\n            \n            ###*\n            * @property startY\n            * @type number\n            * @protected\n            ###\n            @startY = 0\n            \n            ###*\n            * The duration of the animation.\n            * @property duration\n            * @type number\n            ###\n            @duration = 0\n            \n            ###*\n            * Indicates if the animation is running.\n            * @property isRunning\n            * @type boolean\n            * @readOnly\n            ###\n            @isRunning = no\n            \n            ###*\n            * Indicates if the animation is endless.\n            * @property isEndless\n            * @type boolean\n            * @readOnly\n            ###\n            @isEndless = no\n            \n            ###*\n            * @property isSingleValue\n            * @type boolean\n            * @readOnly\n            ###\n            @isSingleValue = no\n            \n            ###*\n            * @property speedX\n            * @type number\n            * @protected\n            ###\n            @speedX = 0\n            \n            ###*\n            * @property speedY\n            * @type number\n            * @protected\n            ###\n            @speedY = 0\n            \n            ###*\n            * @property speed\n            * @type number\n            * @protected\n            ###\n            @speed = 0\n            \n            ###*\n            * @property x\n            * @type number\n            * @protected\n            ###\n            @x = 0\n            \n            ###*\n            * @property y\n            * @type number\n            * @protected\n            ###\n            @y = 0\n            \n            ###*\n            * The current value.\n            * @property value\n            * @type number\n            * @protected\n            ###\n            @value = 0\n            \n            ###*\n            * The easing type.\n            * @property gs.Easings\n            * @type Function\n            ###\n            @type = type || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_OUT]\n        \n        ###*\n        * The easing function used for the animation.\n        * @property func\n        * @type Function\n        ###    \n        @func = gs.Easings.EASE_FUNCTIONS[@type[0]][@type[1]]\n    ###*\n    * Stops the animation \n    *\n    * @method stop\n    ###   \n    stop: ->\n        @isRunning = no\n     \n    ###*\n    * Starts an endless moving/scroll animation.\n    *\n    * @method startEndless\n    * @param {number} speedX - The animation speed on x-axis.\n    * @param {number} speedY - The animation speed on y-axis.\n    ###    \n    startEndless: (speedX, speedY) ->\n        @isRunning = yes\n        @isEndless = yes\n        @speedX = speedX\n        @speedY = speedY\n        @isSingleValue = no\n     \n    ###*\n    * Starts an endless value animation.\n    *\n    * @method startValueEndless\n    * @param {number} value - The start-value.\n    * @param {number} speedY - The animation speed.\n    ###     \n    startValueEndless: (value, speed) ->\n        @time = 0\n        @value = value\n        @speed = speed\n        @isRunning = yes\n        @isEndless = yes\n        @isSingleValue = yes\n    \n    ###*\n    * Starts a value animation.\n    *\n    * @method startValue\n    * @param {number} value - The start-value.\n    * @param {number} distance - The distance/amount to change the value by.\n    * @param {number} duration - The duration of the animation.\n    ###      \n    startValue: (value, distance, duration) ->\n        @time = 0\n        @duration = duration || 1\n        @valueStart = value\n        @value = value\n        @distance = distance\n        @isRunning = yes\n        @isEndless = no\n        @isSingleValue = yes\n\n     \n    ###*\n    * Starts a move/scroll animation.\n    *\n    * @method start\n    * @param {number} sx - The start x-coordinate.\n    * @param {number} sy - The start y-coordinate.\n    * @param {number} dx - The distance/amount on x-axis.\n    * @param {number} dy - The distance/amount on y-axis.\n    * @param {number} duration - The duration of the animation.\n    ###     \n    start: (sx, sy, dx, dy, duration) ->\n        @time = 0\n        @startX = sx\n        @startY = sy\n        @dx = dx - sx\n        @dy = dy - sy\n        @x = sx\n        @y = sy\n        @duration = duration || 1\n        @isRunning = yes\n        @isEndless = no\n        @isSingleValue = no\n        \n \n    ###*\n    * Updates the value animation.\n    *\n    * @method updateValue\n    ### \n    updateValue: ->\n        if @isEndless\n            @value += @speed\n        else\n            @value = (@func(@time, @valueStart, @distance, @duration))\n            if ++@time > @duration\n                @isRunning = no\n    \n    ###*\n    * Updates the move/scroll animation.\n    *\n    * @method updatePosition\n    ###     \n    updatePosition: () ->\n        if @isEndless\n            @x += @speedX\n            @y += @speedY\n        else\n            @x = (@func(@time, @startX, @dx, @duration))\n            @y = (@func(@time, @startY, @dy, @duration))\n    \n            @time++\n            \n            if @time > @duration\n                @isRunning = no\n          \ngs.Easing = Easing",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Easing;\n\n  Easing = (function() {\n    Easing.accessors(\"type\", {\n      set: function(v) {\n        if (v !== this.type_) {\n          this.type_ = v;\n          return this.func = gs.Easings.EASE_FUNCTIONS[this.type_[0]][this.type_[1]];\n        }\n      },\n      get: function() {\n        return this.type_;\n      }\n    });\n\n\n    /**\n    * The Easing class provides different types of animation using different easings. The easing\n    * of an animation controls how hard/soft the animation starts and/or stops.\n    *\n    * @module gs\n    * @class Easing\n    * @memberof gs\n    * @constructor\n    * @param {gs.Easings} type - The easing-type.\n    * @param {Object} [data=null] - A data-bundle to restore the easing from.\n     */\n\n    function Easing(type, data) {\n      if (data != null) {\n        Object.mixin(this, data);\n      } else {\n\n        /**\n        * Frame counter for the animation. \n        * @property time\n        * @type number\n        * @protected\n         */\n        this.time = 0;\n\n        /**\n        * Delta X \n        * @property dx\n        * @type number\n        * @protected\n         */\n        this.dx = 0;\n\n        /**\n        * Delta Y\n        * @property dy\n        * @type number\n        * @protected\n         */\n        this.dy = 0;\n\n        /**\n        * @property startX\n        * @type number\n        * @protected\n         */\n        this.startX = 0;\n\n        /**\n        * @property startY\n        * @type number\n        * @protected\n         */\n        this.startY = 0;\n\n        /**\n        * The duration of the animation.\n        * @property duration\n        * @type number\n         */\n        this.duration = 0;\n\n        /**\n        * Indicates if the animation is running.\n        * @property isRunning\n        * @type boolean\n        * @readOnly\n         */\n        this.isRunning = false;\n\n        /**\n        * Indicates if the animation is endless.\n        * @property isEndless\n        * @type boolean\n        * @readOnly\n         */\n        this.isEndless = false;\n\n        /**\n        * @property isSingleValue\n        * @type boolean\n        * @readOnly\n         */\n        this.isSingleValue = false;\n\n        /**\n        * @property speedX\n        * @type number\n        * @protected\n         */\n        this.speedX = 0;\n\n        /**\n        * @property speedY\n        * @type number\n        * @protected\n         */\n        this.speedY = 0;\n\n        /**\n        * @property speed\n        * @type number\n        * @protected\n         */\n        this.speed = 0;\n\n        /**\n        * @property x\n        * @type number\n        * @protected\n         */\n        this.x = 0;\n\n        /**\n        * @property y\n        * @type number\n        * @protected\n         */\n        this.y = 0;\n\n        /**\n        * The current value.\n        * @property value\n        * @type number\n        * @protected\n         */\n        this.value = 0;\n\n        /**\n        * The easing type.\n        * @property gs.Easings\n        * @type Function\n         */\n        this.type = type || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_OUT];\n      }\n\n      /**\n      * The easing function used for the animation.\n      * @property func\n      * @type Function\n       */\n      this.func = gs.Easings.EASE_FUNCTIONS[this.type[0]][this.type[1]];\n    }\n\n\n    /**\n    * Stops the animation \n    *\n    * @method stop\n     */\n\n    Easing.prototype.stop = function() {\n      return this.isRunning = false;\n    };\n\n\n    /**\n    * Starts an endless moving/scroll animation.\n    *\n    * @method startEndless\n    * @param {number} speedX - The animation speed on x-axis.\n    * @param {number} speedY - The animation speed on y-axis.\n     */\n\n    Easing.prototype.startEndless = function(speedX, speedY) {\n      this.isRunning = true;\n      this.isEndless = true;\n      this.speedX = speedX;\n      this.speedY = speedY;\n      return this.isSingleValue = false;\n    };\n\n\n    /**\n    * Starts an endless value animation.\n    *\n    * @method startValueEndless\n    * @param {number} value - The start-value.\n    * @param {number} speedY - The animation speed.\n     */\n\n    Easing.prototype.startValueEndless = function(value, speed) {\n      this.time = 0;\n      this.value = value;\n      this.speed = speed;\n      this.isRunning = true;\n      this.isEndless = true;\n      return this.isSingleValue = true;\n    };\n\n\n    /**\n    * Starts a value animation.\n    *\n    * @method startValue\n    * @param {number} value - The start-value.\n    * @param {number} distance - The distance/amount to change the value by.\n    * @param {number} duration - The duration of the animation.\n     */\n\n    Easing.prototype.startValue = function(value, distance, duration) {\n      this.time = 0;\n      this.duration = duration || 1;\n      this.valueStart = value;\n      this.value = value;\n      this.distance = distance;\n      this.isRunning = true;\n      this.isEndless = false;\n      return this.isSingleValue = true;\n    };\n\n\n    /**\n    * Starts a move/scroll animation.\n    *\n    * @method start\n    * @param {number} sx - The start x-coordinate.\n    * @param {number} sy - The start y-coordinate.\n    * @param {number} dx - The distance/amount on x-axis.\n    * @param {number} dy - The distance/amount on y-axis.\n    * @param {number} duration - The duration of the animation.\n     */\n\n    Easing.prototype.start = function(sx, sy, dx, dy, duration) {\n      this.time = 0;\n      this.startX = sx;\n      this.startY = sy;\n      this.dx = dx - sx;\n      this.dy = dy - sy;\n      this.x = sx;\n      this.y = sy;\n      this.duration = duration || 1;\n      this.isRunning = true;\n      this.isEndless = false;\n      return this.isSingleValue = false;\n    };\n\n\n    /**\n    * Updates the value animation.\n    *\n    * @method updateValue\n     */\n\n    Easing.prototype.updateValue = function() {\n      if (this.isEndless) {\n        return this.value += this.speed;\n      } else {\n        this.value = this.func(this.time, this.valueStart, this.distance, this.duration);\n        if (++this.time > this.duration) {\n          return this.isRunning = false;\n        }\n      }\n    };\n\n\n    /**\n    * Updates the move/scroll animation.\n    *\n    * @method updatePosition\n     */\n\n    Easing.prototype.updatePosition = function() {\n      if (this.isEndless) {\n        this.x += this.speedX;\n        return this.y += this.speedY;\n      } else {\n        this.x = this.func(this.time, this.startX, this.dx, this.duration);\n        this.y = this.func(this.time, this.startY, this.dy, this.duration);\n        this.time++;\n        if (this.time > this.duration) {\n          return this.isRunning = false;\n        }\n      }\n    };\n\n    return Easing;\n\n  })();\n\n  gs.Easing = Easing;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}