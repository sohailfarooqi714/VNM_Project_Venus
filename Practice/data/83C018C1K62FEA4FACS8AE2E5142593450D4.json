{
    "uid": "83C018C1K62FEA4FACS8AE2E5142593450D4",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_ThreePartImage",
        "type": "game_script",
        "order": 16,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_ThreePartImage\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_ThreePartImage extends gs.Component_Visual\n    ###*\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n    ###\n    onDataBundleRestore: (data, context) ->\n        @setupEventHandlers()\n        \n    ###*\n    * A three-part image component displays an object on screen using three\n    * sub-images: start, middle and end. The start and end will be rendered\n    * with fixed size while the middle-part will be stretched in a way like this:<br>\n    * <br>\n    * |Start-Part Fixed|<-----------Middle-Part Stretched----------->|End-Part Fixed<br>\n    * <br>\n    * A three-part image is automatically added to the graphics-system\n    * and rendered every frame until it gets disposed. It can be horizontal or\n    * vertical.\n    *\n    * @module gs\n    * @class Component_ThreePartImage\n    * @extends gs.Component_Visual\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (viewport) ->\n        super()\n        \n        ###*\n        * The native three-part image graphic object.\n        * @property threePartImage\n        * @type gs.ThreePartImage\n        ###\n        @threePartImage = new gs.ThreePartImage(viewport ? Graphics.viewport)\n        \n        ###*\n        * The name of the image used to construct the three-part image.\n        * @property image\n        * @type string\n        * @protected\n        ###\n        @image = null\n     \n    ###*\n    * Disposes the three-part image.\n    * \n    * @method dispose\n    ###       \n    dispose: ->\n        super\n        @threePartImage.dispose()\n        \n    ###*\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n    ### \n    setupEventHandlers: ->\n        @threePartImage.onIndexChange = =>\n            @object.rIndex = @threePartImage.index\n            \n    ###*\n    * Setup the three-part image component. This method is automatically called by the\n    * system.\n    * @method setup\n    ###\n    setup: ->\n        @setupEventHandlers()\n     \n    ###*\n    * Updates the three-part image properties from the game object properties.\n    *\n    * @method updateProperties\n    ###   \n    updateProperties: ->\n        @threePartImage.x = @object.dstRect.x - @object.dstRect.width * (@object.zoom.x - 1.0) * @object.anchor.x\n        @threePartImage.y = @object.dstRect.y - @object.dstRect.height * (@object.zoom.y - 1.0) * @object.anchor.y\n        @threePartImage.width = @object.dstRect.width\n        @threePartImage.height = @object.dstRect.height\n        @threePartImage.firstPartSize = @object.firstPartSize || 16\n        @threePartImage.middlePartSize = @object.middlePartSize || 1\n        @threePartImage.lastPartSize = @object.lastPartSize || 16\n        @threePartImage.visible = @object.visible\n        @threePartImage.ox = -@object.origin.x\n        @threePartImage.oy = -@object.origin.y\n        @threePartImage.z = (@object.zIndex || 0) + (if !@object.parent then 0 else @object.parent.zIndex || 0)\n        @threePartImage.angle = @object.angle || 0\n        @threePartImage.anchor.x = @object.anchor.x\n        @threePartImage.anchor.y = @object.anchor.y\n        \n    ###*\n    * Updates the padding.\n    * \n    * @method updatePadding\n    ### \n    updatePadding: ->\n        if @object.padding?\n            @threePartImage.x += @object.padding.left\n            @threePartImage.y += @object.padding.top\n            @threePartImage.width -= @object.padding.left+@object.padding.right\n            @threePartImage.height -= @object.padding.top+@object.padding.bottom\n     \n    ###*\n    * Updates the skin-image used to construct the three-part image.\n    *\n    * @method updateImage\n    ###       \n    updateImage: ->\n        if @object.image? and @image != @object.image\n            @image = @object.image\n            bitmap = ResourceManager.getBitmap(\"#{@object.imageFolder||\"Graphics/Pictures\"}/#{@object.image}\")\n            @threePartImage.skin = bitmap\n    \n    ###*\n    * Updates the three-part image.\n    * \n    * @method update\n    ###    \n    update: ->\n        super\n        \n        @object.rIndex = @threePartImage.index\n        @updateProperties()\n        @updatePadding()\n        @updateImage()\n        \ngs.Component_ThreePartImage = Component_ThreePartImage",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_ThreePartImage,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_ThreePartImage = (function(superClass) {\n    extend(Component_ThreePartImage, superClass);\n\n\n    /**\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n     */\n\n    Component_ThreePartImage.prototype.onDataBundleRestore = function(data, context) {\n      return this.setupEventHandlers();\n    };\n\n\n    /**\n    * A three-part image component displays an object on screen using three\n    * sub-images: start, middle and end. The start and end will be rendered\n    * with fixed size while the middle-part will be stretched in a way like this:<br>\n    * <br>\n    * |Start-Part Fixed|<-----------Middle-Part Stretched----------->|End-Part Fixed<br>\n    * <br>\n    * A three-part image is automatically added to the graphics-system\n    * and rendered every frame until it gets disposed. It can be horizontal or\n    * vertical.\n    *\n    * @module gs\n    * @class Component_ThreePartImage\n    * @extends gs.Component_Visual\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_ThreePartImage(viewport) {\n      Component_ThreePartImage.__super__.constructor.call(this);\n\n      /**\n      * The native three-part image graphic object.\n      * @property threePartImage\n      * @type gs.ThreePartImage\n       */\n      this.threePartImage = new gs.ThreePartImage(viewport != null ? viewport : Graphics.viewport);\n\n      /**\n      * The name of the image used to construct the three-part image.\n      * @property image\n      * @type string\n      * @protected\n       */\n      this.image = null;\n    }\n\n\n    /**\n    * Disposes the three-part image.\n    * \n    * @method dispose\n     */\n\n    Component_ThreePartImage.prototype.dispose = function() {\n      Component_ThreePartImage.__super__.dispose.apply(this, arguments);\n      return this.threePartImage.dispose();\n    };\n\n\n    /**\n    * Adds event-handlers for mouse/touch events\n    *\n    * @method setupEventHandlers\n     */\n\n    Component_ThreePartImage.prototype.setupEventHandlers = function() {\n      return this.threePartImage.onIndexChange = (function(_this) {\n        return function() {\n          return _this.object.rIndex = _this.threePartImage.index;\n        };\n      })(this);\n    };\n\n\n    /**\n    * Setup the three-part image component. This method is automatically called by the\n    * system.\n    * @method setup\n     */\n\n    Component_ThreePartImage.prototype.setup = function() {\n      return this.setupEventHandlers();\n    };\n\n\n    /**\n    * Updates the three-part image properties from the game object properties.\n    *\n    * @method updateProperties\n     */\n\n    Component_ThreePartImage.prototype.updateProperties = function() {\n      this.threePartImage.x = this.object.dstRect.x - this.object.dstRect.width * (this.object.zoom.x - 1.0) * this.object.anchor.x;\n      this.threePartImage.y = this.object.dstRect.y - this.object.dstRect.height * (this.object.zoom.y - 1.0) * this.object.anchor.y;\n      this.threePartImage.width = this.object.dstRect.width;\n      this.threePartImage.height = this.object.dstRect.height;\n      this.threePartImage.firstPartSize = this.object.firstPartSize || 16;\n      this.threePartImage.middlePartSize = this.object.middlePartSize || 1;\n      this.threePartImage.lastPartSize = this.object.lastPartSize || 16;\n      this.threePartImage.visible = this.object.visible;\n      this.threePartImage.ox = -this.object.origin.x;\n      this.threePartImage.oy = -this.object.origin.y;\n      this.threePartImage.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);\n      this.threePartImage.angle = this.object.angle || 0;\n      this.threePartImage.anchor.x = this.object.anchor.x;\n      return this.threePartImage.anchor.y = this.object.anchor.y;\n    };\n\n\n    /**\n    * Updates the padding.\n    * \n    * @method updatePadding\n     */\n\n    Component_ThreePartImage.prototype.updatePadding = function() {\n      if (this.object.padding != null) {\n        this.threePartImage.x += this.object.padding.left;\n        this.threePartImage.y += this.object.padding.top;\n        this.threePartImage.width -= this.object.padding.left + this.object.padding.right;\n        return this.threePartImage.height -= this.object.padding.top + this.object.padding.bottom;\n      }\n    };\n\n\n    /**\n    * Updates the skin-image used to construct the three-part image.\n    *\n    * @method updateImage\n     */\n\n    Component_ThreePartImage.prototype.updateImage = function() {\n      var bitmap;\n      if ((this.object.image != null) && this.image !== this.object.image) {\n        this.image = this.object.image;\n        bitmap = ResourceManager.getBitmap((this.object.imageFolder || \"Graphics/Pictures\") + \"/\" + this.object.image);\n        return this.threePartImage.skin = bitmap;\n      }\n    };\n\n\n    /**\n    * Updates the three-part image.\n    * \n    * @method update\n     */\n\n    Component_ThreePartImage.prototype.update = function() {\n      Component_ThreePartImage.__super__.update.apply(this, arguments);\n      this.object.rIndex = this.threePartImage.index;\n      this.updateProperties();\n      this.updatePadding();\n      return this.updateImage();\n    };\n\n    return Component_ThreePartImage;\n\n  })(gs.Component_Visual);\n\n  gs.Component_ThreePartImage = Component_ThreePartImage;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}