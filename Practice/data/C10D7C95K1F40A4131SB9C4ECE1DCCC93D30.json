{
    "uid": "C10D7C95K1F40A4131SB9C4ECE1DCCC93D30",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_Viewport",
        "type": "game_script",
        "order": 8,
        "parentId": "D3325122KACDEA4515SB731E37A42B9D779F",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_Viewport\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_Viewport extends gs.Component_Visual\n    ###*\n    * A viewport component can contain multiple graphic objects and will automatically \n    * clip them if they move out of the viewport-rectangle. The area of a viewport\n    * can also be tinted or colored. So to tint the whole for example, it enough\n    * to create a viewport taking the whole screen-space and then setting the\n    * tone or color property.\n    *\n    * @module gs\n    * @class Component_Viewport\n    * @extends gs.Component_Visual\n    * @memberof gs\n    * @constructor\n    * @param {Viewport} [viewport=null] - A native viewport object used by the component. If null, the component create a new one. \n    ###\n    constructor: (viewport) ->\n        super()\n\n        ###*\n        * The native viewport-object.\n        * @property viewport\n        * @type gs.Viewport\n        * @protected\n        ###\n        @viewport = viewport\n        \n        ###*\n        * The visibility. If <b>false</b> the viewport and associated graphic objects are not rendered.\n        * @property viewport\n        * @type gs.Viewport\n        * @protected\n        ###\n        @visible = yes\n        \n        @scroll = new gs.Point(0, 0)\n    \n    ###*\n    * Sets up the viewport.\n    * @method setup\n    ###\n    setup: ->\n        if !@viewport\n            @viewport = new gs.Viewport(0, 0, Graphics.width, Graphics.height)\n        @isSetup = yes\n        \n    ###*\n    * Disposes the viewport and all associated graphic objects.\n    * @method dispose\n    ###\n    dispose: -> \n        @viewport.dispose()\n        \n    ###*\n    * Updates the origin-point of the game object.\n    * @method updateOrigin\n    ###\n    updateOrigin: ->\n    \n    ###*\n    * Updates the padding.\n    * @method updatePadding\n    ###\n    updatePadding: ->\n        if @object.padding?\n            @viewport.rect.x += @object.padding.left\n            @viewport.rect.y += @object.padding.top\n            @viewport.rect.width -= @object.padding.left+@object.padding.right\n            @viewport.rect.height -= @object.padding.bottom+@object.padding.bottom\n           \n    ###*\n    * Updates the sprite properties from the game object properties.\n    * @method update\n    ###\n    updateProperties: ->\n        @viewport.rect.x = @object.dstRect.x\n        @viewport.rect.y = @object.dstRect.y\n        @viewport.rect.width = @object.dstRect.width\n        @viewport.rect.height = @object.dstRect.height\n        \n        @viewport.ox = @scroll.x + @object.offset.x\n        @viewport.oy = @scroll.y + @object.offset.y\n        @viewport.anchor.x = @object.anchor.x\n        @viewport.anchor.y = @object.anchor.y\n        @viewport.zoomX = @object.zoom.x\n        @viewport.zoomY = @object.zoom.y\n        @viewport.angle = @object.angle\n        @viewport.z = (@object.zIndex || 0) + (if !@object.parent then 0 else @object.parent.zIndex || 0)\n        \n    ###*\n    * Updates the optional sprite properties from the game object properties.\n    * @method updateOptionalProperties\n    ###\n    updateOptionalProperties: ->\n        if @object.tone?\n            @viewport.tone = @object.tone\n        if @object.color?\n            @viewport.color = @object.color\n        if @object.effects?\n            @viewport.effects = @object.effects\n        if @object.parent?.visible_?\n            @viewport.visible = @object.visible \n        else if @object.parent?.visible?\n            @viewport.visible = @object.visible \n        else\n            @viewport.visible = @object.visible\n            \n    ###*\n    * Updates the viewport.\n    * @method update\n    ###\n    update: ->\n        super\n        \n        @setup() if not @isSetup\n        @viewport.update()\n        @updatePadding()\n        @updateProperties()\n        @updateOptionalProperties()\n        \n        \n        \n\ngs.Component_Viewport = Component_Viewport\n",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_Viewport,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_Viewport = (function(superClass) {\n    extend(Component_Viewport, superClass);\n\n\n    /**\n    * A viewport component can contain multiple graphic objects and will automatically \n    * clip them if they move out of the viewport-rectangle. The area of a viewport\n    * can also be tinted or colored. So to tint the whole for example, it enough\n    * to create a viewport taking the whole screen-space and then setting the\n    * tone or color property.\n    *\n    * @module gs\n    * @class Component_Viewport\n    * @extends gs.Component_Visual\n    * @memberof gs\n    * @constructor\n    * @param {Viewport} [viewport=null] - A native viewport object used by the component. If null, the component create a new one.\n     */\n\n    function Component_Viewport(viewport) {\n      Component_Viewport.__super__.constructor.call(this);\n\n      /**\n      * The native viewport-object.\n      * @property viewport\n      * @type gs.Viewport\n      * @protected\n       */\n      this.viewport = viewport;\n\n      /**\n      * The visibility. If <b>false</b> the viewport and associated graphic objects are not rendered.\n      * @property viewport\n      * @type gs.Viewport\n      * @protected\n       */\n      this.visible = true;\n      this.scroll = new gs.Point(0, 0);\n    }\n\n\n    /**\n    * Sets up the viewport.\n    * @method setup\n     */\n\n    Component_Viewport.prototype.setup = function() {\n      if (!this.viewport) {\n        this.viewport = new gs.Viewport(0, 0, Graphics.width, Graphics.height);\n      }\n      return this.isSetup = true;\n    };\n\n\n    /**\n    * Disposes the viewport and all associated graphic objects.\n    * @method dispose\n     */\n\n    Component_Viewport.prototype.dispose = function() {\n      return this.viewport.dispose();\n    };\n\n\n    /**\n    * Updates the origin-point of the game object.\n    * @method updateOrigin\n     */\n\n    Component_Viewport.prototype.updateOrigin = function() {};\n\n\n    /**\n    * Updates the padding.\n    * @method updatePadding\n     */\n\n    Component_Viewport.prototype.updatePadding = function() {\n      if (this.object.padding != null) {\n        this.viewport.rect.x += this.object.padding.left;\n        this.viewport.rect.y += this.object.padding.top;\n        this.viewport.rect.width -= this.object.padding.left + this.object.padding.right;\n        return this.viewport.rect.height -= this.object.padding.bottom + this.object.padding.bottom;\n      }\n    };\n\n\n    /**\n    * Updates the sprite properties from the game object properties.\n    * @method update\n     */\n\n    Component_Viewport.prototype.updateProperties = function() {\n      this.viewport.rect.x = this.object.dstRect.x;\n      this.viewport.rect.y = this.object.dstRect.y;\n      this.viewport.rect.width = this.object.dstRect.width;\n      this.viewport.rect.height = this.object.dstRect.height;\n      this.viewport.ox = this.scroll.x + this.object.offset.x;\n      this.viewport.oy = this.scroll.y + this.object.offset.y;\n      this.viewport.anchor.x = this.object.anchor.x;\n      this.viewport.anchor.y = this.object.anchor.y;\n      this.viewport.zoomX = this.object.zoom.x;\n      this.viewport.zoomY = this.object.zoom.y;\n      this.viewport.angle = this.object.angle;\n      return this.viewport.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);\n    };\n\n\n    /**\n    * Updates the optional sprite properties from the game object properties.\n    * @method updateOptionalProperties\n     */\n\n    Component_Viewport.prototype.updateOptionalProperties = function() {\n      var ref, ref1;\n      if (this.object.tone != null) {\n        this.viewport.tone = this.object.tone;\n      }\n      if (this.object.color != null) {\n        this.viewport.color = this.object.color;\n      }\n      if (this.object.effects != null) {\n        this.viewport.effects = this.object.effects;\n      }\n      if (((ref = this.object.parent) != null ? ref.visible_ : void 0) != null) {\n        return this.viewport.visible = this.object.visible;\n      } else if (((ref1 = this.object.parent) != null ? ref1.visible : void 0) != null) {\n        return this.viewport.visible = this.object.visible;\n      } else {\n        return this.viewport.visible = this.object.visible;\n      }\n    };\n\n\n    /**\n    * Updates the viewport.\n    * @method update\n     */\n\n    Component_Viewport.prototype.update = function() {\n      Component_Viewport.__super__.update.apply(this, arguments);\n      if (!this.isSetup) {\n        this.setup();\n      }\n      this.viewport.update();\n      this.updatePadding();\n      this.updateProperties();\n      return this.updateOptionalProperties();\n    };\n\n    return Component_Viewport;\n\n  })(gs.Component_Visual);\n\n  gs.Component_Viewport = Component_Viewport;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}