{
    "uid": "2C8E6136K1C73A4120SAF46EC417B6AE1CD7",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_CommonEvent",
        "type": "game_script",
        "order": 15,
        "parentId": "A05E7029K45DBA459BSADF4EEC07A526241A",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_CommonEvent\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_CommonEvent extends gs.Object_Base\n    @objectCodecBlackList = [\"record\", \"commands\", \"parent\"]\n    \n    ###*\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n    ###\n    onDataBundleRestore: (data, context) ->\n        if @rid?\n            @record = RecordManager.commonEvents[@rid]\n            @interpreter?.object = this\n            @commands = @record.commands\n\n        \n    ###*\n    * A common-event object handles a single common event defined in the\n    * database. Common events can run parallel to the actual scene content\n    * or can be just called from a scene to execute a common piece of logic.\n    *\n    * @module gs\n    * @class Object_CommonEvent\n    * @extends gs.Object_Base\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (data) ->\n        super()\n        \n        ###*\n        * The common event database record.\n        * @property record\n        * @type Object\n        ###\n        @record = null\n        \n        ###*\n        * The behavior component to add common-event specific behavior to the object.\n        * @property behavior\n        * @type gs.Component_CommonEventBehavior\n        ###\n        @behavior = new gs.Component_CommonEventBehavior()\n        \n        ###*\n        * An event-emitter to emit events.\n        * @property events\n        * @type gs.Component_EventEmitter\n        ###\n        @events = new gs.Component_EventEmitter()\n        \n        ###*\n        * An interpreter to execute the commands of the common event.\n        * @property interpreter\n        * @type gs.Component_CommandInterpreter\n        ###\n        @interpreter = null\n        \n        @events.object = this\n        \n        if data\n            @restore(data)\n        else\n            @addComponent(@behavior)\n        \n    ###*\n    * Serializes the common-event into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###  \n    toDataBundle: ->\n        @commands = @record.commands\n        return {\n            behavior: @behavior.toDataBundle(),\n            interpreter: @interpreter?.toDataBundle(),\n            recordId: @record.index\n        }\n       \n    ###*\n    * Restores the common-event from a data-bundle\n    *\n    * @method restore\n    * @param {Object} bundle- The data-bundle.\n    ###     \n    restore: (data) ->\n        if @behavior?\n            @removeComponent(@behavior)\n            \n        @behavior = new gs.Component_CommonEventBehavior()\n        @addComponent(@behavior)\n        @record = RecordManager.commonEvents[data.recordId]\n        \n        @behavior.restore(data.behavior)\n        if data.interpreter and @interpreter\n            @interpreter.restore(data.interpreter)\n            @interpreter.context.set(@record.id, @record)\n            @commands = @record.commands\n       \n        \n        \n        \n        \ngs.Object_CommonEvent = Object_CommonEvent",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_CommonEvent,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_CommonEvent = (function(superClass) {\n    extend(Object_CommonEvent, superClass);\n\n    Object_CommonEvent.objectCodecBlackList = [\"record\", \"commands\", \"parent\"];\n\n\n    /**\n    * Called if this object instance is restored from a data-bundle. It can be used\n    * re-assign event-handler, anonymous functions, etc.\n    * \n    * @method onDataBundleRestore.\n    * @param Object data - The data-bundle\n    * @param gs.ObjectCodecContext context - The codec-context.\n     */\n\n    Object_CommonEvent.prototype.onDataBundleRestore = function(data, context) {\n      var ref;\n      if (this.rid != null) {\n        this.record = RecordManager.commonEvents[this.rid];\n        if ((ref = this.interpreter) != null) {\n          ref.object = this;\n        }\n        return this.commands = this.record.commands;\n      }\n    };\n\n\n    /**\n    * A common-event object handles a single common event defined in the\n    * database. Common events can run parallel to the actual scene content\n    * or can be just called from a scene to execute a common piece of logic.\n    *\n    * @module gs\n    * @class Object_CommonEvent\n    * @extends gs.Object_Base\n    * @memberof gs\n    * @constructor\n     */\n\n    function Object_CommonEvent(data) {\n      Object_CommonEvent.__super__.constructor.call(this);\n\n      /**\n      * The common event database record.\n      * @property record\n      * @type Object\n       */\n      this.record = null;\n\n      /**\n      * The behavior component to add common-event specific behavior to the object.\n      * @property behavior\n      * @type gs.Component_CommonEventBehavior\n       */\n      this.behavior = new gs.Component_CommonEventBehavior();\n\n      /**\n      * An event-emitter to emit events.\n      * @property events\n      * @type gs.Component_EventEmitter\n       */\n      this.events = new gs.Component_EventEmitter();\n\n      /**\n      * An interpreter to execute the commands of the common event.\n      * @property interpreter\n      * @type gs.Component_CommandInterpreter\n       */\n      this.interpreter = null;\n      this.events.object = this;\n      if (data) {\n        this.restore(data);\n      } else {\n        this.addComponent(this.behavior);\n      }\n    }\n\n\n    /**\n    * Serializes the common-event into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_CommonEvent.prototype.toDataBundle = function() {\n      var ref;\n      this.commands = this.record.commands;\n      return {\n        behavior: this.behavior.toDataBundle(),\n        interpreter: (ref = this.interpreter) != null ? ref.toDataBundle() : void 0,\n        recordId: this.record.index\n      };\n    };\n\n\n    /**\n    * Restores the common-event from a data-bundle\n    *\n    * @method restore\n    * @param {Object} bundle- The data-bundle.\n     */\n\n    Object_CommonEvent.prototype.restore = function(data) {\n      if (this.behavior != null) {\n        this.removeComponent(this.behavior);\n      }\n      this.behavior = new gs.Component_CommonEventBehavior();\n      this.addComponent(this.behavior);\n      this.record = RecordManager.commonEvents[data.recordId];\n      this.behavior.restore(data.behavior);\n      if (data.interpreter && this.interpreter) {\n        this.interpreter.restore(data.interpreter);\n        this.interpreter.context.set(this.record.id, this.record);\n        return this.commands = this.record.commands;\n      }\n    };\n\n    return Object_CommonEvent;\n\n  })(gs.Object_Base);\n\n  gs.Object_CommonEvent = Object_CommonEvent;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}