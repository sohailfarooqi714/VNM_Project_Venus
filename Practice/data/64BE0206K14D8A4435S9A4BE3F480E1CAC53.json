{
    "uid": "64BE0206K14D8A4435S9A4BE3F480E1CAC53",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Component_SpreadLayoutBehavior",
        "type": "game_script",
        "order": 5,
        "parentId": "01A95DA3K01E8A4CB4SBE17E790BCE1FC035",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Component_SpreadLayoutBehavior\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Component_SpreadLayoutBehavior extends gs.Component_LayoutBehavior\n    ###*\n    * Turns a game object into a spread-layout and spreads all sub-objects\n    * evenly over the layout-space vertically or horizontally. The game object needs a \n    * container-component.\n    *\n    * @module gs\n    * @class Component_SpreadLayoutBehavior\n    * @extends gs.Component_LayoutBehavior\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: (orientation) ->\n        super\n        \n        ###*\n        * The orientation of the spread-layout.\n        * @property orientation\n        * @type gs.Orientation.\n        ###\n        @orientation = orientation || 0\n\n    ###*\n    * Updates the spread-layout.\n    *\n    * @method update\n    ###\n    update: ->\n        super\n        @object.visible_ = @object.visible and (!@object.parent or @object.parent.visible)\n        if @orientation == 0\n            @layoutHorizontal()\n        else\n            @layoutVertical()\n    \n    ###*\n    * Spreads all sub-objects evenly over the layout-space horizontally.\n    *\n    * @method layoutHorizontal\n    ###        \n    layoutHorizontal: ->\n        count = @object.controls.length\n        @object.visible_ = @object.visible and (!@object.parent or @object.parent.visible)\n        y = 0\n        rect = @object.dstRect\n        \n        for i in [0...count]\n            control = @object.controls[i]\n            control.parent = @object\n            control.update()\n\n            control.dstRect.x = Math.floor((rect.width-control.dstRect.width) / (count-1)) * i\n            \n            if !control.clipRect\n                control.clipRect = @object.clipRect\n            if control.alignmentY == 1\n                control.dstRect.y = y + Math.round((rect.height-(control.dstRect.height+control.margin.top+control.margin.bottom)) / 2)\n      \n        if @object.clipRect?\n            @object.clipRect.set(rect.x, rect.y, rect.width, rect.height)  \n      \n    ###*\n    * Spreads all sub-objects evenly over the layout-space vertically.\n    *\n    * @method layoutHorizontal\n    ###              \n    layoutVertical: ->\n        count = @object.controls.length\n        @object.visible_ = @object.visible and (!@object.parent or @object.parent.visible)\n        x = 0\n        rect = @object.dstRect\n        \n        for i in [0...count]\n            control = @object.controls[i]\n            control.parent = @object\n            control.update()\n            \n            control.dstRect.y = Math.floor(rect.height / count) * i\n            \n            if !control.clipRect\n                control.clipRect = @object.clipRect\n                \n            if control.alignmentX == 1\n                control.dstRect.x = x + Math.round((rect.width-(control.dstRect.width+control.margin.left+control.margin.right)) / 2)\n      \n        if @object.clipRect?\n            @object.clipRect.set(rect.x, rect.y, rect.width, rect.height) \n   \ngs.Component_SpreadLayoutBehavior = Component_SpreadLayoutBehavior",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Component_SpreadLayoutBehavior,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Component_SpreadLayoutBehavior = (function(superClass) {\n    extend(Component_SpreadLayoutBehavior, superClass);\n\n\n    /**\n    * Turns a game object into a spread-layout and spreads all sub-objects\n    * evenly over the layout-space vertically or horizontally. The game object needs a \n    * container-component.\n    *\n    * @module gs\n    * @class Component_SpreadLayoutBehavior\n    * @extends gs.Component_LayoutBehavior\n    * @memberof gs\n    * @constructor\n     */\n\n    function Component_SpreadLayoutBehavior(orientation) {\n      Component_SpreadLayoutBehavior.__super__.constructor.apply(this, arguments);\n\n      /**\n      * The orientation of the spread-layout.\n      * @property orientation\n      * @type gs.Orientation.\n       */\n      this.orientation = orientation || 0;\n    }\n\n\n    /**\n    * Updates the spread-layout.\n    *\n    * @method update\n     */\n\n    Component_SpreadLayoutBehavior.prototype.update = function() {\n      Component_SpreadLayoutBehavior.__super__.update.apply(this, arguments);\n      this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);\n      if (this.orientation === 0) {\n        return this.layoutHorizontal();\n      } else {\n        return this.layoutVertical();\n      }\n    };\n\n\n    /**\n    * Spreads all sub-objects evenly over the layout-space horizontally.\n    *\n    * @method layoutHorizontal\n     */\n\n    Component_SpreadLayoutBehavior.prototype.layoutHorizontal = function() {\n      var control, count, i, j, rect, ref, y;\n      count = this.object.controls.length;\n      this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);\n      y = 0;\n      rect = this.object.dstRect;\n      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        control = this.object.controls[i];\n        control.parent = this.object;\n        control.update();\n        control.dstRect.x = Math.floor((rect.width - control.dstRect.width) / (count - 1)) * i;\n        if (!control.clipRect) {\n          control.clipRect = this.object.clipRect;\n        }\n        if (control.alignmentY === 1) {\n          control.dstRect.y = y + Math.round((rect.height - (control.dstRect.height + control.margin.top + control.margin.bottom)) / 2);\n        }\n      }\n      if (this.object.clipRect != null) {\n        return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);\n      }\n    };\n\n\n    /**\n    * Spreads all sub-objects evenly over the layout-space vertically.\n    *\n    * @method layoutHorizontal\n     */\n\n    Component_SpreadLayoutBehavior.prototype.layoutVertical = function() {\n      var control, count, i, j, rect, ref, x;\n      count = this.object.controls.length;\n      this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);\n      x = 0;\n      rect = this.object.dstRect;\n      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        control = this.object.controls[i];\n        control.parent = this.object;\n        control.update();\n        control.dstRect.y = Math.floor(rect.height / count) * i;\n        if (!control.clipRect) {\n          control.clipRect = this.object.clipRect;\n        }\n        if (control.alignmentX === 1) {\n          control.dstRect.x = x + Math.round((rect.width - (control.dstRect.width + control.margin.left + control.margin.right)) / 2);\n        }\n      }\n      if (this.object.clipRect != null) {\n        return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);\n      }\n    };\n\n    return Component_SpreadLayoutBehavior;\n\n  })(gs.Component_LayoutBehavior);\n\n  gs.Component_SpreadLayoutBehavior = Component_SpreadLayoutBehavior;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}