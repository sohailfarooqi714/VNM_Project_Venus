{
    "uid": "916DB18CK81C4A43FASB766E9ED1E87FDC8A",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Message",
        "type": "game_script",
        "order": 4,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Message\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass MessageSettings\n    ###*\n    * Stores the different kind of settings for a message object such as\n    * auto-erase, wait-at-end, backlog writing, etc.\n    *\n    * @module ui\n    * @class MessageSettings\n    * @memberof ui\n    * @constructor\n    ### \n    constructor: ->\n        ###*\n        * The domain the object belongs to.\n        * @property domain\n        * @type string\n        ###\n        @domain = \"com.degica.vnm.default\"\n        \n        ###*\n        * Indicates if the message should wait for user-action to continue.\n        * @property waitAtEnd\n        * @type boolean\n        * @default true\n        ###\n        @waitAtEnd = yes\n        \n        ###*\n        * Indicates if the message should automatically erase it's content \n        * before displaying the next message.\n        * @property autoErase\n        * @type boolean\n        * @default true\n        ###\n        @autoErase = yes\n        \n        ###*\n        * Indicates if the message should be added to the backlog.\n        * @property backlog\n        * @type boolean\n        * @default true\n        ###\n        @backlog = yes\n        \n        ###*\n        * Spacing between text lines in pixels.\n        * @property lineSpacing\n        * @type number\n        * @default 0\n        ###\n        @lineSpacing = 0\n        \n        ###*\n        * Left and right padding of a text line in pixels.\n        * @property linePadding\n        * @type number\n        * @default 6\n        ###\n        @linePadding = 6\n        \n        ###*\n        * Spacing between text paragraphs in pixels. A paragraph is a single\n        * message added if the <b>autoErase</b> property is off.\n        * @property paragraphSpacing\n        * @type number\n        * @default 0\n        ###\n        @paragraphSpacing = 0\n        \n        ###*\n        * Indicates if the defined text-color of the currently speaking character should\n        * be used as message text color. That is useful for NVL style messages.\n        * @property useCharacterColor\n        * @type boolean\n        * @default false\n        ###\n        @useCharacterColor = no\n        \nui.MessageSettings = MessageSettings\n\nclass Object_Message extends ui.Object_UIElement\n    @objectCodecBlackList = [\"parent\", \"controlsByStyle\", \"parentsByStyle\", \"styles\", \"activeStyles\"]\n    \n    ###*\n    * A message object to display game messages on screen.\n    *\n    * @module ui\n    * @class Object_Message\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n    ### \n    constructor: ->\n        super\n        @visible = no\n        \n        ###*\n        * The font used for the message text.\n        * @property font\n        * @type gs.Font\n        ###\n        @font = new Font(\"Verdana\", Math.round(9 / 240 * Graphics.height))\n        @font.border = no\n        @font.borderColor = new Color(0, 0, 0)\n        \n        ###*\n        * Message specific settings such as auto-erase, wait-at-end, etc.\n        * @property settings\n        * @type ui.MessageSettings\n        ###\n        @settings = new ui.MessageSettings()\n        \n        ###*\n        * All message paragraphs \n        * @property messages\n        * @type Object[]\n        ###\n        @messages = []\n        \n        ###*\n        * The text-renderer used to render the message text.\n        * @property textRenderer\n        * @type gs.Component_MessageTextRenderer\n        ###\n        @textRenderer = new gs.Component_MessageTextRenderer()\n\n        ###*\n        * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n        * @property animator\n        * @type gs.Component_Animator\n        ###\n        @animator = new gs.Animator()\n        \n        ###*\n        * The UI object's source rectangle on screen.\n        * @property srcRect\n        * @type gs.Rect\n        ###\n        @srcRect = new Rect(0, 0, 1, 1)\n        \n        @message = new vn.Component_MessageBehavior()\n        \n        ###*\n        * The UI object's component to add message-specific behavior.\n        * @property behavior\n        * @type vn.Component_MessageBehavior\n        ###\n        @behavior = @message\n        \n        @addComponent(@animator)\n        @addComponent(@textRenderer)\n        @addComponent(@message)\n        \n    \n    ###*\n    * Restores the object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n    ###   \n    restore: (data) ->\n        super(data)\n        @font = new Font(data.font.name, data.font.size)\n        @font.restore(data.font)\n        @dstRect.width = data.width\n        @dstRect.height = data.height\n        \n    ###*\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n    ###   \n    toDataBundle: -> \n        bundle = super()\n        \n        bundle.font = @font.toDataBundle()\n        bundle.width = @dstRect.width\n        bundle.height = @dstRect.height\n        \n        return bundle\n        \nui.Object_Message = Object_Message",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var MessageSettings, Object_Message,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  MessageSettings = (function() {\n\n    /**\n    * Stores the different kind of settings for a message object such as\n    * auto-erase, wait-at-end, backlog writing, etc.\n    *\n    * @module ui\n    * @class MessageSettings\n    * @memberof ui\n    * @constructor\n     */\n    function MessageSettings() {\n\n      /**\n      * The domain the object belongs to.\n      * @property domain\n      * @type string\n       */\n      this.domain = \"com.degica.vnm.default\";\n\n      /**\n      * Indicates if the message should wait for user-action to continue.\n      * @property waitAtEnd\n      * @type boolean\n      * @default true\n       */\n      this.waitAtEnd = true;\n\n      /**\n      * Indicates if the message should automatically erase it's content \n      * before displaying the next message.\n      * @property autoErase\n      * @type boolean\n      * @default true\n       */\n      this.autoErase = true;\n\n      /**\n      * Indicates if the message should be added to the backlog.\n      * @property backlog\n      * @type boolean\n      * @default true\n       */\n      this.backlog = true;\n\n      /**\n      * Spacing between text lines in pixels.\n      * @property lineSpacing\n      * @type number\n      * @default 0\n       */\n      this.lineSpacing = 0;\n\n      /**\n      * Left and right padding of a text line in pixels.\n      * @property linePadding\n      * @type number\n      * @default 6\n       */\n      this.linePadding = 6;\n\n      /**\n      * Spacing between text paragraphs in pixels. A paragraph is a single\n      * message added if the <b>autoErase</b> property is off.\n      * @property paragraphSpacing\n      * @type number\n      * @default 0\n       */\n      this.paragraphSpacing = 0;\n\n      /**\n      * Indicates if the defined text-color of the currently speaking character should\n      * be used as message text color. That is useful for NVL style messages.\n      * @property useCharacterColor\n      * @type boolean\n      * @default false\n       */\n      this.useCharacterColor = false;\n    }\n\n    return MessageSettings;\n\n  })();\n\n  ui.MessageSettings = MessageSettings;\n\n  Object_Message = (function(superClass) {\n    extend(Object_Message, superClass);\n\n    Object_Message.objectCodecBlackList = [\"parent\", \"controlsByStyle\", \"parentsByStyle\", \"styles\", \"activeStyles\"];\n\n\n    /**\n    * A message object to display game messages on screen.\n    *\n    * @module ui\n    * @class Object_Message\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_Message() {\n      Object_Message.__super__.constructor.apply(this, arguments);\n      this.visible = false;\n\n      /**\n      * The font used for the message text.\n      * @property font\n      * @type gs.Font\n       */\n      this.font = new Font(\"Verdana\", Math.round(9 / 240 * Graphics.height));\n      this.font.border = false;\n      this.font.borderColor = new Color(0, 0, 0);\n\n      /**\n      * Message specific settings such as auto-erase, wait-at-end, etc.\n      * @property settings\n      * @type ui.MessageSettings\n       */\n      this.settings = new ui.MessageSettings();\n\n      /**\n      * All message paragraphs \n      * @property messages\n      * @type Object[]\n       */\n      this.messages = [];\n\n      /**\n      * The text-renderer used to render the message text.\n      * @property textRenderer\n      * @type gs.Component_MessageTextRenderer\n       */\n      this.textRenderer = new gs.Component_MessageTextRenderer();\n\n      /**\n      * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.\n      * @property animator\n      * @type gs.Component_Animator\n       */\n      this.animator = new gs.Animator();\n\n      /**\n      * The UI object's source rectangle on screen.\n      * @property srcRect\n      * @type gs.Rect\n       */\n      this.srcRect = new Rect(0, 0, 1, 1);\n      this.message = new vn.Component_MessageBehavior();\n\n      /**\n      * The UI object's component to add message-specific behavior.\n      * @property behavior\n      * @type vn.Component_MessageBehavior\n       */\n      this.behavior = this.message;\n      this.addComponent(this.animator);\n      this.addComponent(this.textRenderer);\n      this.addComponent(this.message);\n    }\n\n\n    /**\n    * Restores the object from a data-bundle.\n    *\n    * @method restore\n    * @param {Object} data - The data-bundle.\n     */\n\n    Object_Message.prototype.restore = function(data) {\n      Object_Message.__super__.restore.call(this, data);\n      this.font = new Font(data.font.name, data.font.size);\n      this.font.restore(data.font);\n      this.dstRect.width = data.width;\n      return this.dstRect.height = data.height;\n    };\n\n\n    /**\n    * Serializes the object into a data-bundle.\n    *\n    * @method toDataBundle\n    * @return {Object} The data-bundle.\n     */\n\n    Object_Message.prototype.toDataBundle = function() {\n      var bundle;\n      bundle = Object_Message.__super__.toDataBundle.call(this);\n      bundle.font = this.font.toDataBundle();\n      bundle.width = this.dstRect.width;\n      bundle.height = this.dstRect.height;\n      return bundle;\n    };\n\n    return Object_Message;\n\n  })(ui.Object_UIElement);\n\n  ui.Object_Message = Object_Message;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}