{
    "uid": "39918FB5KE3E4A4B23S86E3EAD7993FE1DA0",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "Object_Panel",
        "type": "game_script",
        "order": 5,
        "parentId": "4F9670D7KD392A494FS953DE4377B04AA7A6",
        "folder": false,
        "content": "# ===================================================================\n#\n#   Script: Object_Panel\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass Object_Panel extends ui.Object_UIElement\n    ###*\n    * An UI panel object display a colored rectangle area on screen or can also\n    * be completely transparent. A panel can be modal to block all user-input\n    * for UI object placed behind it. \n    * \n    * So for example: To make a confirmation dialog\n    * like \"Do you really want to exit?\" a panel is useful to avoid that the user\n    * can click on other UI elements behind the confirmation dialog.\n    *\n    * @module ui\n    * @class Object_Panel\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n    ###  \n    constructor: (x, y, width, height) ->\n        super()\n        @dstRect.set(x || 0, y || 0, width || 100, height || 100)\n        \n        ###*\n        * The UI object's visual-component to display the game object on screen.\n        * @property visual\n        * @type gs.Component_Quad\n        ###\n        @visual = new gs.Component_Quad()\n        \n        ###*\n        * Indicates if the panel is modal. A modal panel blocks all user-input for UI objects\n        * behind the panel.\n        * @property modal\n        * @type boolean\n        ###\n        @modal = no\n        \n        @addComponent(@visual)\n        @addComponent(new gs.Component_PanelBehavior())\n        \nui.Object_Panel = Object_Panel",
        "compiledContent": "// Generated by CoffeeScript 1.12.7\n(function() {\n  var Object_Panel,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  Object_Panel = (function(superClass) {\n    extend(Object_Panel, superClass);\n\n\n    /**\n    * An UI panel object display a colored rectangle area on screen or can also\n    * be completely transparent. A panel can be modal to block all user-input\n    * for UI object placed behind it. \n    * \n    * So for example: To make a confirmation dialog\n    * like \"Do you really want to exit?\" a panel is useful to avoid that the user\n    * can click on other UI elements behind the confirmation dialog.\n    *\n    * @module ui\n    * @class Object_Panel\n    * @extends ui.Object_UIElement\n    * @memberof ui\n    * @constructor\n     */\n\n    function Object_Panel(x, y, width, height) {\n      Object_Panel.__super__.constructor.call(this);\n      this.dstRect.set(x || 0, y || 0, width || 100, height || 100);\n\n      /**\n      * The UI object's visual-component to display the game object on screen.\n      * @property visual\n      * @type gs.Component_Quad\n       */\n      this.visual = new gs.Component_Quad();\n\n      /**\n      * Indicates if the panel is modal. A modal panel blocks all user-input for UI objects\n      * behind the panel.\n      * @property modal\n      * @type boolean\n       */\n      this.modal = false;\n      this.addComponent(this.visual);\n      this.addComponent(new gs.Component_PanelBehavior());\n    }\n\n    return Object_Panel;\n\n  })(ui.Object_UIElement);\n\n  ui.Object_Panel = Object_Panel;\n\n}).call(this);\n"
    },
    "summary": [
        "name",
        "type",
        "order"
    ],
    "externalItems": []
}