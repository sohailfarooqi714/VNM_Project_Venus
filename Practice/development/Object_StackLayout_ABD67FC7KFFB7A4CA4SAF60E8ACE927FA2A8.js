// Generated by CoffeeScript 1.12.7
(function() {
  var Object_StackLayout,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_StackLayout = (function(superClass) {
    extend(Object_StackLayout, superClass);

    Object_StackLayout.accessors("zIndex", {
      set: function(v) {
        return this.zIndex_ = v;
      },
      get: function() {
        return (this.zIndex_ || 0) + (!this.parent ? 0 : this.parent.zIndex || 0);
      }
    });

    Object_StackLayout.accessors("scrollOffsetY", {
      set: function(v) {
        if (v !== this.scrollOffsetY_) {
          this.scrollOffsetY_ = v;
          return this.needsFullUpdate = true;
        }
      },
      get: function() {
        return this.scrollOffsetY_;
      }
    });


    /**
    * A stack-layout which layouts all it sub-objects
    * like a stack vertically or horizontally.
    * 
    * @module ui
    * @class Object_StackLayout
    * @extends ui.Object_UIElement
    * @memberof ui
    * @constructor
     */

    function Object_StackLayout(x, y, width, height, orientation) {
      Object_StackLayout.__super__.constructor.call(this);
      this.dstRect.set(x || 0, y || 0, width || 1, height || 1);

      /**
      * Indicates if the layout is resizable.
      * @property resizable
      * @type boolean
       */
      this.resizable = false;

      /**
      * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type gs.Component_Animator
       */
      this.animator = new gs.Component_Animator();

      /**
      * The layout's sub-objects.
      * @property controls
      * @type ui.Object_UIElement[]
       */
      this.controls = [];

      /**
      * The stack-layout's orientation. 
      * @property orientation
      * @type gs.Orientation
       */
      this.orientation = orientation === "vertical" ? 1 : 0;

      /**
      * The stack-layout's scroll-offset on y-axis. 
      * @property scrollOffsetY
      * @type number
       */
      this.scrollOffsetY = 0;

      /**
      * Indicates if the layouts resizes to fit its content.
      * @property sizeToFit
      * @type boolean
       */
      this.sizeToFit = false;

      /**
      * The behavior component to add stack-layout specific behavior.
      * @property behavior
      * @type gs.Component_StackLayoutBehavior
       */
      this.behavior = new gs.Component_StackLayoutBehavior();
      this.behavior.orientation = this.orientation;
      this.addComponent(this.behavior);
      this.addComponent(this.animator);
    }

    return Object_StackLayout;

  })(ui.Object_UIElement);

  ui.Object_StackLayout = Object_StackLayout;

}).call(this);
