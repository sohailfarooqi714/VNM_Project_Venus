// Generated by CoffeeScript 1.12.7
(function() {
  var Component_WebStartBehavior,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_WebStartBehavior = (function(superClass) {
    extend(Component_WebStartBehavior, superClass);


    /**
    * The web-start scene is used if the game has been loaded via mobile webbrowser. That web-start
    * scene lets the player tap on the screen to start the actual game which is necessary to make
    * audio-playback working because of browser-security.
    *
    * @module gs
    * @class Component_WebStartBehavior 
    * @extends gs.Component_LayoutSceneBehavior
    * @memberof gs
     */

    function Component_WebStartBehavior() {
      Component_WebStartBehavior.__super__.constructor.apply(this, arguments);
    }


    /**
    * Initializes the web-start scene. It just creates a full-screen
    * DIV layer with a touch event-handler to play a sound if tapped and then switch
    * to the language-menu / intro-scene to start the actual game.
    *
    * @method initialize
     */

    Component_WebStartBehavior.prototype.initialize = function() {
      Component_WebStartBehavior.__super__.initialize.apply(this, arguments);
      window.music = new Audio();
      window.music.src = gs.Application.getPlatformSpecificAudioFilePath("Audio/Sounds/choice_confirm_01");
      this.sound = ResourceManager.getAudioBuffer("Audio/Sounds/choice_confirm_01");
      this.button = jQuery("<div></div>");
      this.button.css("position", "absolute");
      this.button.css("left", "0px");
      this.button.css("top", "0px");
      this.button.width(Graphics.width);
      this.button.height(Graphics.height);
      this.button.css("background-color", "transparent");
      this.button.css("z-order", 999999);
      this.button.click((function(_this) {
        return function(e) {
          _this.sound.play();
          window.music.play();
          _this.button.remove();
          _this.button = null;
          return setTimeout(function() {
            return SceneManager.switchTo(new gs.Object_Layout("languageMenuLayout"));
          }, 450);
        };
      })(this));
      this.button[0].addEventListener("touchstart", (function(_this) {
        return function(e) {
          _this.sound.play();
          window.music.play();
          _this.button.remove();
          _this.button = null;
          SceneManager.switchTo(new gs.Object_Layout("languageMenuLayout"));
          return setTimeout(function() {
            window.music.pause();
            window.music = null;
            return SceneManager.switchTo(new gs.Object_Layout("languageMenuLayout"));
          }, 450);
        };
      })(this));
      return jQuery(document.body).append(this.button);
    };


    /**
    * Prepares all visual game objects for the scene.
    *
    * @method prepareVisual
     */

    Component_WebStartBehavior.prototype.prepareVisual = function() {
      return Component_WebStartBehavior.__super__.prepareVisual.apply(this, arguments);
    };


    /**
    * Prepares all data for the scene and loads the necessary graphic and audio resources.
    *
    * @method prepareData
     */

    Component_WebStartBehavior.prototype.prepareData = function() {
      return Component_WebStartBehavior.__super__.prepareData.apply(this, arguments);
    };


    /**
    * Update the scene's content. Here you can implement any kind of additional logic
    * you want.
    *
    * @method updateContent
     */

    Component_WebStartBehavior.prototype.updateContent = function() {
      return Component_WebStartBehavior.__super__.updateContent.apply(this, arguments);
    };

    return Component_WebStartBehavior;

  })(gs.Component_LayoutSceneBehavior);

  gs.Component_WebStartBehavior = Component_WebStartBehavior;

}).call(this);
