// Generated by CoffeeScript 1.12.7
(function() {
  var Component_PanelBehavior,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_PanelBehavior = (function(superClass) {
    extend(Component_PanelBehavior, superClass);


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    Component_PanelBehavior.prototype.onDataBundleRestore = function(data, context) {
      return this.setupEventHandlers();
    };


    /**
    * A panel-component gives a game-object the same capabilities like
    * a visual object but has no graphical representation. So a panel has
    * a position and a size.<br>
    * <br>
    * It can be used to make invisible hotspot-areas or modal-blocking areas for
    * example.
    *
    * @module gs
    * @class Component_PanelBehavior
    * @extends gs.Component_Visual
    * @memberof gs
    * @constructor
     */

    function Component_PanelBehavior() {}


    /**
    * Adds event-handlers for mouse/touch events
    *
    * @method setupEventHandlers
     */

    Component_PanelBehavior.prototype.setupEventHandlers = function() {
      if (this.object.modal) {
        gs.GlobalEventManager.on("mouseUp", ((function(_this) {
          return function(e) {
            if (_this.object.modal) {
              return e.breakChain = true;
            }
          };
        })(this)), null, this.object);
        gs.GlobalEventManager.on("mouseDown", ((function(_this) {
          return function(e) {
            if (_this.object.modal) {
              return e.breakChain = true;
            }
          };
        })(this)), null, this.object);
        return gs.GlobalEventManager.on("mouseMoved", ((function(_this) {
          return function(e) {
            if (_this.object.modal) {
              return e.breakChain = true;
            }
          };
        })(this)), null, this.object);
      }
    };


    /**
    * Initializes the panel component.
    *
    * @method setup
     */

    Component_PanelBehavior.prototype.setup = function() {
      return this.setupEventHandlers();
    };


    /**
    * Disposes the component.
    *
    * @method dispose
     */

    Component_PanelBehavior.prototype.dispose = function() {
      Component_PanelBehavior.__super__.dispose.apply(this, arguments);
      gs.GlobalEventManager.offByOwner("mouseUp", this.object);
      gs.GlobalEventManager.offByOwner("mouseDown", this.object);
      return gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
    };

    return Component_PanelBehavior;

  })(gs.Component_Visual);

  gs.Component_PanelBehavior = Component_PanelBehavior;

}).call(this);
