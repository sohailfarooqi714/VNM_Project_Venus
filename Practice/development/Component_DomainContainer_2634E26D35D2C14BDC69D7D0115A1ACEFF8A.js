// Generated by CoffeeScript 1.12.7
(function() {
  var Component_DomainContainer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_DomainContainer = (function(superClass) {
    extend(Component_DomainContainer, superClass);


    /**
    * A container component allows an object to have sub-objects.
    * @module gs
    * @class Component_DomainContainer
    * @memberof gs
    * @constructor
     */

    function Component_DomainContainer(disposeBehavior) {
      Component_DomainContainer.__super__.constructor.call(this, disposeBehavior);

      /**
      * The current domain. The default domain is an empty string. Please use
      * <b>changeDomain</b> to change the current domain.
      * @property domain
      * @readOnly
       */
      this.domain = "com.degica.vnm.default";
      this.domains = ["com.degica.vnm.default"];
    }


    /**
    * Changes the component and all sub-objects.
    * @method changeDomain
    * @param {string} domain - The domain to change to.
     */

    Component_DomainContainer.prototype.dispose = function() {
      var domain, j, len, ref;
      Component_DomainContainer.__super__.dispose.apply(this, arguments);
      ref = this.domains;
      for (j = 0, len = ref.length; j < len; j++) {
        domain = ref[j];
        if (domain !== this.domain) {
          this.object.subObjects = this.object.subObjectsByDomain[domain];
          this.object.disposeObjects();
        }
      }
      return this.object.subObjects = this.object.subObjectsByDomain[this.domain];
    };


    /**
    * Changes the current domain.
    * @method changeDomain
    * @param {string} domain - The domain to change to.
     */

    Component_DomainContainer.prototype.changeDomain = function(domain) {
      var objects;
      this.domain = domain;
      objects = this.object.subObjectsByDomain[domain];
      if (!objects) {
        objects = this.object.subObjectsByDomain[domain] = [];
        this.domains = Object.keys(this.object.subObjectsByDomain);
      }
      return this.object.subObjects = objects;
    };


    /**
    * Sets the visibility of all sub objects of all domains.
    * @method setVisible
    * @param {boolean} visible - The new visibility.
     */

    Component_DomainContainer.prototype.setVisible = function(visible) {
      var domain, j, len, ref, results, subObject, subObjects;
      ref = this.domains;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        domain = ref[j];
        subObjects = this.object.subObjectsByDomain[domain];
        if (subObjects) {
          results.push((function() {
            var k, len1, results1;
            results1 = [];
            for (k = 0, len1 = subObjects.length; k < len1; k++) {
              subObject = subObjects[k];
              if (subObject) {
                subObject.visible = visible;
                results1.push(subObject.update());
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          })());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };


    /**
    * Updates all sub-objects and sorts them if necessary. It also removes
    * disposed objects from the list of sub-objects.
    * @method update
     */

    Component_DomainContainer.prototype.update = function() {
      var domain, i, j, len, ref, subObject, subObjects;
      ref = this.domains;
      for (j = 0, len = ref.length; j < len; j++) {
        domain = ref[j];
        subObjects = this.object.subObjectsByDomain[domain];
        i = 0;
        while (i < subObjects.length) {
          subObject = subObjects[i];
          if (subObject != null ? subObject.active : void 0) {
            if (subObject.disposed) {
              subObjects[i] = null;
            } else {
              subObject.update();
            }
          }
          i++;
        }
      }
      return null;
    };

    return Component_DomainContainer;

  })(gs.Component_Container);

  gs.Component_DomainContainer = Component_DomainContainer;

}).call(this);
