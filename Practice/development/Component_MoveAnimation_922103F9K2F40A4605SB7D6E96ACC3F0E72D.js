// Generated by CoffeeScript 1.12.7
(function() {
  var Component_MoveAnimation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_MoveAnimation = (function(superClass) {
    extend(Component_MoveAnimation, superClass);


    /**
    * Executes a move-animation on a game-object.
    *
    * @module gs
    * @class Component_MoveAnimation
    * @extends gs.Component_Animation
    * @memberof gs
    * @constructor
     */

    function Component_MoveAnimation(data) {
      Component_MoveAnimation.__super__.constructor.apply(this, arguments);

      /**
      * The easing-object used for the animation.
      * @property easing
      * @type gs.Easing
       */
      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);

      /**
      * The move-animation type (move-in, move-out, etc.).
      * @property animationType
      * @type gs.MoveAnimationType
       */
      this.animationType = (data != null ? data.animationType : void 0) || 0;
    }


    /**
    * Serializes the move-animation into a data-bundle.
    *
    * @method toDataBundle
     */

    Component_MoveAnimation.prototype.toDataBundle = function() {
      return {
        easing: this.easing,
        animationType: this.animationType
      };
    };


    /**
    * Updates the move-animation.
    *
    * @method update
     */

    Component_MoveAnimation.prototype.update = function() {
      Component_MoveAnimation.__super__.update.call(this);
      if (!this.easing.isRunning) {
        return;
      }
      this.easing.updatePosition();
      this.updateCoordinates();
      if (!this.easing.isRunning) {
        if (!this.easing.isEndless) {
          this.object.dstRect.x = Math.round(this.object.dstRect.x);
          this.object.dstRect.y = Math.round(this.object.dstRect.y);
        }
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      }
    };


    /**
    * Updates the game object's coordinates depending on animation type.
    *
    * @method updateCoordinates
    * @protected
     */

    Component_MoveAnimation.prototype.updateCoordinates = function() {
      switch (this.animationType) {
        case 0:
          this.object.offset.x = Math.floor(this.easing.x);
          return this.object.offset.y = Math.floor(this.easing.y);
        case 1:
          this.object.dstRect.x = Math.floor(this.easing.x);
          return this.object.dstRect.y = Math.floor(this.easing.y);
        case 2:
          this.object.visual.scroll.x = Math.round(this.easing.x);
          return this.object.visual.scroll.y = Math.round(this.easing.y);
      }
    };


    /**
    * Scrolls the game object's content with a specified speed if supported.
    *
    * @method scroll
    * @param {number} speedX The speed on x-axis in pixels per frame.
    * @param {number} speedY The speed on y-axis in pixels per frame.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type used for the animation.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MoveAnimation.prototype.scroll = function(speedX, speedY, duration, easingType, callback) {
      this.move(speedX, speedY, duration, easingType, callback);
      return this.animationType = 2;
    };


    /**
    * Scrolls the game object to a specified position.
    *
    * @method scrollTo
    * @param {number} x The x-coordinate of the position.
    * @param {number} y The y-coordinate of the position.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MoveAnimation.prototype.scrollTo = function(x, y, duration, easingType, callback) {
      this.animationType = 2;
      this.callback = callback;
      if (this.object.visual.scroll.x === x && this.object.visual.scroll.y === y) {
        return;
      }
      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
      if (duration === 0 || this.isInstantSkip()) {
        this.object.visual.scroll.x = x;
        this.object.visual.scroll.y = y;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        this.easing.start(this.object.visual.scroll.x, this.object.visual.scroll.y, x, y, duration);
        this.targetX = x;
        return this.targetY = y;
      }
    };


    /**
    * Moves the game object with a specified speed.
    *
    * @method move
    * @param {number} speedX The speed on x-axis in pixels per frame.
    * @param {number} speedY The speed on y-axis in pixels per frame.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type used for the animation.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MoveAnimation.prototype.move = function(speedX, speedY, duration, easingType, callback) {
      this.animationType = 1;
      this.targetX = duration * speedX;
      this.targetY = duration * speedY;
      this.callback = callback;
      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
      if (duration === 0 || this.isInstantSkip()) {
        return this.easing.startEndless(speedX, speedY);
      } else {
        return this.easing.start(this.object.dstRect.x, this.object.dstRect.y, this.targetX, this.targetY, duration);
      }
    };


    /**
    * Moves the game object to a specified position.
    *
    * @method moveTo
    * @param {number} x The x-coordinate of the position.
    * @param {number} y The y-coordinate of the position.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MoveAnimation.prototype.moveTo = function(x, y, duration, easingType, callback) {
      this.animationType = 1;
      this.callback = callback;
      if (this.object.dstRect.x === x && this.object.dstRect.y === y) {
        return;
      }
      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
      if (duration === 0 || this.isInstantSkip()) {
        this.easing.x = x;
        this.easing.y = y;
        return this.updateCoordinates();
      } else {
        this.easing.start(this.object.dstRect.x, this.object.dstRect.y, x, y, duration);
        this.targetX = x;
        return this.targetY = y;
      }
    };


    /**
    * Lets a game object appear on screen from left, top, right or bottom using 
    * a move-animation
    *
    * @method moveIn
    * @param {number} x The x-coordinate of the target-position.
    * @param {number} y The y-coordinate of the target-position.
    * @param {number} type The movement-direction from where the game object should move-in.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MoveAnimation.prototype.moveIn = function(x, y, type, duration, easing, callback) {
      var height, rect, width;
      this.animationType = 0;
      this.object.offset.x = 0;
      this.object.offset.y = 0;
      if (duration === 0 || this.isInstantSkip()) {
        this.object.update();
        return typeof callback === "function" ? callback(this.object, this) : void 0;
      }
      this.easing.type = easing;
      this.callback = callback;
      rect = this.object.angle != null ? this.object.dstRect.rotate(this.object.angle) : this.object.dstRect;
      width = rect.width * this.object.zoom.x;
      height = rect.height * this.object.zoom.y;
      x = this.object.dstRect.x - (width - rect.width) * this.object.anchor.x;
      y = this.object.dstRect.y - (height - rect.height) * this.object.anchor.y;
      switch (type) {
        case 0:
          this.object.offset.y = 0;
          this.object.offset.x = -(x + width + this.object.origin.x);
          break;
        case 1:
          this.object.offset.y = -(y + height + this.object.origin.y);
          this.object.offset.x = 0;
          break;
        case 2:
          this.object.offset.x = (this.object.viewport || Graphics.viewport).rect.width - x;
          this.object.offset.y = 0;
          break;
        case 3:
          this.object.offset.x = 0;
          this.object.offset.y = (this.object.viewport || Graphics.viewport).rect.height - y;
      }
      this.object.update();
      return this.easing.start(this.object.offset.x, this.object.offset.y, 0, 0, duration);
    };


    /**
    * Lets a game object disappear from screen to the left, top, right or bottom using 
    * a move-animation
    *
    * @method moveOut
    * @param {number} type The movement-direction in which the game object should move-out.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MoveAnimation.prototype.moveOut = function(type, duration, easing, callback) {
      var height, rect, viewport, width, x, y;
      this.animationType = 0;
      this.easing.type = easing;
      this.callback = callback;
      x = 0;
      y = 0;
      viewport = Graphics.viewport;
      rect = this.object.angle != null ? this.object.dstRect.rotate(this.object.angle) : this.object.dstRect;
      width = rect.width * this.object.zoom.x;
      height = rect.height * this.object.zoom.y;
      x = this.object.dstRect.x - (width - rect.width) * this.object.anchor.x;
      y = this.object.dstRect.y - (height - rect.height) * this.object.anchor.y;
      switch (type) {
        case 0:
          x = -(this.object.origin.x + x + width);
          y = 0;
          break;
        case 1:
          y = -(this.object.origin.y + y + height);
          x = 0;
          break;
        case 2:
          x = (this.object.viewport || Graphics.viewport).rect.width;
          y = 0;
          break;
        case 3:
          y = (this.object.viewport || Graphics.viewport).rect.height;
          x = 0;
      }
      if (duration === 0 || this.isInstantSkip()) {
        this.object.offset.x = x;
        this.object.offset.y = y;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        return this.easing.start(this.object.offset.x, this.object.offset.y, x, y, duration);
      }
    };

    return Component_MoveAnimation;

  })(gs.Component_Animation);

  gs.Component_MoveAnimation = Component_MoveAnimation;

}).call(this);
