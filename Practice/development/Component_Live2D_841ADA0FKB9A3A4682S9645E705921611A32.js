// Generated by CoffeeScript 1.12.7
(function() {
  var Component_Live2D,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_Live2D = (function(superClass) {
    extend(Component_Live2D, superClass);


    /**
    * A Live2D component which allows a game-object to become a animated
    * Live2D character.
    *
    * @module vn
    * @class Component_Live2D
    * @extends gs.Component
    * @memberof vn
    * @constructor
     */

    function Component_Live2D() {
      Component_Live2D.__super__.constructor.apply(this, arguments);

      /**
      * The Live2D graphics object.
      * @property l2dObject
      * @type gs.Live2DObject
      * @readOnly
       */
      this.l2dObject = null;

      /**
      * The character's Live2D motion. Set name-property to an empty string
      * to disable motion and use a generated default idle-motion.
      * @property motion
      * @type gs.Live2DMotion
      * @default { name: "", loop: yes }
       */
      this.motion = {
        name: "",
        loop: true

        /**
        * The character's Live2D motion-group. Can be null
        * @property motionGroup
        * @type gs.Live2DMotionGroup
        * @default null
         */
      };
      this.motionGroup = null;

      /**
      * The character's Live2D expression. Set name-property to an empty string
      * to use default expression.
      * @property expression
      * @type gs.Live2DExpression
      * @default { name: "" }
       */
      this.expression = {
        name: ""

        /**
        * @property talkingDuration
        * @type number
        * @protected
         */
      };
      this.talkingDuration = 1;

      /**
      * @property talkingStep
      * @type number
      * @protected
       */
      this.talkingStep = 0;

      /**
      * @property talkingStep
      * @type number[]
      * @protected
       */
      this.talkingSteps = [0, 0.5, 1];
    }


    /**
    * Disposes the component and Live2D object.
    *
    * @method dispose
     */

    Component_Live2D.prototype.dispose = function() {
      Component_Live2D.__super__.dispose.apply(this, arguments);
      return this.l2dObject.dispose();
    };


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    Component_Live2D.prototype.onDataBundleRestore = function(data, context) {
      this.expression = {
        name: ""
      };
      this.motion = {
        name: "",
        loop: true
      };
      this.motionGroup = null;
      this.updateMotion();
      this.updateExpression();
      return this.updateMotionGroup();
    };


    /**
    * Setup the Live2D component. This method is automatically called by the
    * system.
    * @method setup
     */

    Component_Live2D.prototype.setup = function() {
      return this.l2dObject = new gs.Live2DObject();
    };


    /**
    * Updates the character's Live2D motion.
    *
    * @method updateMotion
     */

    Component_Live2D.prototype.updateMotion = function() {
      if (this.motion !== this.object.motion) {
        this.motion = this.object.motion;
        if (this.motion.name) {
          this.l2dObject.playMotion(this.motion.name, this.motion.fadeInTime);
          return this.l2dObject.loopMotion = this.motion.loop;
        }
      }
    };


    /**
    * Updates the character's Live2D motion-group.
    *
    * @method updateMotionGroup
     */

    Component_Live2D.prototype.updateMotionGroup = function() {
      var ref;
      if (this.motionGroup !== this.object.motionGroup) {
        this.motionGroup = this.object.motionGroup;
        if ((ref = this.motionGroup) != null ? ref.name : void 0) {
          this.l2dObject.playMotionGroup(this.motionGroup.name, this.motionGroup.playType);
          return this.l2dObject.loopMotion = this.motionGroup.loop;
        }
      }
    };


    /**
    * Updates the character's Live2D expression.
    *
    * @method updateExpression
     */

    Component_Live2D.prototype.updateExpression = function() {
      if (this.expression.name !== this.object.expression.name) {
        this.expression = this.object.expression;
        return this.l2dObject.setExpression(this.expression.name, this.expression.fadeInTime);
      }
    };


    /**
    * Updates the Live2D object properties from the game object properties.
    *
    * @method updateProperties
     */

    Component_Live2D.prototype.updateProperties = function() {
      this.l2dObject.model = this.object.model;
      this.object.dstRect.width = this.l2dObject.width;
      this.object.dstRect.height = this.l2dObject.height;
      this.l2dObject.x = this.object.dstRect.x + this.object.offset.x;
      this.l2dObject.y = this.object.dstRect.y + this.object.offset.y;
      this.l2dObject.z = this.object.zIndex;
      this.l2dObject.visible = this.object.visible;
      this.l2dObject.opacity = this.object.opacity;
      this.l2dObject.zoomX = this.object.zoom.x;
      this.l2dObject.zoomY = this.object.zoom.y;
      this.l2dObject.anchor.x = this.object.anchor.x;
      this.l2dObject.anchor.y = this.object.anchor.y;
      this.l2dObject.angle = this.object.angle;
      this.l2dObject.tone = this.object.tone;
      return this.l2dObject.color = this.object.color;
    };


    /**
    * Updates the optional Live2D object properties from the game object properties.
    *
    * @method updateOptionalProperties
     */

    Component_Live2D.prototype.updateOptionalProperties = function() {
      if (this.object.viewport != null) {
        this.l2dObject.viewport = this.object.viewport;
      }
      if (this.object.effects != null) {
        return this.l2dObject.effects = this.object.effects;
      }
    };


    /**
    * Updates the Live2D object and its talking-animation.
    *
    * @method update
     */

    Component_Live2D.prototype.update = function() {
      if ((this.object.model != null) && !this.object.model.initialized) {
        this.object.model.initialize();
      }
      this.updateProperties();
      this.updateMotion();
      this.updateMotionGroup();
      this.updateExpression();
      this.updateOptionalProperties();
      return this.updateTalking();
    };


    /**
    * Updates the Live2D character's talking-animation.
    *
    * @method update
     */

    Component_Live2D.prototype.updateTalking = function() {
      var step;
      step = 0;
      if (this.object.talking) {
        this.l2dObject.talking = true;
        if (AudioManager.voice != null) {
          return this.l2dObject.talkingVolume = (AudioManager.voice.averageVolume || 0) / 100;
        } else {
          this.talkingDuration--;
          if (this.talkingDuration <= 0) {
            while (this.talkingStep === step) {
              step = Math.round(Math.random() * 2);
            }
            this.talkingDuration = 5;
            this.talkingStep = step;
            return this.l2dObject.talkingVolume = this.talkingSteps[step];
          }
        }
      } else {
        return this.l2dObject.talking = false;
      }
    };

    return Component_Live2D;

  })(gs.Component);

  vn.Component_Live2D = Component_Live2D;

  gs.Component_Live2D = Component_Live2D;

}).call(this);
