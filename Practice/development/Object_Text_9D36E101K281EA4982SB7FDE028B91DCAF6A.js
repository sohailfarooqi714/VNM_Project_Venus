// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Text,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Text = (function(superClass) {
    extend(Object_Text, superClass);

    Object_Text.accessors("text", {
      set: function(v) {
        if (v !== this.text_) {
          this.text_ = v;
          return this.needsUpdate = true;
        }
      },
      get: function() {
        return this.text_;
      }
    });

    Object_Text.accessors("visible", {
      set: function(v) {
        if (v !== this.visible_) {
          this.visible_ = v;
          this.needsUpdate = true;
          return this.fullRefresh();
        }
      },
      get: function() {
        return this.visible_ && (!this.parent || this.parent.visible);
      }
    });


    /**
    * A UI object to display text on screen.
    *
    * @module ui
    * @class Object_Text
    * @extends gs.Object_Text
    * @memberof ui
    * @constructor
     */

    function Object_Text() {
      Object_Text.__super__.constructor.call(this);

      /**
      * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object
      * will not change any binding-targets for the current binding-execution period.
      * @property breakBindingChain
      * @type boolean
       */
      this.breakBindingChain = false;
      this.dstRect = new ui.UIElementRectangle(this);
      this.wordWrap = true;
      this.controlsByStyle = new Array(ui.UIManager.stylesById.length);
      this.styles = [];
      this.activeStyles = [];
      this.data = new Array(10);

      /**
      * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.
      * @property padding
      * @type ui.Space
       */
      this.padding = new ui.Space(0, 0, 0, 0);

      /**
      * The UI object's margin. The margin defines an extra space around the UI object. 
      * The default is { left: 0, top: 0, right: 0, bottom: 0 }.
      * @property margin
      * @type Object
       */
      this.margin = new ui.Space(0, 0, 0, 0);

      /**
      * An event-emitter to emit events.
      * @property events
      * @type gs.Component_EventEmitter
       */
      this.events = new gs.EventEmitter();
      this.addComponent(this.events);
    }

    return Object_Text;

  })(gs.Object_Text);

  ui.Object_Text = Object_Text;

}).call(this);
