// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Viewport,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Viewport = (function(superClass) {
    extend(Object_Viewport, superClass);

    Object_Viewport.objectCodecBlackList = ["parent"];


    /**
    * A game object used for viewports.
    *
    * @module gs
    * @class Object_Viewport
    * @extends gs.Object_Visual
    * @memberof gs
    * @constructor
     */

    function Object_Viewport(viewport) {
      Object_Viewport.__super__.constructor.call(this);
      if (viewport) {
        this.dstRect = new Rect(viewport.rect.x, viewport.rect.y, viewport.rect.width, viewport.rect.height);
      } else {
        this.dstRect = new Rect(0, 0, Graphics.width, Graphics.height);
      }

      /**
      * The color tone of the object used for the visual presentation.
      * @property tone
      * @type gs.Tone
       */
      this.tone = new Tone(0, 0, 0, 0);

      /**
      * The color of the object used for the visual presentation.
      * @property color
      * @type gs.Color
       */
      this.color = new Color(255, 255, 255, 0);

      /**
      * The rotation-angle of the picture in degrees. The rotation center depends on the
      * anchor-point.
      * @property angle
      * @type number
       */
      this.angle = 0;

      /**
      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type vn.Component_Animator
       */
      this.animator = new gs.Component_Animator();

      /**
      * The object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_Sprite
       */
      this.visual = new gs.Component_Viewport(viewport);
      this.addComponent(this.visual);
      this.addComponent(this.animator);
    }


    /**
    * Serializes the object into a data-bundle.
    *
    * @method toDataBundle
    * @return {Object} The data-bundle.
     */

    Object_Viewport.prototype.toDataBundle = function() {
      var components, result;
      components = this.componentsToDataBundle(gs.Component_Animation);
      result = {
        dstRect: this.dstRect,
        origin: this.origin,
        zIndex: this.zIndex,
        motionBlur: this.motionBlur,
        zoom: this.zoom,
        angle: this.angle,
        anchor: this.anchor,
        offset: this.offset,
        tone: this.tone,
        image: this.image,
        components: components
      };
      return result;
    };

    return Object_Viewport;

  })(gs.Object_Visual);

  gs.Object_Viewport = Object_Viewport;

}).call(this);
