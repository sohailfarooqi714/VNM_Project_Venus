// Generated by CoffeeScript 1.12.7
(function() {
  var ResourceLoader;

  ResourceLoader = (function() {

    /**
    * The resource helps to load a bunch of resources from different kind of
    * data structures.
    *
    * @module gs
    * @class ResourceLoader
    * @memberof gs
    * @constructor
    * @static
     */
    function ResourceLoader() {
      this.loadedScenesByUid = {};
      this.loadedCommonEventsById = [];
    }


    /**
    * Loads all graphics for the specified list of custom layout types/templates
    *
    * @method loadUiTypesGraphics
    * @param {Object[]} types - An array of custom layout types/templates
    * @static
     */

    ResourceLoader.prototype.loadUiTypesGraphics = function(types) {
      var k;
      for (k in types) {
        this.loadUiLayoutGraphics(types[k]);
      }
      return null;
    };


    /**
    * Loads all graphics for the specified layout-descriptor.
    *
    * @method loadUiGraphicsFromObject
    * @param {Object} layout - The layout descriptor.
    * @static
     */

    ResourceLoader.prototype.loadUiGraphicsFromObject = function(layout) {
      var k;
      for (k in layout) {
        if (k === "image" || k === "fullImage") {
          ResourceManager.getBitmap("Graphics/Pictures/" + layout[k]);
        } else if (k === "video") {
          ResourceManager.getVideo("Movies/" + layout[k]);
        }
      }
      return null;
    };


    /**
    * Loads all graphics for the specified layout-descriptor.
    *
    * @method loadUiDataFieldsGraphics
    * @param {Object} layout - The layout descriptor.
    * @static
     */

    ResourceLoader.prototype.loadUiDataFieldsGraphics = function(layout) {
      var image, j, k, l, len, o, ref;
      for (k in layout) {
        if (layout[k] instanceof Array) {
          ref = layout[k];
          for (l = 0, len = ref.length; l < len; l++) {
            o = ref[l];
            for (j in o) {
              if (j === "image" || j === "fullImage") {
                image = o[j];
                if (!image) {
                  continue;
                }
                if (image.startsWith("data:")) {
                  ResourceManager.getBitmap(o[j]);
                } else {
                  ResourceManager.getBitmap("Graphics/Pictures/" + o[j]);
                }
              }
            }
          }
        }
      }
      return null;
    };


    /**
    * Loads all graphics for the specified layout-descriptor.
    *
    * @method loadUiDataFieldsGraphics
    * @param {Object} layout - The layout descriptor.
    * @static
     */

    ResourceLoader.prototype.loadUiLayoutGraphics = function(layout) {
      var action, actions, animation, control, descriptor, graphic, image, l, len, len1, len10, len11, len2, len3, len4, len5, len6, len7, len8, len9, m, music, musicFile, n, object, p, q, r, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s, sel, sound, soundFile, style, sub, t, u, v, video, w, x;
      if (layout.preload != null) {
        if (layout.preload.graphics != null) {
          ref = layout.preload.graphics;
          for (l = 0, len = ref.length; l < len; l++) {
            graphic = ref[l];
            if (graphic.name != null) {
              ResourceManager.getBitmap((graphic.folder || 'Graphics/Pictures') + "/" + (ui.Component_FormulaHandler.fieldValue(null, graphic.name)));
            } else {
              object = ui.Component_FormulaHandler.fieldValue(null, graphic.path);
              for (m = 0, len1 = object.length; m < len1; m++) {
                sub = object[m];
                if (sub != null) {
                  image = ui.Component_FormulaHandler.fieldValue(sub, graphic.image);
                  if (image != null) {
                    ResourceManager.getBitmap("Graphics/Pictures/" + image);
                  }
                }
              }
            }
          }
        }
        if (layout.preload.videos != null) {
          ref1 = layout.preload.videos;
          for (n = 0, len2 = ref1.length; n < len2; n++) {
            video = ref1[n];
            if (video.name != null) {
              ResourceManager.getVideo((video.folder || 'Movies') + "/" + video.name);
            }
          }
        }
        if (layout.preload.music != null) {
          ref2 = layout.preload.music;
          for (p = 0, len3 = ref2.length; p < len3; p++) {
            music = ref2[p];
            if (music != null) {
              musicFile = ui.Component_FormulaHandler.fieldValue(layout, music.name || music);
              if (typeof musicFile === "object") {
                musicFile = musicFile.name;
              }
              if (musicFile) {
                ResourceManager.getAudioBuffer((music.folder || 'Audio/Music') + "/" + musicFile);
              }
            }
          }
        }
        if (layout.preload.sounds != null) {
          ref3 = layout.preload.sounds;
          for (q = 0, len4 = ref3.length; q < len4; q++) {
            sound = ref3[q];
            if (sound != null) {
              soundFile = ui.Component_FormulaHandler.fieldValue(layout, sound.name || sound);
              if (typeof soundFile === "object") {
                soundFile = soundFile.name;
              }
              if (soundFile) {
                ResourceManager.getAudioBuffer((sound.folder || 'Audio/Sounds') + "/" + soundFile);
              }
            }
          }
        }
      }
      if (layout.images != null) {
        ref4 = layout.images;
        for (r = 0, len5 = ref4.length; r < len5; r++) {
          image = ref4[r];
          image = ui.Component_FormulaHandler.fieldValue(layout, image);
          if (image) {
            ResourceManager.getBitmap("Graphics/Pictures/" + image);
          }
        }
      }
      if (layout.animations != null) {
        ref5 = layout.animations;
        for (s = 0, len6 = ref5.length; s < len6; s++) {
          descriptor = ref5[s];
          ref6 = descriptor.flow;
          for (t = 0, len7 = ref6.length; t < len7; t++) {
            animation = ref6[t];
            switch (animation.type) {
              case "sound":
                ResourceManager.getAudioBuffer("Audio/Sounds/" + animation.sound);
                break;
              case "changeImages":
                ref7 = animation.images;
                for (u = 0, len8 = ref7.length; u < len8; u++) {
                  image = ref7[u];
                  ResourceManager.getBitmap("Graphics/Pictures/" + image);
                }
                break;
              case "maskTo":
                ResourceManager.getBitmap("Graphics/Masks/" + animation.mask);
            }
            if (animation.sound != null) {
              ResourceManager.getAudioBuffer("Audio/Sounds/" + animation.sound);
            }
          }
        }
      }
      if (layout.image != null) {
        image = ui.Component_FormulaHandler.fieldValue(layout, layout.image);
        if (image) {
          ResourceManager.getBitmap("Graphics/Pictures/" + image);
        }
      }
      if (layout.video != null) {
        ResourceManager.getVideo("Movies/" + layout.video);
      }
      if (layout.customFields != null) {
        this.loadUiGraphicsFromObject(layout.customFields);
      }
      if (((ref8 = layout.customFields) != null ? ref8.actions : void 0) != null) {
        ref9 = layout.customFields.actions;
        for (v = 0, len9 = ref9.length; v < len9; v++) {
          action = ref9[v];
          if (action.name === "playVoice" || action.name === "playSound") {
            AudioManager.loadSound(action.params.name);
          }
        }
      }
      if ((layout.actions != null) || (layout.action != null)) {
        actions = layout.action != null ? [layout.action] : layout.actions;
        for (w = 0, len10 = actions.length; w < len10; w++) {
          action = actions[w];
          if (action.name === "playVoice" || action.name === "playSound") {
            AudioManager.loadSound(action.params.name);
          }
        }
      }
      if (layout.params) {
        this.loadUiLayoutGraphics(layout.params);
      }
      if (layout.template != null) {
        this.loadUiLayoutGraphics(layout.template);
      }
      if ((layout.style != null) && (ui.UiFactory.styles[layout.style] != null)) {
        this.loadUiLayoutGraphics(ui.UiFactory.styles[layout.style]);
        for (sel in ui.UIManager.selectors) {
          style = ui.UIManager.styles[layout.style + ":" + sel];
          if (style) {
            this.loadUiLayoutGraphics(style);
          }
        }
      }
      if (ui.UiFactory.customTypes[layout.type] != null) {
        this.loadUiLayoutGraphics(ui.UiFactory.customTypes[layout.type]);
      }
      if (layout.controls != null) {
        ref10 = layout.controls;
        results = [];
        for (x = 0, len11 = ref10.length; x < len11; x++) {
          control = ref10[x];
          results.push(this.loadUiLayoutGraphics(control));
        }
        return results;
      }
    };


    /**
    * Loads all system sounds.
    *
    * @method loadSystemSounds
    * @static
     */

    ResourceLoader.prototype.loadSystemSounds = function() {
      var l, len, ref, results, sound;
      ref = RecordManager.system.sounds;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        sound = ref[l];
        results.push(AudioManager.loadSound(sound));
      }
      return results;
    };


    /**
    * Loads all system graphics.
    *
    * @method loadSystemGraphics
    * @static
     */

    ResourceLoader.prototype.loadSystemGraphics = function() {
      var l, len, ref, ref1, ref2, ref3, ref4, slot;
      ref = GameManager.saveGameSlots;
      for (l = 0, len = ref.length; l < len; l++) {
        slot = ref[l];
        if ((slot.thumb != null) && slot.thumb.length > 0) {
          ResourceManager.getBitmap(slot.thumb);
        }
      }
      if ((ref1 = RecordManager.system.cursor) != null ? ref1.name : void 0) {
        ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.cursor.name);
      }
      if ((ref2 = RecordManager.system.titleScreen) != null ? ref2.name : void 0) {
        ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.titleScreen.name);
      }
      if ((ref3 = RecordManager.system.languageScreen) != null ? ref3.name : void 0) {
        ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.languageScreen.name);
      }
      if ((ref4 = RecordManager.system.menuBackground) != null ? ref4.name : void 0) {
        ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.menuBackground.name);
      }
      return null;
    };


    /**
    * Loads all resources needed by the specified list of commands.
    *
    * @method loadEventCommandsGraphics
    * @param {Object[]} commands - The list of commands.
    * @return {boolean} Indicates if data needs to be loaded.
    * @static
     */

    ResourceLoader.prototype.loadEventCommandsData = function(commands) {
      this.loadedScenesByUid = {};
      return this._loadEventCommandsData(commands);
    };

    ResourceLoader.prototype._loadEventCommandsData = function(commands) {
      var command, l, len, result, sceneDocument;
      if (commands == null) {
        return false;
      }
      result = false;
      for (l = 0, len = commands.length; l < len; l++) {
        command = commands[l];
        switch (command.id) {
          case "vn.Choice":
            if (command.params.action.scene) {
              sceneDocument = DataManager.getDocument(command.params.action.scene.uid);
              if (sceneDocument) {
                if (!result) {
                  result = !sceneDocument.loaded;
                }
                if (sceneDocument.loaded && !this.loadedScenesByUid[sceneDocument.uid]) {
                  this.loadedScenesByUid[sceneDocument.uid] = true;
                  if (!result) {
                    result = this._loadEventCommandsData(sceneDocument.items.commands);
                  }
                }
              }
            }
            break;
          case "vn.CallScene":
            if (command.params.scene) {
              sceneDocument = DataManager.getDocument(command.params.scene.uid);
              if (sceneDocument) {
                if (!result) {
                  result = !sceneDocument.loaded;
                }
                if (sceneDocument.loaded && !this.loadedScenesByUid[sceneDocument.uid]) {
                  this.loadedScenesByUid[sceneDocument.uid] = true;
                  if (!result) {
                    result = this._loadEventCommandsData(sceneDocument.items.commands);
                  }
                }
              }
            }
        }
      }
      return result;
    };


    /**
    * Preloads all resources needed by the specified common event.
    *
    * @method loadCommonEventResources
    * @param {string} eventId - ID of the common event to preload the resources for.
    * @static
     */

    ResourceLoader.prototype.loadCommonEventResources = function(eventId) {
      var commonEvent;
      commonEvent = RecordManager.commonEvents[eventId];
      if ((commonEvent != null) && !this.loadedCommonEventsById[eventId]) {
        this.loadedCommonEventsById[eventId] = true;
        return this._loadEventCommandsGraphics(commonEvent.commands);
      }
    };


    /**
    * Loads all resources needed by the specified list of commands.
    *
    * @method loadEventCommandsGraphics
    * @param {Object[]} commands - The list of commands.
    * @static
     */

    ResourceLoader.prototype.loadEventCommandsGraphics = function(commands) {
      this.loadedScenesByUid = {};
      this.loadedCommonEventsById = [];
      return this._loadEventCommandsGraphics(commands);
    };

    ResourceLoader.prototype._loadEventCommandsGraphics = function(commands) {
      var actor, actorId, animation, animationId, character, command, commonEvent, effect, eid, enemy, expression, expressionId, hotspot, i, i1, image, j1, l, len, len1, len10, len11, len12, len13, len14, len15, len2, len3, len4, len5, len6, len7, len8, len9, m, moveCommand, n, p, param, q, r, record, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref34, ref35, ref36, ref37, ref38, ref39, ref4, ref40, ref41, ref42, ref43, ref44, ref5, ref6, ref7, ref8, ref9, s, sceneDocument, sound, t, u, v, w, x, y, z;
      if (commands == null) {
        return;
      }
      for (l = 0, len = commands.length; l < len; l++) {
        command = commands[l];
        switch (command.id) {
          case "gs.StartTimer":
            if (command.params.action.type === 1) {
              this.loadCommonEventResources(command.params.action.data.commonEventId);
            }
            break;
          case "gs.CallCommonEvent":
            commonEvent = RecordManager.commonEvents[command.params.commonEventId];
            if (commonEvent != null) {
              ref = commonEvent.parameters;
              for (i = m = 0, len1 = ref.length; m < len1; i = ++m) {
                param = ref[i];
                if (param.stringValueType === "sceneId" && ((ref1 = command.params.parameters) != null ? ref1.values[i] : void 0)) {
                  sceneDocument = DataManager.getDocument(command.params.parameters.values[i]);
                  if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {
                    this.loadedScenesByUid[sceneDocument.uid] = true;
                    this._loadEventCommandsGraphics(sceneDocument.items.commands);
                  }
                }
              }
              if (!this.loadedCommonEventsById[command.params.commonEventId]) {
                this.loadedCommonEventsById[command.params.commonEventId] = true;
                this._loadEventCommandsGraphics(commonEvent.commands);
              }
            }
            break;
          case "vn.CallScene":
            sceneDocument = DataManager.getDocument(command.params.scene.uid);
            if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {
              this.loadedScenesByUid[sceneDocument.uid] = true;
              this._loadEventCommandsGraphics(sceneDocument.items.commands);
            }
            break;
          case "gs.ChangeTransition":
            ResourceManager.getBitmap("Graphics/Masks/" + ((ref2 = command.params.graphic) != null ? ref2.name : void 0));
            break;
          case "gs.ScreenTransition":
            ResourceManager.getBitmap("Graphics/Masks/" + ((ref3 = command.params.graphic) != null ? ref3.name : void 0));
            break;
          case "vn.ChangeBackground":
            if (command.params.graphic != null) {
              ResourceManager.getBitmap("Graphics/Backgrounds/" + command.params.graphic.name);
            }
            if (((ref4 = command.params.animation) != null ? ref4.type : void 0) === gs.AnimationTypes.MASKING && ((ref5 = command.params.animation.mask) != null ? ref5.graphic : void 0)) {
              ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
            }
            break;
          case "vn.L2DJoinScene":
            if (command.params.model != null) {
              ResourceManager.getLive2DModel("Live2D/" + command.params.model.name);
            }
            break;
          case "vn.CharacterJoinScene":
            character = RecordManager.characters[command.params.characterId];
            if (character != null) {
              expressionId = (ref6 = command.params.expressionId) != null ? ref6 : character.defaultExpressionId;
              if (expressionId != null) {
                record = RecordManager.characterExpressions[expressionId];
                if (record != null) {
                  if (record.idle) {
                    ref7 = record.idle;
                    for (n = 0, len2 = ref7.length; n < len2; n++) {
                      image = ref7[n];
                      ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                    }
                  }
                  if (record.talking) {
                    ref8 = record.talking;
                    for (p = 0, len3 = ref8.length; p < len3; p++) {
                      image = ref8[p];
                      ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                    }
                  }
                }
              }
            }
            if (command.params.animation.type === gs.AnimationTypes.MASKING && (command.params.animation.mask.graphic != null)) {
              ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
            }
            break;
          case "vn.CharacterChangeExpression":
            record = RecordManager.characterExpressions[command.params.expressionId];
            if (record != null) {
              ref9 = record.idle;
              for (q = 0, len4 = ref9.length; q < len4; q++) {
                image = ref9[q];
                ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
              }
              ref10 = record.talking;
              for (r = 0, len5 = ref10.length; r < len5; r++) {
                image = ref10[r];
                ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
              }
            }
            if (command.params.animation.type === gs.AnimationTypes.MASKING && (command.params.animation.mask.graphic != null)) {
              ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
            }
            break;
          case "gs.ShowPartialMessage":
            if (command.params.voice != null) {
              AudioManager.loadSound(command.params.voice);
            }
            break;
          case "vn.Choice":
            if (command.params.action.scene) {
              sceneDocument = DataManager.getDocument(command.params.action.scene.uid);
              if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {
                this.loadedScenesByUid[sceneDocument.uid] = true;
                this._loadEventCommandsGraphics(sceneDocument.items.commands);
              }
            }
            if (command.params.action.commonEventId) {
              this.loadCommonEventResources(command.params.action.commonEventId);
            }
            break;
          case "gs.ShowMessage":
          case "gs.ShowMessageNVL":
          case "gs.ShowText":
            if (command.params.animations != null) {
              ref11 = command.params.animations;
              for (s = 0, len6 = ref11.length; s < len6; s++) {
                eid = ref11[s];
                animation = RecordManager.animations[eid];
                if ((animation != null) && animation.graphic.name) {
                  ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
                }
              }
            }
            if (command.params.expressions != null) {
              ref12 = command.params.expressions;
              for (t = 0, len7 = ref12.length; t < len7; t++) {
                eid = ref12[t];
                expression = RecordManager.characterExpressions[eid];
                if (expression != null) {
                  if (expression.idle) {
                    ref13 = expression.idle;
                    for (u = 0, len8 = ref13.length; u < len8; u++) {
                      image = ref13[u];
                      ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                    }
                  }
                  if (expression.talking) {
                    ref14 = expression.talking;
                    for (v = 0, len9 = ref14.length; v < len9; v++) {
                      image = ref14[v];
                      ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                    }
                  }
                }
              }
            }
            if (command.params.voice != null) {
              AudioManager.loadSound(command.params.voice);
            }
            record = RecordManager.characterExpressions[command.params.expressionId];
            if (record != null) {
              if (record.idle) {
                ref15 = record.idle;
                for (w = 0, len10 = ref15.length; w < len10; w++) {
                  image = ref15[w];
                  ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                }
              }
              if (record.talking) {
                ref16 = record.talking;
                for (x = 0, len11 = ref16.length; x < len11; x++) {
                  image = ref16[x];
                  ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                }
              }
            }
            break;
          case "gs.AddHotspot":
            if ((ref17 = command.params.baseGraphic) != null ? ref17.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.baseGraphic.name);
            }
            if ((ref18 = command.params.hoverGraphic) != null ? ref18.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.hoverGraphic.name);
            }
            if ((ref19 = command.params.selectedGraphic) != null ? ref19.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selectedGraphic.name);
            }
            if ((ref20 = command.params.selectedHoverGraphic) != null ? ref20.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selectedHoverGraphic.name);
            }
            if ((ref21 = command.params.unselectedGraphic) != null ? ref21.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.unselectedGraphic.name);
            }
            if (command.params.actions != null) {
              if (command.params.actions.onClick.type === 1) {
                this.loadCommonEventResources(command.params.actions.onClick.commonEventId);
              }
              if (command.params.actions.onEnter.type === 1) {
                this.loadCommonEventResources(command.params.actions.onEnter.commonEventId);
              }
              if (command.params.actions.onLeave.type === 1) {
                this.loadCommonEventResources(command.params.actions.onLeave.commonEventId);
              }
              if (command.params.actions.onSelect.type === 1) {
                this.loadCommonEventResources(command.params.actions.onSelect.commonEventId);
              }
              if (command.params.actions.onDeselect.type === 1) {
                this.loadCommonEventResources(command.params.actions.onDeselect.commonEventId);
              }
              if (command.params.actions.onDrag.type === 1) {
                this.loadCommonEventResources(command.params.actions.onDrag.commonEventId);
              }
              if (command.params.actions.onDrop.type === 1) {
                this.loadCommonEventResources(command.params.actions.onDrop.commonEventId);
              }
              if (command.params.actions.onDropReceive.type === 1) {
                this.loadCommonEventResources(command.params.actions.onDropReceive.commonEventId);
              }
            }
            break;
          case "gs.ShowPicture":
            if ((ref22 = command.params.graphic) != null ? ref22.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.graphic.name);
            }
            if (((ref23 = command.params.animation) != null ? ref23.type : void 0) === gs.AnimationTypes.MASKING) {
              ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
            }
            break;
          case "gs.ShowImageMap":
            if ((ref24 = command.params.ground) != null ? ref24.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.ground.name);
            }
            if ((ref25 = command.params.hover) != null ? ref25.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.hover.name);
            }
            if ((ref26 = command.params.unselected) != null ? ref26.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.unselected.name);
            }
            if ((ref27 = command.params.selected) != null ? ref27.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selected.name);
            }
            if ((ref28 = command.params.selectedHover) != null ? ref28.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selectedHover.name);
            }
            ref29 = command.params.hotspots;
            for (y = 0, len12 = ref29.length; y < len12; y++) {
              hotspot = ref29[y];
              AudioManager.loadSound(hotspot.data.onHoverSound);
              AudioManager.loadSound(hotspot.data.onClickSound);
              if (hotspot.data.action === 2) {
                commonEvent = RecordManager.commonEvents[hotspot.data.commonEventId];
                if ((commonEvent != null) && !this.loadedCommonEventsById[hotspot.data.commonEventId]) {
                  this.loadedCommonEventsById[hotspot.data.commonEventId] = true;
                  this._loadEventCommandsGraphics(commonEvent.commands);
                }
              }
            }
            break;
          case "gs.MovePicturePath":
          case "vn.MoveCharacterPath":
          case "vn.ScrollBackgroundPath":
          case "gs.MoveVideoPath":
            if (command.params.path.effects != null) {
              ref30 = command.params.path.effects.data;
              for (z = 0, len13 = ref30.length; z < len13; z++) {
                effect = ref30[z];
                AudioManager.loadSound(effect.sound);
              }
            }
            break;
          case "gs.MaskPicture":
          case "vn.MaskCharacter":
          case "vn.MaskBackground":
          case "gs.MaskVideo":
            if (command.params.mask.sourceType === 0 && ((ref31 = command.params.mask.graphic) != null ? ref31.name : void 0)) {
              ResourceManager.getBitmap("Graphics/Masks/" + command.params.mask.graphic.name);
            }
            if (command.params.mask.sourceType === 1 && ((ref32 = command.params.mask.video) != null ? ref32.name : void 0)) {
              ResourceManager.getVideo("Movies/" + command.params.mask.video.name);
            }
            break;
          case "gs.PlayPictureAnimation":
            animationId = command.params.animationId;
            if ((animationId != null) && (animationId.scope == null)) {
              animation = RecordManager.animations[animationId];
              if (animation && ((ref33 = animation.graphic) != null ? ref33.name : void 0)) {
                ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
              }
            }
            break;
          case "gs.ShowBattleAnimation":
            animationId = command.params.animationId;
            if ((animationId != null) && (animationId.scope == null)) {
              animation = RecordManager.animations[animationId];
              this.loadComplexAnimation(animation);
            }
            break;
          case "gs.InputName":
            actorId = command.params.actorId;
            if ((actorId != null) && (actorId.scope == null)) {
              actor = RecordManager.actors[actorId];
              if (actor != null) {
                ResourceManager.getBitmap("Graphics/Faces/" + ((ref34 = actor.faceGraphic) != null ? ref34.name : void 0));
              }
            }
            break;
          case "gs.ChangeTileset":
            if ((ref35 = command.params.graphic) != null ? ref35.name : void 0) {
              ResourceManager.getBitmap("Graphics/Tilesets/" + command.params.graphic.name);
            }
            break;
          case "gs.ChangeMapParallaxBackground":
            if ((ref36 = command.params.parallaxBackground) != null ? ref36.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.parallaxBackground.name);
            }
            break;
          case "gs.ChangeActorGraphic":
            if (command.params.changeCharacter && ((ref37 = command.params.characterGraphic) != null ? ref37.name : void 0)) {
              ResourceManager.getBitmap("Graphics/Characters/" + command.params.characterGraphic.name);
            }
            if (command.params.changeFace && ((ref38 = command.params.faceGraphic) != null ? ref38.name : void 0)) {
              ResourceManager.getBitmap("Graphics/Faces/" + command.params.faceGraphic.name);
            }
            break;
          case "gs.MoveEvent":
            ref39 = command.params.commands;
            for (i1 = 0, len14 = ref39.length; i1 < len14; i1++) {
              moveCommand = ref39[i1];
              switch (moveCommand.id) {
                case 44:
                  ResourceManager.getBitmap("Graphics/Characters/" + moveCommand.resource.name);
                  break;
                case 47:
                  AudioManager.loadSound(moveCommand.resource);
              }
            }
            break;
          case "gs.TransformEnemy":
            if (((ref40 = command.params) != null ? ref40.targetId.scope : void 0) == null) {
              enemy = RecordManager.enemies[command.params.targetId];
              this.loadActorBattleAnimations(enemy);
            }
            break;
          case "gs.PlayMusic":
            if (command.params.music != null) {
              AudioManager.loadMusic(command.params.music);
            }
            break;
          case "gs.PlayVideo":
          case "gs.ShowVideo":
            if ((ref41 = command.params.video) != null ? ref41.name : void 0) {
              ResourceManager.getVideo("Movies/" + command.params.video.name);
            }
            if (((ref42 = command.params.animation) != null ? ref42.type : void 0) === gs.AnimationTypes.MASKING) {
              ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
            }
            break;
          case "gs.PlaySound":
            if (command.params.sound != null) {
              AudioManager.loadSound(command.params.sound);
            }
            break;
          case "vn.ChangeSounds":
            ref43 = command.params.sounds;
            for (j1 = 0, len15 = ref43.length; j1 < len15; j1++) {
              sound = ref43[j1];
              if (sound != null) {
                AudioManager.loadSound(sound);
              }
            }
            break;
          case "gs.ChangeScreenCursor":
            if ((ref44 = command.params.graphic) != null ? ref44.name : void 0) {
              ResourceManager.getBitmap("Graphics/Pictures/" + command.params.graphic.name);
            }
        }
      }
      return null;
    };


    /**
    * Loads all resources for the specified animation.
    *
    * @method loadAnimation
    * @param {Object} animation - The animation-record.
    * @static
     */

    ResourceLoader.prototype.loadAnimation = function(animation) {
      if ((animation != null) && (animation.graphic != null)) {
        return ResourceManager.getBitmap("Graphics/SimpleAnimations/" + animation.graphic.name);
      }
    };

    return ResourceLoader;

  })();

  gs.ResourceLoader = new ResourceLoader();

  window.ResourceLoader = gs.ResourceLoader;

}).call(this);
