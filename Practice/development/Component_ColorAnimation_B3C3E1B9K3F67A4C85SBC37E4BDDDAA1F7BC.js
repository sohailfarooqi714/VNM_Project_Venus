// Generated by CoffeeScript 1.12.7
(function() {
  var Component_ColorAnimation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_ColorAnimation = (function(superClass) {
    extend(Component_ColorAnimation, superClass);


    /**
    * Executes a color-animation on a game-object.
    *
    * @module gs
    * @class Component_MoveAnimation
    * @extends gs.Component_Animation
    * @memberof gs
    * @constructor
     */

    function Component_ColorAnimation(data) {
      Component_ColorAnimation.__super__.constructor.apply(this, arguments);

      /**
      * The easing-object used for the animation.
      * @property easing
      * @type gs.Easing
       */
      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);

      /**
      * The start-color.
      * @property sourceColor
      * @type gs.Color
      * @protected
       */
      this.sourceColor = (data != null ? data.sourceColor : void 0) || new Color();

      /**
      * The end-color.
      * @property targetColor
      * @type gs.Color
      * @protected
       */
      this.targetColor = (data != null ? data.targetColor : void 0) || new Color();
    }


    /**
    * Serializes the color-animation into a data-bundle.
    *
    * @method toDataBundle
     */

    Component_ColorAnimation.prototype.toDataBundle = function() {
      return {
        easing: this.easing,
        sourceColor: this.sourceColor,
        targetColor: this.targetColor
      };
    };


    /**
    * Updates the color-animation
    *
    * @method update
     */

    Component_ColorAnimation.prototype.update = function() {
      var a;
      Component_ColorAnimation.__super__.update.apply(this, arguments);
      if (!this.easing.isRunning) {
        return;
      }
      this.easing.updateValue();
      a = this.easing.value;
      this.object.color.red = Math.floor((this.sourceColor.red * a + this.targetColor.red * (255 - a)) / 255);
      this.object.color.green = Math.floor((this.sourceColor.green * a + this.targetColor.green * (255 - a)) / 255);
      this.object.color.blue = Math.floor((this.sourceColor.blue * a + this.targetColor.blue * (255 - a)) / 255);
      this.object.color.alpha = Math.floor((this.sourceColor.alpha * a + this.targetColor.alpha * (255 - a)) / 255);
      if (!this.easing.isRunning) {
        this.object.color = this.targetColor;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      }
    };


    /**
    * Starts the color-animation.
    *
    * @method colorTo
    * @param {Color} color The target color.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_ColorAnimation.prototype.start = function(color, duration, easingType, callback) {
      this.callback = callback;
      this.easing.type = easingType;
      if (this.object.color.red === color.red && this.object.color.green === color.green && this.object.color.blue === color.blue && this.object.color.alpha === color.alpha) {
        if (typeof this.callback === "function") {
          this.callback(this.object, this);
        }
      }
      if (duration === 0 || this.isInstantSkip()) {
        this.object.color = color;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        this.sourceColor = new Color(this.object.color);
        this.targetColor = color;
        return this.easing.startValue(255, -255, duration);
      }
    };

    return Component_ColorAnimation;

  })(gs.Component_Animation);

  gs.Component_ColorAnimation = Component_ColorAnimation;

}).call(this);
