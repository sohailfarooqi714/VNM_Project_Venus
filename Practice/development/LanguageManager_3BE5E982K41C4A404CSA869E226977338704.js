// Generated by CoffeeScript 1.12.7
(function() {
  var LanguageManager;

  LanguageManager = (function() {

    /**
    * Manages the different languages of the game.  
    *
    * @module gs
    * @class LanguageManager
    * @memberof gs
    * @constructor
     */
    function LanguageManager() {

      /**
      * The default language profile.
      * @property defaultProfile
      * @type gs.LanguageProfile
       */
      this.defaultProfile = null;

      /**
      * The current language profile.
      * @property profile
      * @type gs.LanguageProfile
       */
      this.profile = null;

      /**
      * The current strings bundle.
      * @property bundle
      * @type gs.LanguageStringsBundle
       */
      this.bundle = null;

      /**
      * The default strings bundle.
      * @property defaultBundle
      * @type gs.LanguageStringsBundle
       */
      this.defaultBundle = null;
    }


    /**
    * Initializes the language system by loading the necessary language profiles
    * and strings bundles.
    *
    * @method initialize
     */

    LanguageManager.prototype.initialize = function() {
      var document, documents, i, len, ref;
      this.languages = [];
      DataManager.getDocumentByType("custom_strings_bundle");
      documents = DataManager.getDocumentsByType("language_profile");
      for (i = 0, len = documents.length; i < len; i++) {
        document = documents[i];
        this.languages.push({
          name: document.items.name,
          code: document.items.code,
          uid: document.uid,
          icon: document.items.icon,
          bundleUid: document.items.bundleUid,
          wordWrap: (ref = document.items.wordWrap) != null ? ref : "spaceBased"
        });
        if (document.uid === "07DDA0716161F104") {
          this.language = this.languages[this.languages.length - 1];
          this.defaultLanguage = this.language;
        }
      }
      this.selectLanguage(this.language);
      if (this.language.uid !== this.defaultLanguage.uid) {
        return this.defaultProfile = DataManager.getDocument(this.defaultLanguage.uid);
      } else {
        return this.defaultProfile = this.profile;
      }
    };


    /**
    * Loads the necessary strings bundles for the current language. 
    *
    * @method loadBundles
     */

    LanguageManager.prototype.loadBundles = function() {
      var customStrings;
      customStrings = DataManager.getDocumentByType("custom_strings_bundle");
      if (this.language.uid !== this.defaultLanguage.uid) {
        this.bundle = DataManager.getDocument(this.language.bundleUid);
      }
      this.defaultBundle = {
        items: {
          localizableStrings: RecordManager.localizableStrings
        }
      };
      Object.mixin(this.defaultBundle.items.localizableStrings, customStrings.items.localizableStrings);
      return this.language.uid !== this.defaultLanguage.uid;
    };


    /**
    * Sets the specified language as current language.
    *
    * @method selectLanguage
    * @param {Object} language - The language to set.
     */

    LanguageManager.prototype.selectLanguage = function(language) {
      this.language = language;
      return this.profile = DataManager.getDocument(this.language.uid);
    };


    /**
    * Gets the string for the specified id. If the string doesn't exist for current
    * language, its taken from the default language.
    *
    * @method string
    * @param {String} id - The ID of the string to get.
    * @return {String} The string for the specified ID. If the string could not be found the result
    * is an empty string.
     */

    LanguageManager.prototype.string = function(id) {
      var result;
      result = null;
      if ((this.bundle != null) && (this.bundle.items != null)) {
        result = this.bundle.items.localizableStrings[id];
        if ((result != null ? result.t : void 0) != null) {
          result = result.t;
        }
      }
      if ((result == null) || result.length === 0) {
        result = this.stringFromDefault(id);
      }
      return result;
    };


    /**
    * Gets the string for the specified id in default language.
    *
    * @method stringFromDefault
    * @param {String} id - The ID of the string to get.
    * @return {String} The string for the specified ID. If the string could not be found the result
    * is an empty string.
     */

    LanguageManager.prototype.stringFromDefault = function(id) {
      var ref, result;
      result = null;
      if ((this.defaultBundle != null) && (this.defaultBundle.items != null)) {
        result = (ref = this.defaultBundle.items.localizableStrings[id]) != null ? ref.t : void 0;
      }
      return result;
    };

    return LanguageManager;

  })();

  window.LanguageManager = new LanguageManager();

  gs.LanguageManager = LanguageManager;

  window.lcsi = function(id) {
    if (id != null) {
      return window.LanguageManager.string(id) || "";
    } else {
      return "";
    }
  };

  window.lcs = function(value) {
    var ref;
    if ((value != null) && ((value.lcId != null) || (value.defaultText != null))) {
      return window.LanguageManager.string(value.lcId) || (value != null ? (ref = value.defaultText) != null ? ref.t : void 0 : void 0) || (value != null ? value.defaultText : void 0);
    } else {
      return value;
    }
  };

  window.lcsm = function(value) {
    return lcs(value);
  };

}).call(this);
