// Generated by CoffeeScript 1.12.7
(function() {
  var Component_ShakeAnimation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_ShakeAnimation = (function(superClass) {
    extend(Component_ShakeAnimation, superClass);


    /**
    * Executes a horizontal shake-animation on a game-object.
    *
    * @module gs
    * @class Component_ShakeAnimation
    * @extends gs.Component_Animation
    * @memberof gs
    * @constructor
     */

    function Component_ShakeAnimation(data) {
      var ref;
      Component_ShakeAnimation.__super__.constructor.apply(this, arguments);
      this.easingX = new gs.Easing(null, data != null ? data.easingX : void 0);
      this.easingY = new gs.Easing(null, data != null ? data.easingY : void 0);
      this.range = (data != null ? data.range : void 0) || {
        x: 0,
        y: 0
      };
      this.speed = (data != null ? data.speed : void 0) || 0;
      this.callback = null;
      this.isRunning = (ref = data != null ? data.isRunning : void 0) != null ? ref : false;
      this.duration = (data != null ? data.duration : void 0) || 0;
    }


    /**
    * Serializes the shake-animation into a data-bundle.
    *
    * @method toDataBundle
     */

    Component_ShakeAnimation.prototype.toDataBundle = function() {
      return {
        easingX: this.easingX,
        easingY: this.easingY,
        range: this.range,
        duration: this.duration,
        speed: this.speed,
        isRunning: this.isRunning
      };
    };


    /**
    * Skips the animation. That is used to skip an animation if the user
    * wants to skip very fast through a visual novel scene.
    *
    * @method skip
     */

    Component_ShakeAnimation.prototype.skip = function() {
      if (this.easingX.duration > 1) {
        this.easingX.duration = 1;
        this.easingX.time = 0;
      }
      if (this.easingY.duration > 1) {
        this.easingY.duration = 1;
        return this.easingY.time = 0;
      }
    };


    /**
    * Starts the shake-animation.
    *
    * @method start
    * @param {gs.Range} range The horizontal shake-range.
    * @param {number} speed The shake-speed.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback called if the animation is finished.
     */

    Component_ShakeAnimation.prototype.start = function(range, speed, duration, easing, callback) {
      this.range = range;
      this.easingX.type = easing;
      this.easingY.type = easing;
      this.speed = speed;
      this.duration = duration;
      this.callback = callback;
      if (this.duration === 0 || this.isInstantSkip()) {
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        this.isRunning = true;
        this.startOffset = {
          x: this.object.offset.x,
          y: this.object.offset.y
        };
        if (range.x !== 0) {
          this.easingX.startValue(this.startOffset.x, range.x, Math.max(range.x / speed, 1));
        }
        if (range.y !== 0) {
          return this.easingY.startValue(this.startOffset.y, range.y, Math.max(range.y / speed, 1));
        }
      }
    };


    /**
    * Updates the shake-animation.
    *
    * @method update
     */

    Component_ShakeAnimation.prototype.update = function() {
      Component_ShakeAnimation.__super__.update.call(this);
      if ((this.duration === 0 || this.isInstantSkip()) && this.isRunning) {
        this.easingX.isRunning = false;
        this.easingY.isRunning = false;
        this.object.offset.x = 0;
        this.object.offset.y = 0;
        this.isRunning = false;
        if (typeof this.callback === "function") {
          this.callback(this.object, this);
        }
      }
      if (!this.isRunning) {
        return;
      }
      this.easingX.updateValue();
      this.easingY.updateValue();
      if (this.easingY.isRunning) {
        this.object.offset.y = Math.round(this.easingY.value);
      }
      if (this.easingX.isRunning) {
        this.object.offset.x = Math.round(this.easingX.value);
      }
      if (!this.easingX.isRunning) {
        this.easingX.startValue(this.object.offset.x, (this.object.offset.x > 0 ? -(this.range.x * 2) : this.range.x * 2), Math.max(this.range.x * 2 / this.speed, 2));
      }
      if (!this.easingY.isRunning) {
        this.easingY.startValue(this.object.offset.y, (this.object.offset.y > 0 ? -(this.range.y * 2) : this.range.y * 2), Math.max(this.range.y * 2 / this.speed, 2));
      }
      return this.duration--;
    };

    return Component_ShakeAnimation;

  })(gs.Component_Animation);

  gs.Component_ShakeAnimation = Component_ShakeAnimation;

}).call(this);
