// Generated by CoffeeScript 1.12.7
(function() {
  var Component_BindingHandler,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_BindingHandler = (function(superClass) {
    extend(Component_BindingHandler, superClass);


    /**
    * Caches already compiled binding-paths.
    * @property compiledPaths
    * @type Object
    * @static
     */

    Component_BindingHandler.compiledPaths = {};


    /**
    * A binding-handler component allows a UI game object to execute
    * property-bindings.<br><br>
    *
    * For example: A text-label can bind its text-property to a backend-field 
    * like the current music-volume to always display correct music-volume. 
    * If the volume changes, the text-property will be updated
    * automatically.
    *
    * To define a binding, a special property-path syntax is used. For example:<br>
    * <br>
    * $myTextField.text<br>
    * <br>
    * is a property-path to access the text-property of a text-field object
    * with the identifier "myTextField". For more information, take a look
    * into the "In Game UI System" section of the help-file.
    * 
    * @module ui
    * @class Component_BindingHandler
    * @extends ui.Component_Handler
    * @memberof ui
    * @constructor
     */

    function Component_BindingHandler() {}


    /**
    * Initializes the binding-handler.
    * 
    * @method setup
     */

    Component_BindingHandler.prototype.setup = function() {};


    /**
    * Updates the binding-handler.
    * 
    * @method update
     */

    Component_BindingHandler.prototype.update = function() {
      var binding, i, len, ref;
      ref = this.object.bindings;
      for (i = 0, len = ref.length; i < len; i++) {
        binding = ref[i];
        this.executeBinding(binding);
      }
      this.object.initialized = true;
      return null;
    };


    /**
    * Executes a specified binding. The binding is only executed if all assigned
    * events and conditions are true.
    * 
    * @method executeBinding
    * @param {Object} binding - The binding to execute.
     */

    Component_BindingHandler.prototype.executeBinding = function(binding) {
      var offset, ref, ref1, source, target, value;
      if (!this.checkObject(binding)) {
        return;
      }
      source = (ref = binding.sourceFunc) != null ? ref : (binding.sourceFunc = this.resolveFieldPath(binding.sourceField));
      target = (ref1 = binding.targetFunc) != null ? ref1 : (binding.targetFunc = this.resolveFieldPath(binding.targetField));
      if (!target) {
        return;
      }
      if (!source) {
        return target.set(this.object, null);
      }
      value = source.get(this.object);
      offset = 0;
      if (binding.offset != null) {
        value += binding.offset;
      }
      if (binding.max != null) {
        value = Math.min(binding.max, value);
      }
      if (binding.min != null) {
        value = Math.max(binding.min, value);
      }
      return target.set(this.object, value);
    };


    /**
    * Evaluates a specified property-path and returns the result.
    * 
    * @method fieldValue
    * @param {string} path - A property-path.
    * @return {Object} The value of the property-path.
     */

    Component_BindingHandler.prototype.fieldValue = function(path) {
      return ui.Component_BindingHandler.fieldValue(this.object, path);
    };


    /**
    * Executes a specified binding. The binding is only executed if all assigned
    * events and conditions are true.
    * 
    * @method executeBinding
    * @param {Object} binding - The binding to execute.
    * @static
     */

    Component_BindingHandler.executeBinding = function(sender, binding) {
      var binder;
      binder = new ui.BindingHandler();
      binder.object = sender;
      return binder.executeBinding(binding);
    };


    /**
    * Evaluates a property-path on a specified object and returns the result.
    * 
    * @method fieldValue
    * @static
    * @param {Object} object - An object to evaluate the property-path on.
    * @param {string} path - A property-path.
    * @return {Object} The value of the property-path.
     */

    Component_BindingHandler.fieldValue = function(object, path) {
      var field;
      if (typeof path === "string") {
        field = ui.Component_BindingHandler.resolveFieldPath(object, path);
        if (field == null) {
          return 0;
        }
        return field.get(object);
      } else {
        return path;
      }
    };


    /**
    * Resolves a property-path of a specified object and returns the result. The
    * result-object has a get- and an optional set-function to get or set the
    * value for the property-path. The set-function is only present for property-paths
    * which can be written.
    * 
    * @method resolveFieldPath
    * @static
    * @param {Object} object - An object to evaluate the property-path on.
    * @param {string} path - A property-path.
    * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.
     */

    Component_BindingHandler.resolveFieldPath = function(object, path) {
      var result;
      result = ui.Component_BindingHandler.compiledPaths[path];
      if (result != null) {
        return result;
      }
      if (path != null) {
        result = {
          set: null,
          get: null
        };
        result.get = eval("(function(o) { return " + path + " })");
        result.set = eval("(function(o, v) { " + path + " = v; })");
        ui.Component_BindingHandler.compiledPaths[path] = result;
      }
      return result;
    };


    /**
    * Resolves a property-path and returns the result. The
    * result-object has a get- and an optional set-function to get or set the
    * value for the property-path. The set-function is only present for property-paths
    * which can be written.
    * 
    * @method resolveFieldPath
    * @param {Object} object - An object to evaluate the property-path on.
    * @param {string} path - A property-path.
    * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.
     */

    Component_BindingHandler.prototype.resolveFieldPath = function(path) {
      return ui.Component_BindingHandler.resolveFieldPath(this.object, path);
    };

    return Component_BindingHandler;

  })(ui.Component_Handler);

  ui.Component_BindingHandler = Component_BindingHandler;

}).call(this);
