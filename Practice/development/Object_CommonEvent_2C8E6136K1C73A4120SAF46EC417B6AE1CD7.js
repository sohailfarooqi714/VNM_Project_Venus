// Generated by CoffeeScript 1.12.7
(function() {
  var Object_CommonEvent,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_CommonEvent = (function(superClass) {
    extend(Object_CommonEvent, superClass);

    Object_CommonEvent.objectCodecBlackList = ["record", "commands", "parent"];


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    Object_CommonEvent.prototype.onDataBundleRestore = function(data, context) {
      var ref;
      if (this.rid != null) {
        this.record = RecordManager.commonEvents[this.rid];
        if ((ref = this.interpreter) != null) {
          ref.object = this;
        }
        return this.commands = this.record.commands;
      }
    };


    /**
    * A common-event object handles a single common event defined in the
    * database. Common events can run parallel to the actual scene content
    * or can be just called from a scene to execute a common piece of logic.
    *
    * @module gs
    * @class Object_CommonEvent
    * @extends gs.Object_Base
    * @memberof gs
    * @constructor
     */

    function Object_CommonEvent(data) {
      Object_CommonEvent.__super__.constructor.call(this);

      /**
      * The common event database record.
      * @property record
      * @type Object
       */
      this.record = null;

      /**
      * The behavior component to add common-event specific behavior to the object.
      * @property behavior
      * @type gs.Component_CommonEventBehavior
       */
      this.behavior = new gs.Component_CommonEventBehavior();

      /**
      * An event-emitter to emit events.
      * @property events
      * @type gs.Component_EventEmitter
       */
      this.events = new gs.Component_EventEmitter();

      /**
      * An interpreter to execute the commands of the common event.
      * @property interpreter
      * @type gs.Component_CommandInterpreter
       */
      this.interpreter = null;
      this.events.object = this;
      if (data) {
        this.restore(data);
      } else {
        this.addComponent(this.behavior);
      }
    }


    /**
    * Serializes the common-event into a data-bundle.
    *
    * @method toDataBundle
    * @return {Object} The data-bundle.
     */

    Object_CommonEvent.prototype.toDataBundle = function() {
      var ref;
      this.commands = this.record.commands;
      return {
        behavior: this.behavior.toDataBundle(),
        interpreter: (ref = this.interpreter) != null ? ref.toDataBundle() : void 0,
        recordId: this.record.index
      };
    };


    /**
    * Restores the common-event from a data-bundle
    *
    * @method restore
    * @param {Object} bundle- The data-bundle.
     */

    Object_CommonEvent.prototype.restore = function(data) {
      if (this.behavior != null) {
        this.removeComponent(this.behavior);
      }
      this.behavior = new gs.Component_CommonEventBehavior();
      this.addComponent(this.behavior);
      this.record = RecordManager.commonEvents[data.recordId];
      this.behavior.restore(data.behavior);
      if (data.interpreter && this.interpreter) {
        this.interpreter.restore(data.interpreter);
        this.interpreter.context.set(this.record.id, this.record);
        return this.commands = this.record.commands;
      }
    };

    return Object_CommonEvent;

  })(gs.Object_Base);

  gs.Object_CommonEvent = Object_CommonEvent;

}).call(this);
