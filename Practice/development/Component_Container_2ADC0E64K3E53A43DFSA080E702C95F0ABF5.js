// Generated by CoffeeScript 1.12.7
(function() {
  var Component_Container,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_Container = (function(superClass) {
    extend(Component_Container, superClass);


    /**
    * A container component allows an object to have sub-objects.
    * @module gs
    * @class Component_Container
    * @memberof gs
    * @constructor
     */

    function Component_Container(disposeBehavior) {
      Component_Container.__super__.constructor.apply(this, arguments);

      /**
      * The behavior how the container deals with disposed game objects.
      * @property disposeBehavior
      * @default gs.ContainerDisposeBehavior.REMOVE
       */
      this.disposeBehavior = disposeBehavior != null ? disposeBehavior : gs.ContainerDisposeBehavior.REMOVE;
    }


    /**
    * Sorts the sub-objects by order-index.
    * @method sort_
    * @param {gs.Object_Base} a Object A
    * @param {gs.Object_Base} b Object B
     */

    Component_Container.prototype.sort_ = function(a, b) {
      if (a.order > b.order) {
        return -1;
      } else if (a.order < b.order) {
        return 1;
      } else {
        return 0;
      }
    };


    /**
    * Sets the visibility of all sub objects.
    * @method setVisible
    * @param {boolean} visible - The new visibility.
     */

    Component_Container.prototype.setVisible = function(visible) {
      var j, len, ref, results, subObject;
      ref = this.object.subObjects;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        subObject = ref[j];
        if (subObject) {
          subObject.visible = visible;
          results.push(subObject.update());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };


    /**
    * Updates all sub-objects and sorts them if necessary. It also removes
    * disposed objects from the list of sub-objects.
    * @method update
     */

    Component_Container.prototype.update = function() {
      var i, results, subObject, subObjects;
      Component_Container.__super__.update.apply(this, arguments);
      subObjects = this.object.subObjects;
      if (this.object.needsSort) {
        subObjects.sort(this.sort_);
        this.object.needsSort = false;
      }
      i = 0;
      results = [];
      while (i < subObjects.length) {
        subObject = subObjects[i];
        if (subObject != null ? subObject.active : void 0) {
          if (subObject.disposed) {
            if (this.disposeBehavior === gs.ContainerDisposeBehavior.REMOVE) {
              subObjects.remove(subObject);
              i--;
            } else {
              subObjects[i] = null;
            }
          } else {
            subObject.update();
          }
        }
        results.push(i++);
      }
      return results;
    };

    return Component_Container;

  })(gs.Component);

  gs.Component_Container = Component_Container;

}).call(this);
