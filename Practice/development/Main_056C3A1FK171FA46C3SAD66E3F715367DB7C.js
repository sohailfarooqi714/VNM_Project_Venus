// Generated by CoffeeScript 1.12.7
(function() {
  var Main;

  Main = (function() {

    /**
    * Controls the boot-process of the game.
    *
    * @module gs
    * @class Main
    * @memberof gs
    * @constructor
     */
    function Main() {
      window.$ = jQuery.noConflict();
      this.languagesLoaded = false;
      this.frameCallback = null;
    }


    /**
    * Updates the current frame.
    *
    * @method updateFrame
     */

    Main.prototype.updateFrame = function() {
      if ($PARAMS.showDebugInfo) {
        window.startTime = window.performance != null ? window.performance.now() : Date.now();
      }
      SceneManager.update();
      Graphics.frameCount++;
      if ($PARAMS.showDebugInfo) {
        if (this.debugSprite == null) {
          this.debugSprite = new Sprite_Debug();
        }
        window.endTime = window.performance != null ? window.performance.now() : Date.now();
        if (Graphics.frameCount % 30 === 0) {
          this.debugSprite.frameTime = endTime - startTime;
          return this.debugSprite.redraw();
        }
      }
    };


    /**
    * Loads game data.
    *
    * @method loadData
     */

    Main.prototype.loadData = function() {
      RecordManager.load();
      DataManager.getDocumentsByType("global_variables");
      DataManager.getDocumentsByType("language_profile");
      return DataManager.getDocumentsByType("vn.chapter");
    };


    /**
    * Loads system data.
    *
    * @method loadSystemData
     */

    Main.prototype.loadSystemData = function() {
      DataManager.getDocument("RESOURCES");
      return DataManager.getDocument("SUMMARIES");
    };


    /**
    * Loads system resources such as graphics, sounds, fonts, etc.
    *
    * @method loadSystemResources
     */

    Main.prototype.loadSystemResources = function() {
      var j, language, len, ref, ref1, ref2;
      ResourceManager.loadFonts();
      ResourceLoader.loadSystemSounds(RecordManager.system);
      ResourceLoader.loadSystemGraphics(RecordManager.system);
      ref = LanguageManager.languages;
      for (j = 0, len = ref.length; j < len; j++) {
        language = ref[j];
        if (((ref1 = language.icon) != null ? (ref2 = ref1.name) != null ? ref2.length : void 0 : void 0) > 0) {
          ResourceManager.getBitmap("Graphics/Icons/" + language.icon.name);
        }
      }
      return gs.Fonts.initialize();
    };


    /**
    * Gets game settings.
    *
    * @method getSettings
     */

    Main.prototype.getSettings = function() {
      var settings;
      settings = GameStorage.getObject("settings");
      if ((settings == null) || settings.version !== 342) {
        GameManager.resetSettings();
        settings = GameManager.settings;
      }
      return settings;
    };


    /**
    * Sets up the game's global data. If it is outdated, this method will
    * reset the global game data.
    *
    * @method setupGlobalData
     */

    Main.prototype.setupGlobalData = function() {
      var globalData;
      globalData = GameStorage.getObject("globalData");
      GameManager.globalData = globalData;
      if (!globalData || globalData.version !== 342) {
        return GameManager.resetGlobalData();
      }
    };


    /**
    * Sets up game settings.
    *
    * @method setupGameSettings
    * @param {Object} settings - Current game settings.
     */

    Main.prototype.setupGameSettings = function(settings) {
      var cg, character, i, j, l, len, len1, ref, ref1, results;
      GameManager.settings = settings;
      GameManager.settings.fullScreen = Graphics.isFullscreen();
      ref = RecordManager.charactersArray;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        character = ref[i];
        if (character && !GameManager.settings.voicesByCharacter[character.index]) {
          GameManager.settings.voicesByCharacter[character.index] = 100;
        }
      }
      ref1 = RecordManager.cgGalleryArray;
      results = [];
      for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
        cg = ref1[i];
        if ((cg != null) && !GameManager.globalData.cgGallery[cg.index]) {
          results.push(GameManager.globalData.cgGallery[cg.index] = {
            unlocked: false
          });
        } else {
          results.push(void 0);
        }
      }
      return results;
    };


    /**
    * Sets up audio settings.
    *
    * @method setupAudioSettings
    * @param {Object} settings - Current game settings.
     */

    Main.prototype.setupAudioSettings = function(settings) {
      AudioManager.generalSoundVolume = settings.seVolume;
      AudioManager.generalMusicVolume = settings.bgmVolume;
      return AudioManager.generalVoiceVolume = settings.voiceVolume;
    };


    /**
    * Sets up video settings.
    *
    * @method setupVideoSettings
    * @param {Object} settings - Current game settings.
     */

    Main.prototype.setupVideoSettings = function(settings) {
      settings.renderer = 1;
      Graphics.keepRatio = !settings.adjustAspectRatio;
      return Graphics.onResize();
    };


    /**
    * Sets up settings.
    *
    * @method setupSettings
     */

    Main.prototype.setupSettings = function() {
      var settings;
      settings = this.getSettings();
      this.setupGlobalData();
      this.setupGameSettings(settings);
      this.setupAudioSettings(settings);
      this.setupVideoSettings(settings);
      return GameStorage.setObject("settings", settings);
    };


    /**
    * Loads all system resources needed to start the actual game.
    *
    * @method load
    * @param {Function} callback - Called when all system resources are loaded.
     */

    Main.prototype.load = function(callback) {
      this.loadSystemData();
      return DataManager.events.on("loaded", (function(_this) {
        return function() {
          GameManager.tempFields = new gs.GameTemp();
          window.$tempFields = GameManager.tempFields;
          if (_this.languagesLoaded) {
            RecordManager.initialize();
            LanguageManager.initialize();
            SceneManager.initialize();
            _this.setupSettings();
          } else {
            _this.loadData();
          }
          if (_this.languagesLoaded) {
            _this.loadSystemResources();
            DataManager.events.off("loaded");
            ResourceManager.events.on("loaded", function() {
              GameManager.setupCursor();
              ResourceManager.events.off("loaded");
              ui.UIManager.setup();
              return callback();
            });
          }
          return _this.languagesLoaded = true;
        };
      })(this));
    };


    /**
    * Sets up the application.
    *
    * @method setupApplication
     */

    Main.prototype.setupApplication = function() {
      $PARAMS.showDebugInfo = false;
      window.ResourceManager = new window.ResourceManager();
      window.DataManager = new window.DataManager();
      window.Graphics = new Graphics_OpenGL();
      window.gs.Graphics = window.Graphics;
      window.Renderer = window.Renderer_OpenGL;
      return Texture2D.filter = 1;
    };


    /**
    * Initializes the input system to enable support for keyboard, mouse, touch, etc.
    *
    * @method setupInput
     */

    Main.prototype.setupInput = function() {
      Input.initialize();
      return Input.Mouse.initialize();
    };


    /**
    * Initializes the video system with the game's resolution. It is necessary to
    * call this method before using graphic object such as bitmaps, sprites, etc.
    *
    * @method setupVideo
     */

    Main.prototype.setupVideo = function() {
      this.frameCallback = this.createFrameCallback();
      Graphics.initialize($PARAMS.resolution.width, $PARAMS.resolution.height);
      Graphics.onDispose = (function(_this) {
        return function() {
          return ResourceManager.dispose();
        };
      })(this);
      Graphics.formats = [320, 384, 427];
      Graphics.scale = 0.5 / 240 * Graphics.height;
      Font.defaultSize = Math.round(9 / 240 * Graphics.height);
      return Graphics.onEachFrame(this.frameCallback);
    };


    /**
    * Registers shader-based effects. It is important to register all effects
    * before the graphics system is initialized.
    *
    * @method setupEffects
     */

    Main.prototype.setupEffects = function() {
      gs.Effect.registerEffect(gs.Effect.fragmentShaderInfos.lod_blur);
      return gs.Effect.registerEffect(gs.Effect.fragmentShaderInfos.pixelate);
    };


    /**
    * Initializes the Live2D. If Live2D is not available, it does nothing. Needs to be
    * called before using Live2D.
    *
    * @method setupLive2D
     */

    Main.prototype.setupLive2D = function() {
      Live2D.init();
      Live2D.setGL($gl);
      return Live2DFramework.setPlatformManager(new L2DPlatformManager());
    };


    /**
    * Creates the frame-callback function called once per frame to update and render
    * the game.
    *
    * @method setupLive2D
    * @return {Function} The frame-callback function.
     */

    Main.prototype.createFrameCallback = function() {
      var callback;
      callback = null;
      if (($PARAMS.preview != null) || ($PARAMS.testOffline && window.parent !== window)) {
        callback = (function(_this) {
          return function(time) {
            var ex;
            try {
              if ($PARAMS.preview && !$PARAMS.preview.error) {
                return _this.updateFrame();
              }
            } catch (error) {
              ex = error;
              if ($PARAMS.preview || GameManager.inLivePreview) {
                $PARAMS.preview = {
                  error: ex
                };
              }
              return console.log(ex);
            }
          };
        })(this);
      } else {
        callback = (function(_this) {
          return function(time) {
            return _this.updateFrame();
          };
        })(this);
      }
      return callback;
    };


    /**
    * Creates the start scene object. If an intro-scene is set, this method returns the
    * intro-scene. If the game runs in Live-Preview, this method returns the selected
    * scene in editor.
    *
    * @method createStartScene
    * @return {gs.Object_Base} The start-scene.
     */

    Main.prototype.createStartScene = function() {
      var introScene, ref, ref1, ref2, ref3, ref4, scene;
      scene = null;
      introScene = null;
      if (RecordManager.system.useIntroScene) {
        introScene = DataManager.getDocumentSummary((ref = RecordManager.system.introInfo) != null ? (ref1 = ref.scene) != null ? ref1.uid : void 0 : void 0);
      }
      if ($PARAMS.preview || introScene) {
        scene = new vn.Object_Scene();
        scene.sceneData.uid = ((ref2 = $PARAMS.preview) != null ? ref2.scene.uid : void 0) || ((ref3 = RecordManager.system.introInfo) != null ? (ref4 = ref3.scene) != null ? ref4.uid : void 0 : void 0);
        scene.events.on("dispose", function(e) {
          return GameManager.sceneData.uid = null;
        });
      } else if (LanguageManager.languages.length > 1) {
        scene = new gs.Object_Layout("languageMenuLayout");
      } else {
        scene = new gs.Object_Layout("titleLayout");
      }
      return scene;
    };


    /**
    * Boots the game by setting up the application window as well as the video, audio and input system.
    *
    * @method start
     */

    Main.prototype.start = function() {
      this.setupApplication();
      this.setupEffects();
      this.setupVideo();
      this.setupLive2D();
      this.setupInput();
      return this.load((function(_this) {
        return function() {
          return SceneManager.switchTo(_this.createStartScene());
        };
      })(this));
    };

    return Main;

  })();

  gs.Main = new Main();

  gs.Application.initialize();

  gs.Application.onReady = function() {
    Object.keys(gs).forEach(function(k) {
      gs[k].$namespace = "gs";
      return gs[k].$name = k;
    });
    Object.keys(vn).forEach(function(k) {
      vn[k].$namespace = "vn";
      return vn[k].$name = k;
    });
    Object.keys(ui).forEach(function(k) {
      ui[k].$namespace = "ui";
      return ui[k].$name = k;
    });
    return gs.Main.start();
  };

}).call(this);
