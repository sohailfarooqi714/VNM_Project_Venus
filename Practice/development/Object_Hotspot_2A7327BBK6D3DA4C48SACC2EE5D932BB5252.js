// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Hotspot,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Hotspot = (function(superClass) {
    extend(Object_Hotspot, superClass);

    Object_Hotspot.objectCodecBlackList = ["parent"];


    /**
    * A hotspot object to define an area on the screen which can respond
    * to user-actions like mouse/touch actions. A hotspot can have multiple
    * images for different states like hovered, selected, etc.
    *
    * @module gs
    * @class Object_Hotspot
    * @extends gs.Object_Visual
    * @memberof gs
    * @constructor
     */

    function Object_Hotspot() {
      Object_Hotspot.__super__.constructor.apply(this, arguments);

      /**
      * The object's source rectangle. It controls which part of the object's image is used
      * for visual presentation.
      * @property srcRect
      * @type gs.Rect
       */
      this.srcRect = new Rect();

      /**
      * The object's mask to execute masking-effects on it.
      * @property mask
      * @type gs.Mask
       */
      this.mask = new gs.Mask();

      /**
      * Indicates if the object's visual presentation should be mirrored horizontally.
      * @property mirror
      * @type boolean
       */
      this.mirror = false;

      /**
      * The domain the object belongs to.
      * @property domain
      * @type string
       */
      this.domain = "com.degica.vnm.default";

      /**
      * The object's image used for visual presentation.
      * @property image
      * @type string
       */
      this.image = "";

      /**
      * The rotation-angle of the picture in degrees. The rotation center depends on the
      * anchor-point.
      * @property angle
      * @type number
       */
      this.angle = 0;

      /**
      * The color tone of the object used for the visual presentation.
      * @property tone
      * @type gs.Tone
       */
      this.tone = new Tone(0, 0, 0, 0);

      /**
      * The color of the object used for the visual presentation.
      * @property color
      * @type gs.Color
       */
      this.color = new Color(255, 255, 255, 0);

      /**
      * Contains different kinds of effects which can be activated for the object.
      * @property effects
      * @type Object
       */
      this.effects = new gs.EffectCollection();

      /**
      * Indicates if the hotspot is selectable by mouse/touch.
      * @property selectable
      * @type boolean
       */
      this.selectable = true;

      /**
      * Indicates if the hotspot is enabled. A disabled hotspot will not fire any events/actions.
      * @property enabled.
      * @type boolean
       */
      this.enabled = true;

      /**
      * The object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_Sprite
       */
      this.visual = new gs.Component_Sprite();

      /**
      * The object's image-handling.
      * @property imageHandling
      * @type gs.ImageHandling
       */
      this.imageHandling = 0;

      /**
      * A behavior-component to hotspot-specific behavior to the object.
      * @property behavior
      * @type gs.Component_HotspotBehavior
       */
      this.behavior = new gs.Component_HotspotBehavior();
      this.behavior.imageHandling = this.imageHandling;

      /**
      * The hotspot's target. The target it optional but if set the hotspot follows
      * the target. For example: A hotspot could be follow moving picture.
      * @property target
      * @type gs.Object_Visual
       */
      this.target = null;

      /**
      * The names of the images for the different states of the hotspot. At least one image
      * needs to be set. The other ones are optional and used for the following:<br>
      *
      * - 0 = Base (Required)
      * - 1 = Hovered
      * - 2 = Unselected
      * - 3 = Selected
      * - 4 = Selected Hovered
      * @property images
      * @type string[]
       */
      this.images = [];

      /**
      * An event-emitter to emit events.
      * @property events
      * @type gs.Component_EventEmitter
       */
      this.events = new gs.EventEmitter();

      /**
      * The data associated with the hotspot coming from Add Hotspot command such
      * as the action and event configuration.
      * @property data
      * @type Object
      * @default null
       */
      this.data = null;
      this.addComponent(this.events);
      this.addComponent(this.behavior);
      this.addComponent(this.visual);
    }

    return Object_Hotspot;

  })(gs.Object_Visual);

  gs.Object_Hotspot = Object_Hotspot;

}).call(this);
