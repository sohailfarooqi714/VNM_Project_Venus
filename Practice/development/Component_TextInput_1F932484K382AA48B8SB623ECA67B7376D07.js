// Generated by CoffeeScript 1.12.7
(function() {
  var Component_TextInput,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_TextInput = (function(superClass) {
    extend(Component_TextInput, superClass);


    /**
    * The text-input component defines the logic for the text-input window
    * of the default In-Game UI. 
    *
    * @module gs
    * @class Component_TextInput
    * @extends gs.Component
    * @memberof gs
    * @constructor
    * @params {Object} params - The params-object needs at least a letters-property to define 
    * the number of letters for the text. The letters-property can also be a property-path.
     */

    function Component_TextInput(params) {

      /**
      * The max. number of letters.
      * @property letters
      * @type number
       */
      this.letters = ui.Component_FormulaHandler.fieldValue(this, params.letters);

      /**
      * The cursor position. Points to the current letter.
      * @property cursor
      * @type number
      * @protected
       */
      this.cursor = 0;

      /**
      * The current text.
      * @property text
      * @type string
       */
      this.text = "";
    }


    /**
    * Puts the specified text into the UI label-objects to make it visible
    * on screen.
    *
    * @method setText
    * @param {string} text The text to set.
     */

    Component_TextInput.prototype.setText = function(text) {
      var c, i, j, len;
      for (i = j = 0, len = text.length; j < len; i = ++j) {
        c = text[i];
        this.object.controls[i].controls[1].text = c;
      }
      return null;
    };


    /**
    * An action-method to add a single letter to the text.
    *
    * @method action_addLetter
    * @param {gs.Object_Base} sender The sender of the action.
    * @param {Object} params The params-object which needs a letter-property containing the letter to add.
     */

    Component_TextInput.prototype.action_addLetter = function(sender, params) {
      var letter;
      letter = params.letter;
      if (this.text.length < this.letters) {
        this.text += letter;
      } else {
        this.text = this.text.replaceAt(this.text.length - 1, letter.toString());
      }
      return this.setText(this.text.rfill(" ", this.letters));
    };


    /**
    * An action-method to clear the letter at the current cursor position.
    *
    * @method action_removeLetter
    * @param {gs.Object_Base} sender The sender of the action.
    * @param {Object} [params=null] The params-object. Can be <b>null</b>.
     */

    Component_TextInput.prototype.action_removeLetter = function() {
      if (this.text.length > 0) {
        this.text = this.text.substring(0, this.text.length - 1);
      }
      return this.setText(this.text.rfill(" ", this.letters));
    };

    return Component_TextInput;

  })(gs.Component);

  gs.Component_TextInput = Component_TextInput;

}).call(this);
