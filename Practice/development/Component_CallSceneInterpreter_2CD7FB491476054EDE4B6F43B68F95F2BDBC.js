// Generated by CoffeeScript 1.12.7
(function() {
  var Component_CallSceneInterpreter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_CallSceneInterpreter = (function(superClass) {
    extend(Component_CallSceneInterpreter, superClass);

    Component_CallSceneInterpreter.objectCodecBlackList = gs.Component_CommandInterpreter.objectCodecBlackList;


    /**
    * A command interpreter used as a sub-interpreter to execute CallScene commands. See
    * gs.Component_CommandInterpreter for more information.
    *
    * @module gs
    * @class Component_CallSceneInterpreter
    * @extends gs.Component_CommandInterpreter
    * @memberof gs
     */

    function Component_CallSceneInterpreter() {
      Component_CallSceneInterpreter.__super__.constructor.apply(this, arguments);
    }


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    Component_CallSceneInterpreter.prototype.onDataBundleRestore = function(data, context) {
      var sceneDocument;
      sceneDocument = DataManager.getDocument(this.context.id);
      this.context.set(sceneDocument.uid, sceneDocument);
      return this.object = {
        commands: sceneDocument.items.commands
      };
    };

    return Component_CallSceneInterpreter;

  })(gs.Component_CommandInterpreter);

  vn.Component_CallSceneInterpreter = Component_CallSceneInterpreter;

}).call(this);
