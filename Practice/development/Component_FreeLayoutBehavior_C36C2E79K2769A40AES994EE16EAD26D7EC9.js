// Generated by CoffeeScript 1.12.7
(function() {
  var Component_FreeLayoutBehavior,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_FreeLayoutBehavior = (function(superClass) {
    extend(Component_FreeLayoutBehavior, superClass);


    /**
    * Turns a game object into a free-layout and layouts all sub-objects
    * at their specified positions. So that kind of layout allows each sub-object
    * to be freely positioned.
    * <br>
    * In addition, each sub-object can have different alignment options.
    *
    * @module gs
    * @class Component_FreeLayoutBehavior
    * @extends gs.Component_LayoutBehavior
    * @memberof gs
    * @constructor
     */

    function Component_FreeLayoutBehavior() {
      Component_FreeLayoutBehavior.__super__.constructor.apply(this, arguments);
    }


    /**
    * Sizes the layout to fit its content.
    *
    * @method sizeToFit
     */

    Component_FreeLayoutBehavior.prototype.sizeToFit = function() {
      var control, j, len, rect, ref, results;
      rect = this.object.dstRect;
      if (this.object.sizeToFit) {
        ref = this.object.subObjects;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          control = ref[j];
          if (!control.alignmentX) {
            rect.width = Math.max(control.margin.left + control.dstRect.width + control.margin.right, rect.width || 1);
          }
          if (!control.alignmentY) {
            results.push(rect.height = Math.max(control.margin.top + control.dstRect.height + control.margin.bottom, rect.height || 1));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };


    /**
    * Updates a specified control.
    *
    * @method updateControl
    * @protected
    * @param {gs.Object_Base} control The control to update
     */

    Component_FreeLayoutBehavior.prototype.updateControl = function(control) {
      var margin, rect;
      Component_FreeLayoutBehavior.__super__.updateControl.apply(this, arguments);
      rect = this.object.dstRect;
      margin = control.margin;
      if (control.alignmentX === 1) {
        control.dstRect.x = (rect.width - (control.dstRect.width + margin.right + margin.left)) / 2;
      } else if (control.alignmentX === 2) {
        control.dstRect.x = rect.width * this.object.zoom.x - (control.dstRect.width + control.margin.right) * control.zoom.x;
      }
      if (control.alignmentY === 1) {
        return control.dstRect.y = (rect.height * this.object.zoom.y - (control.dstRect.height + margin.bottom + margin.top) * control.zoom.y) / 2;
      } else if (control.alignmentY === 2) {
        return control.dstRect.y = rect.height - (control.dstRect.height + control.margin.bottom);
      }
    };


    /**
    * Layouts the sub-objects.
    *
    * @method update
     */

    Component_FreeLayoutBehavior.prototype.update = function() {
      var control, i, j, len, ref;
      Component_FreeLayoutBehavior.__super__.update.apply(this, arguments);
      ref = this.object.subObjects;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        control = ref[i];
        this.updateControl(control);
      }
      this.sizeToFit();
      return null;
    };

    return Component_FreeLayoutBehavior;

  })(gs.Component_LayoutBehavior);

  gs.Component_FreeLayoutBehavior = Component_FreeLayoutBehavior;

}).call(this);
