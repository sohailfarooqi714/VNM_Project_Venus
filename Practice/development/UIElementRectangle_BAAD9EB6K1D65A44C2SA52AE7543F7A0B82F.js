// Generated by CoffeeScript 1.12.7
(function() {
  var UIElementRectangle,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UIElementRectangle = (function(superClass) {
    extend(UIElementRectangle, superClass);


    /**
    * An ui rectangle is like a regular gs.Rect rectangle but if one of the
    * rectangle's coordinates is changed the <b>needsUpdate</b> property of the
    * assigned game object will be set to <b>true</b> to trigger a refresh.
    *
    * @module ui
    * @class UIElementRectangle
    * @extends gs.Rect
    * @memberof ui
    * @constructor
    * @params {Object} object - The UI object the rectangle belongs to.
     */

    function UIElementRectangle(object) {

      /**
      * The UI object the rectangle belongs to.
      * @property object
      * @type gs.Object_UIElement
       */
      this.object = object != null ? object : {};

      /**
      * The x-coordinate of the rectangle.
      * @property x
      * @type number
       */
      this.x = 0;

      /**
      * The y-coordinate of the rectangle.
      * @property y
      * @type number
       */
      this.y = 0;

      /**
      * The width of the rectangle.
      * @property width
      * @type number
       */
      this.width = 1;

      /**
      * The height of the rectangle.
      * @property height
      * @type number
       */
      this.height = 1;
    }

    UIElementRectangle.accessors("x", {
      set: function(x) {
        if (x !== this.x_) {
          this.x_ = x;
          return this.object.needsUpdate = true;
        }
      },
      get: function() {
        return this.x_;
      }
    });

    UIElementRectangle.accessors("y", {
      set: function(y) {
        if (y !== this.y_) {
          this.y_ = y;
          return this.object.needsUpdate = true;
        }
      },
      get: function() {
        return this.y_;
      }
    });

    UIElementRectangle.accessors("width", {
      set: function(width) {
        if (width !== this.width_) {
          this.width_ = width;
          return this.object.needsUpdate = true;
        }
      },
      get: function() {
        return this.width_;
      }
    });

    UIElementRectangle.accessors("height", {
      set: function(height) {
        if (height !== this.height_) {
          this.height_ = height;
          return this.object.needsUpdate = true;
        }
      },
      get: function() {
        return this.height_;
      }
    });

    UIElementRectangle.prototype.toRect = function() {
      return new gs.Rect(this.x, this.y, this.width, this.height);
    };

    UIElementRectangle.fromRect = function(object, rect) {
      var result;
      result = new ui.UIElementRectangle(object);
      result.x = rect.x;
      result.y = rect.y;
      result.width = rect.width;
      result.height = rect.height;
      return result;
    };

    return UIElementRectangle;

  })(Rect);

  ui.UIElementRectangle = UIElementRectangle;

}).call(this);
