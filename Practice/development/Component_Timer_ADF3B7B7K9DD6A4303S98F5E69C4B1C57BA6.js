// Generated by CoffeeScript 1.12.7
(function() {
  var Component_Timer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_Timer = (function(superClass) {
    extend(Component_Timer, superClass);


    /**
    * A component which adds timing-features to a game object. A timer-component
    * can be used as a regular timer or as a stop-watch.
    *
    * @module gs
    * @class Component_Timer
    * @extends gs.Component
    * @memberof gs
     */

    function Component_Timer() {
      Component_Timer.__super__.constructor.call(this);

      /**
      * Indicates if the timer is running. 
      *
      * @property isRunning
      * @type boolean
      * @readOnly
       */
      this.isRunning = false;

      /**
      * @property frameCount
      * @type number
      * @private
       */
      this.frameCount = 0;
    }


    /**
    * Starts the timer. 
    *
    * @method start
     */

    Component_Timer.prototype.start = function() {
      this.isRunning = true;
      if (this.object.stopWatch) {
        return this.frameCount = 0;
      } else {
        return this.frameCount = this.minutes * 60 * 60 + this.seconds * 60;
      }
    };


    /**
    * Stops the timer. 
    *
    * @method stop
     */

    Component_Timer.prototype.stop = function() {
      return this.isRunning = false;
    };


    /**
    * Resumes the timer. 
    *
    * @method resume
     */

    Component_Timer.prototype.resume = function() {
      return this.isRunning = true;
    };


    /**
    * Pauses the timer. 
    *
    * @method pause
     */

    Component_Timer.prototype.pause = function() {
      return this.isRunning = false;
    };


    /**
    * Updates the timer.
    *
    * @method update
     */

    Component_Timer.prototype.update = function() {
      if (this.object.stopWatch) {
        return this.updateStopWatch();
      } else {
        return this.updateTimer();
      }
    };


    /**
    * Updates the regular timer behavior
    *
    * @method updateTimer
     */

    Component_Timer.prototype.updateTimer = function() {
      var ref, seconds;
      if (this.isRunning && this.frameCount === 0) {
        this.isRunning = false;
        if ((ref = this.object.events) != null) {
          ref.emit("finish", this);
        }
      }
      if (!this.isRunning) {
        return;
      }
      seconds = Math.round(this.frameCount / 60);
      this.seconds = seconds % 60;
      this.minutes = Math.floor(seconds / 60);
      return this.frameCount--;
    };


    /**
    * Updates the stop-watch behavior
    *
    * @method updateStopWatch
     */

    Component_Timer.prototype.updateStopWatch = function() {
      var seconds;
      if (!this.isRunning) {
        return;
      }
      seconds = Math.round(this.frameCount / 60);
      this.seconds = seconds % 60;
      this.minutes = Math.floor(seconds / 60);
      return this.frameCount++;
    };

    return Component_Timer;

  })(gs.Component);

  gs.Component_Timer = Component_Timer;

}).call(this);
