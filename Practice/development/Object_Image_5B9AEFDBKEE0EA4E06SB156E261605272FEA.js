// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Image,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Image = (function(superClass) {
    extend(Object_Image, superClass);


    /**
    * An UI image object to display an image on screen.
    *
    * @module ui
    * @class Object_Image
    * @extends ui.Object_UIElement
    * @memberof ui
    * @constructor
     */

    function Object_Image(imageName, imageHandling) {
      Object_Image.__super__.constructor.apply(this, arguments);

      /**
      * The UI object's source rectangle on screen.
      * @property srcRect
      * @type gs.Rect
       */
      this.srcRect = null;

      /**
      * The UI object's rotation-angle in degrees. The rotation center depends on the
      * anchor-point.
      * @property angle
      * @type number
       */
      this.angle = 0;

      /**
      * The UI object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_Sprite
       */
      this.visual = new gs.Component_Sprite();

      /**
      * The UI object's bitmap used for visual presentation.
      * @property bitmap
      * @type gs.Bitmap
       */
      if (imageName) {
        if (imageName[0] === "$") {
          this.bitmap = ResourceManager.getBitmap(imageName);
        } else {
          this.bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + imageName);
        }
      }
      if (this.bitmap != null) {
        if (imageHandling === 1) {
          this.srcRect = new Rect(0, this.bitmap.height / 2, this.bitmap.width, this.bitmap.height / 2);
        } else {
          this.srcRect = new Rect(0, 0, this.bitmap.width || 1, this.bitmap.height || 1);
        }
        this.dstRect.set(0, 0, this.srcRect.width || 1, this.srcRect.height || 1);
      } else {
        this.srcRect = new Rect(0, 0, 1, 1);
        this.dstRect.set(0, 0, 1, 1);
      }
      this.addComponent(this.visual);
    }

    return Object_Image;

  })(ui.Object_UIElement);

  ui.Object_Image = Object_Image;

}).call(this);
