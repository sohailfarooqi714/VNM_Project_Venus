// Generated by CoffeeScript 1.12.7
(function() {
  var Component_MaskAnimation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_MaskAnimation = (function(superClass) {
    extend(Component_MaskAnimation, superClass);


    /**
    * Executes a mask-animation on a game-object.
    *
    * @module gs
    * @class Component_MaskAnimation
    * @extends gs.Component_Animation
    * @memberof gs
    * @constructor
     */

    function Component_MaskAnimation(data) {
      Component_MaskAnimation.__super__.constructor.apply(this, arguments);
      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
      this.callback = null;
      this.animationType = (data != null ? data.animationType : void 0) || 0;
    }


    /**
    * Serializes the mask-animation into a data-bundle.
    *
    * @method toDataBundle
     */

    Component_MaskAnimation.prototype.toDataBundle = function() {
      return {
        easing: this.easing,
        animationType: this.animationType
      };
    };


    /**
    * Updates the mask-animation.
    *
    * @method update
     */

    Component_MaskAnimation.prototype.update = function() {
      Component_MaskAnimation.__super__.update.call(this);
      if (!this.easing.isRunning) {
        return;
      }
      this.easing.updateValue();
      this.object.mask.value = this.easing.value;
      if (!this.easing.isRunning) {
        if (this.animationType < 1) {
          this.object.mask.source = null;
          this.object.mask.vague = 0;
        }
        this.animationType = 0;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      }
    };


    /**
    * Lets the game object appear on screen using a masking-effect.
    *
    * @method maskIn
    * @param {gs.Mask} mask The mask used for the animation.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MaskAnimation.prototype.maskIn = function(mask, duration, easing, callback) {
      var ref;
      this.easing.type = easing;
      this.animationType = 0;
      this.callback = callback;
      if (duration === 0 || this.isInstantSkip()) {
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        this.object.mask.type = 1;
        this.object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + ((ref = mask.graphic) != null ? ref.name : void 0));
        this.object.mask.vague = mask.vague;
        this.object.mask.value = 255;
        return this.easing.startValue(255, -255 - mask.vague, duration);
      }
    };


    /**
    * Lets the game object disappear from screen using a masking-effect.
    *
    * @method maskIn
    * @param {gs.Mask} mask The mask used for the animation.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MaskAnimation.prototype.maskOut = function(mask, duration, easing, callback) {
      var ref;
      this.easing.type = easing;
      this.animationType = 0;
      this.callback = callback;
      if (duration === 0 || this.isInstantSkip()) {
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        this.object.mask.type = 1;
        this.object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + ((ref = mask.graphic) != null ? ref.name : void 0));
        this.object.mask.vague = mask.vague;
        this.object.mask.value = 0;
        return this.easing.startValue(-mask.vague, 255 + mask.vague, duration);
      }
    };


    /**
    * Description follows...
    *
    * @method maskTo
    * @param {gs.Mask} mask The mask used for the animation.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback-function called when the animation is finished.
     */

    Component_MaskAnimation.prototype.maskTo = function(mask, duration, easing, callback) {
      var ref, ref1, ref2, ref3;
      this.easing.type = easing;
      this.animationType = 1;
      this.callback = callback;
      this.object.mask.type = 1;
      if (mask.sourceType === 0) {
        this.object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + ((ref = mask.graphic) != null ? ref.name : void 0));
      } else {
        if (((ref1 = this.object.mask.source) != null ? ref1.videoElement : void 0) != null) {
          this.object.mask.source.pause();
        }
        this.object.mask.source = ResourceManager.getVideo("Movies/" + mask.video.name);
        if ((ref2 = this.object.mask.source) != null) {
          ref2.play();
        }
        if ((ref3 = this.object.mask.source) != null) {
          ref3.loop = true;
        }
      }
      this.object.mask.vague = mask.vague;
      if (duration === 0 || this.isInstantSkip()) {
        this.animationType = 0;
        this.object.mask.value = mask.value;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        return this.easing.startValue(this.object.mask.value, mask.value - this.object.mask.value, duration);
      }
    };

    return Component_MaskAnimation;

  })(gs.Component_Animation);

  gs.Component_MaskAnimation = Component_MaskAnimation;

}).call(this);
