// Generated by CoffeeScript 1.12.7
(function() {
  var Component_Live2DAnimation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_Live2DAnimation = (function(superClass) {
    extend(Component_Live2DAnimation, superClass);


    /**
    * Executes an animation on specific Live2D model-parameter of the Live2D  game-object.
    *
    * @module gs
    * @class Component_Live2DAnimation
    * @extends gs.Component_Animation
    * @memberof gs
    * @constructor
     */

    function Component_Live2DAnimation(data) {
      Component_Live2DAnimation.__super__.constructor.apply(this, arguments);

      /**
      * The easing-object used for the animation.
      * @property easing
      * @type gs.Easing
       */
      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);

      /**
      * The parameter name to animate.
      * @property param
      * @type string
       */
      this.param = "";
    }


    /**
    * Serializes the animation into a data-bundle.
    *
    * @method toDataBundle
     */

    Component_Live2DAnimation.prototype.toDataBundle = function() {
      return {
        easing: this.easing
      };
    };


    /**
    * Updates the animation.
    *
    * @method update
     */

    Component_Live2DAnimation.prototype.update = function() {
      Component_Live2DAnimation.__super__.update.apply(this, arguments);
      if (!this.easing.isRunning) {
        return;
      }
      this.easing.updateValue();
      this.object.visual.l2dObject.setParameter(this.param, this.easing.value);
      if (!this.easing.isRunning) {
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      }
    };


    /**
    * Starts the animation.
    *
    * @method start
    * @param {string} param The name of the parameter to animate.
    * @param {number} value The target value.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback called if the animation has been finished.
     */

    Component_Live2DAnimation.prototype.start = function(param, value, duration, easingType, callback) {
      var currentValue;
      currentValue = this.object.visual.l2dObject.getParameter(param);
      this.param = param;
      this.callback = callback;
      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
      if (currentValue === value) {
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      }
      if (duration === 0 || this.isInstantSkip()) {
        this.object.visual.l2dObject.setParameter(param, value);
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        return this.easing.startValue(currentValue, value - currentValue, duration);
      }
    };

    return Component_Live2DAnimation;

  })(gs.Component_Animation);

  gs.Component_Live2DAnimation = Component_Live2DAnimation;

}).call(this);
