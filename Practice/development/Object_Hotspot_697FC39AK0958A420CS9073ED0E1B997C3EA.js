// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Hotspot,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Hotspot = (function(superClass) {
    extend(Object_Hotspot, superClass);

    Object.defineProperty(Object_Hotspot.prototype, "selected", {
      set: function(v) {
        return this.behavior.selected = v;
      },
      get: function() {
        return this.behavior.selected;
      }
    });


    /**
    * A hotspot object to define an area on the screen which can respond
    * to user-actions like mouse/touch actions. A hotspot can have multiple
    * images for different states like hovered, selected, etc.
    *
    * @module ui
    * @class Object_Hotspot
    * @extends ui.Object_UIElement
    * @memberof ui
    * @constructor
     */

    function Object_Hotspot(imageName, imageHandling, flipX) {
      Object_Hotspot.__super__.constructor.apply(this, arguments);

      /**
      * The UI object's source rectangle on screen.
      * @property srcRect
      * @type gs.Rect
       */
      this.srcRect = null;

      /**
      * The UI object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_Frame
       */
      this.visual = new gs.Component_Sprite();

      /**
      * The object's image-handling.
      * @property imageHandling
      * @type gs.ImageHandling
       */
      this.imageHandling = imageHandling != null ? imageHandling : 1;

      /**
      * A behavior-component to hotspot-specific behavior to the object.
      * @property behavior
      * @type gs.Component_HotspotBehavior
       */
      this.behavior = new gs.Component_HotspotBehavior();
      this.behavior.imageHandling = this.imageHandling;

      /**
      * The UI object's bitmap used for visual presentation.
      * @property bitmap
      * @type gs.Bitmap
       */
      this.bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + imageName);
      if (this.bitmap != null) {
        if (this.imageHandling === 1) {
          this.srcRect = new Rect(0, this.bitmap.height / 2, this.bitmap.width, this.bitmap.height / 2);
        } else {
          this.srcRect = new Rect(0, 0, this.bitmap.width || 1, this.bitmap.height || 1);
        }
        this.dstRect.set(0, 0, this.srcRect.width || 1, this.srcRect.height || 1);
      } else {
        this.srcRect = new Rect(0, 0, 1, 1);
        this.dstRect.set(0, 0, 1, 1);
      }
      if (flipX) {
        this.visual.mirror = true;
      }
      this.addComponent(this.behavior);
      this.addComponent(this.visual);
    }

    return Object_Hotspot;

  })(ui.Object_UIElement);

  ui.Object_Hotspot = Object_Hotspot;

}).call(this);
