// Generated by CoffeeScript 1.12.7
(function() {
  var Object_GridLayout,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_GridLayout = (function(superClass) {
    extend(Object_GridLayout, superClass);


    /**
    * A grid-layout which layouts all it sub-objects
    * in a grid of rows and columns.
    *
    * @module ui
    * @class Object_GridLayout
    * @extends ui.Object_UIElement
    * @memberof ui
    * @constructor
     */

    function Object_GridLayout(x, y, width, height, rows, columns) {
      Object_GridLayout.__super__.constructor.call(this);
      this.dstRect.set(x || 0, y || 0, width || 1, height || 1);

      /**
      * Indicates if the layout is resizable.
      * @property resizable
      * @type boolean
       */
      this.resizable = false;

      /**
      * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type vn.Component_Animator
       */
      this.animator = new gs.Component_Animator();

      /**
      * The layout's sub-objects.
      * @property controls
      * @type ui.Object_UIElement[]
       */
      this.controls = [];

      /**
      * Number of rows for the grid.
      * @property rows
      * @type number
       */
      this.rows = rows;

      /**
      * Number of columns for the grid.
      * @property columns
      * @type number
       */
      this.columns = columns;

      /**
      * The spacing between the cells of the grid.
      * @property cellSpacing
      * @type ui.Spacing
       */
      this.cellSpacing = [0, 0, 0, 0];

      /**
      * Indicates if the layouts resizes to fit its content.
      * @property sizeToFit
      * @type boolean
       */
      this.sizeToFit = false;

      /**
      * The behavior component to add grid-layout specific behavior.
      * @property behavior
      * @type gs.Component_GridLayoutBehavior
       */
      this.behavior = new gs.Component_GridLayoutBehavior();
      this.addComponent(this.behavior);
      this.addComponent(this.animator);
    }

    return Object_GridLayout;

  })(ui.Object_UIElement);

  ui.Object_GridLayout = Object_GridLayout;

}).call(this);
