// Generated by CoffeeScript 1.12.7
(function() {
  var CircularDistortionEffect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CircularDistortionEffect = (function(superClass) {
    extend(CircularDistortionEffect, superClass);


    /**
    * An example effect to show you how to define your own shader-based effects. It is important
    * that the name-property matches the name of the registered EffectInfo in gs.Main.setupEffects. Keep in mind that using
    * custom OpenGL/GLSL shaders binds your game to platforms with OpenGL support.
    *
    * All effects are fragment/pixel shaders by default.
    *
    * @module gs
    * @class CircularDistortionEffect
    * @extends gs.CircularDistortionEffect
    * @memberof gs
    * @constructor
     */

    function CircularDistortionEffect(data) {
      CircularDistortionEffect.__super__.constructor.call(this, data);
      this.type = gs.GraphicEffectType.BASE;
      this.name = "circularDistortion";
    }


    /**
    * Setup the effect for rendering. All uniforms/shader-inputs need to be set here.
    *
    * @method setup
    * @param {gs.Effect} effect - The shader-effect/program object which allows you to set uniforms.
    * @param {gs.RenderTask} task - The render-task object contains additional information about the object being rendered.
    * @param {gs.Texture2D} texture - The texture used for rendering.
     */

    CircularDistortionEffect.prototype.setup = function(effect, task, texture) {
      effect.setVector2Value("TextureMax", Graphics.width / texture.realWidth, Graphics.height / texture.realHeight);
      return effect.setFloatValue("CircDistTime", Graphics.frameCount / 50);
    };


    /**
    * Called before the graphics system is initialized to register your custom shader-based effect. See
    * gs.Main.setupEffects for more info.
    *
    * @method register
     */

    CircularDistortionEffect.register = function() {
      return gs.Effect.registerEffect(new gs.EffectInfo({
        type: gs.GraphicEffectType.BASE,
        name: "circularDistortion",
        defines: [""],
        uniforms: ["uniform sampler2D Texture0;", "uniform float CircDistTime;", "uniform vec2 TextureMax;"],
        varying: ["varying vec2 textureCoord;", "varying vec4 vColor;"],
        functionCalls: ["circular_distortion();"],
        functions: ["void circular_distortion()\n{\n    vec2 uv = textureCoord;\n    uv.x += sin(uv.y * 10.0 + CircDistTime) / 10.0;\n    uv.y += cos(uv.x * 10.0 + CircDistTime) / 10.0;\n\n    gl_FragColor = texture2D(Texture0, max(mod(uv, TextureMax), 0.0));\n    gl_FragColor[3] *= vColor[3]\n}"]
      }));
    };

    return CircularDistortionEffect;

  })(gs.GraphicEffect);

  gs.CircularDistortionEffect = CircularDistortionEffect;

}).call(this);
