// Generated by CoffeeScript 1.12.7
(function() {
  var RecordManager;

  RecordManager = (function() {

    /**
    * Manages the game's database and gives access to all data-records.
    *
    * @module gs
    * @class RecordManager
    * @memberof gs
    * @constructor
     */
    function RecordManager() {

      /**
      * Stores all data-record documents
      * @property documents
      * @type gs.Document[]
       */
      this.documents = null;

      /**
      * Stores all data-record documents by category > id.
      * @property collectionDocuments
      * @type gs.Document[][]
       */
      this.collectionDocuments = [];

      /**
      * Localizable strings of all data-record documents.
      * @property localizableStrings
      * @type Object
       */
      this.localizableStrings = {};

      /**
      * Indicates if all data-records are already translated.
      * @property translated
      * @type boolean
       */
      this.translated = false;

      /**
      * Indicates if all data-records are loaded and initialized.
      * @property initialized
      * @type boolean
       */
      this.initialized = false;
    }


    /**
    * Loads all data-record documents.
    *
    * @method load
     */

    RecordManager.prototype.load = function() {
      return this.documents = DataManager.getDocumentsByType("data_record");
    };


    /**
    * Initializes RecordManager and all loaded data-record documents for use. Needs to be
    * called before RecordManager can be used.
    *
    * @method initialize
     */

    RecordManager.prototype.initialize = function() {
      var color, document, i, iconSets, j, k, l, len, len1, len2, objectPosition, ref, ref1, ref2;
      iconSets = [];
      ref = this.documents;
      for (j = 0, len = ref.length; j < len; j++) {
        document = ref[j];
        if (this[document.items.category] == null) {
          this[document.items.category] = [];
          this[document.items.category + "Collection"] = [];
          this[document.items.category + "Array"] = [];
          this.collectionDocuments.push(this[document.items.category + "Collection"]);
        }
        if (document.items.id != null) {
          this[document.items.category][document.items.id] = document.items.data;
          this[document.items.category].push(document.items.data);
          this[document.items.category + "Collection"][document.items.id] = document;
          this[document.items.category + "Collection"].push(document);
          this[document.items.category + "Array"].push(document.items.data);
          document.items.data.index = document.items.id;
        }
        if ((document.items.data != null) && (document.items.data.icon != null)) {
          if (iconSets.indexOf(document.items.data.icon.name) === -1) {
            iconSets.push(document.items.data.icon.name);
          }
        }
        if (document.items.localizableStrings != null) {
          Object.mixin(this.localizableStrings, document.items.localizableStrings);
        }
      }
      this.system = this.system[0];
      this.system.iconSets = iconSets;
      if (this.system.colors) {
        ref1 = this.system.colors;
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          color = ref1[i];
          this.system.colors[i] = new Color(color);
        }
      }
      ref2 = this.system.objectPositions;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        objectPosition = ref2[l];
        if (!objectPosition) {
          continue;
        }
        objectPosition.func = eval("(function(object, params){" + objectPosition.script + "})");
      }
      return this.initialized = true;
    };


    /**
    * Translates all localizable fields for each data-record.
    *
    * @method translate
     */

    RecordManager.prototype.translate = function() {
      var document, j, len, ref, results;
      if (!this.translated) {
        this.translated = true;
        ref = this.documents;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          document = ref[j];
          if ((document.items.data.name != null) && (document.items.data.name.lcId != null)) {
            document.items.data.name = lcs(document.items.data.name);
          }
          if ((document.items.data.description != null) && (document.items.data.description.lcId != null)) {
            document.items.data.description = lcs(document.items.data.description);
          }
          if ((document.items.data.removeMessage != null) && (document.items.data.removeMessage.lcId != null)) {
            document.items.data.removeMessage = lcs(document.items.data.removeMessage);
          }
          if ((document.items.data.usingMessage != null) && (document.items.data.usingMessage.lcId != null)) {
            results.push(document.items.data.usingMessage = lcs(document.items.data.usingMessage));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    return RecordManager;

  })();

  window.RecordManager = new RecordManager();

}).call(this);
