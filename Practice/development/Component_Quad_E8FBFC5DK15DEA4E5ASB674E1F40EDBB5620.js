// Generated by CoffeeScript 1.12.7
(function() {
  var Component_Quad,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_Quad = (function(superClass) {
    extend(Component_Quad, superClass);


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    Component_Quad.prototype.onDataBundleRestore = function(data, context) {
      return this.setupEventHandlers();
    };


    /**
    * A quad component displays rectangle on the screen using the color
    * of the game object.
    *
    * @module gs
    * @class Component_Quad
    * @extends gs.Component
    * @memberof gs
    * @constructor
     */

    function Component_Quad() {
      Component_Quad.__super__.constructor.apply(this, arguments);

      /**
      * The native quad-object to display a colored rectangle on screen.
      * @property quad
      * @type gs.Quad
      * @protected
       */
      this.quad = null;
    }


    /**
    * Disposes the quad.
    * @method dispose
     */

    Component_Quad.prototype.dispose = function() {
      return this.quad.dispose();
    };


    /**
    * Adds event-handlers for mouse/touch events
    *
    * @method setupEventHandlers
     */

    Component_Quad.prototype.setupEventHandlers = function() {
      return this.quad.onIndexChange = (function(_this) {
        return function() {
          return _this.object.rIndex = _this.quad.index;
        };
      })(this);
    };


    /**
    * Sets up the quad.
    * @method setup
     */

    Component_Quad.prototype.setup = function() {
      this.isSetup = true;
      this.quad = new gs.Quad(Graphics.viewport);
      this.setupEventHandlers();
      return this.update();
    };


    /**
    * Updates the quad and its properties.
    * @method update
     */

    Component_Quad.prototype.update = function() {
      var ref;
      Component_Quad.__super__.update.apply(this, arguments);
      if (!this.isSetup) {
        this.setup();
      }
      this.object.rIndex = this.quad.index;
      this.quad.rect.set(this.object.dstRect.x, this.object.dstRect.y, this.object.dstRect.width, this.object.dstRect.height);
      this.quad.visible = this.object.visible;
      this.quad.ox = -this.object.origin.x;
      this.quad.oy = -this.object.origin.y;
      this.quad.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);
      this.quad.color = this.object.color || Colors.TRANSPARENT;
      this.quad.opacity = (ref = this.object.opacity) != null ? ref : 255;
      return this.quad.clipRect = this.object.clipRect;
    };

    return Component_Quad;

  })(gs.Component_Visual);

  gs.Component_Quad = Component_Quad;

}).call(this);
