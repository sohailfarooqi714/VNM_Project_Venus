// Generated by CoffeeScript 1.12.7
(function() {
  var Component_SpreadLayoutBehavior,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_SpreadLayoutBehavior = (function(superClass) {
    extend(Component_SpreadLayoutBehavior, superClass);


    /**
    * Turns a game object into a spread-layout and spreads all sub-objects
    * evenly over the layout-space vertically or horizontally. The game object needs a 
    * container-component.
    *
    * @module gs
    * @class Component_SpreadLayoutBehavior
    * @extends gs.Component_LayoutBehavior
    * @memberof gs
    * @constructor
     */

    function Component_SpreadLayoutBehavior(orientation) {
      Component_SpreadLayoutBehavior.__super__.constructor.apply(this, arguments);

      /**
      * The orientation of the spread-layout.
      * @property orientation
      * @type gs.Orientation.
       */
      this.orientation = orientation || 0;
    }


    /**
    * Updates the spread-layout.
    *
    * @method update
     */

    Component_SpreadLayoutBehavior.prototype.update = function() {
      Component_SpreadLayoutBehavior.__super__.update.apply(this, arguments);
      this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);
      if (this.orientation === 0) {
        return this.layoutHorizontal();
      } else {
        return this.layoutVertical();
      }
    };


    /**
    * Spreads all sub-objects evenly over the layout-space horizontally.
    *
    * @method layoutHorizontal
     */

    Component_SpreadLayoutBehavior.prototype.layoutHorizontal = function() {
      var control, count, i, j, rect, ref, y;
      count = this.object.controls.length;
      this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);
      y = 0;
      rect = this.object.dstRect;
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        control = this.object.controls[i];
        control.parent = this.object;
        control.update();
        control.dstRect.x = Math.floor((rect.width - control.dstRect.width) / (count - 1)) * i;
        if (!control.clipRect) {
          control.clipRect = this.object.clipRect;
        }
        if (control.alignmentY === 1) {
          control.dstRect.y = y + Math.round((rect.height - (control.dstRect.height + control.margin.top + control.margin.bottom)) / 2);
        }
      }
      if (this.object.clipRect != null) {
        return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);
      }
    };


    /**
    * Spreads all sub-objects evenly over the layout-space vertically.
    *
    * @method layoutHorizontal
     */

    Component_SpreadLayoutBehavior.prototype.layoutVertical = function() {
      var control, count, i, j, rect, ref, x;
      count = this.object.controls.length;
      this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);
      x = 0;
      rect = this.object.dstRect;
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        control = this.object.controls[i];
        control.parent = this.object;
        control.update();
        control.dstRect.y = Math.floor(rect.height / count) * i;
        if (!control.clipRect) {
          control.clipRect = this.object.clipRect;
        }
        if (control.alignmentX === 1) {
          control.dstRect.x = x + Math.round((rect.width - (control.dstRect.width + control.margin.left + control.margin.right)) / 2);
        }
      }
      if (this.object.clipRect != null) {
        return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);
      }
    };

    return Component_SpreadLayoutBehavior;

  })(gs.Component_LayoutBehavior);

  gs.Component_SpreadLayoutBehavior = Component_SpreadLayoutBehavior;

}).call(this);
