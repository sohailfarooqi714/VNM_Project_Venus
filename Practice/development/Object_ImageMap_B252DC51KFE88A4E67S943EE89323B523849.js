// Generated by CoffeeScript 1.12.7
(function() {
  var Object_ImageMap,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_ImageMap = (function(superClass) {
    extend(Object_ImageMap, superClass);

    Object_ImageMap.objectCodecBlackList = ["parent", "subObjects"];


    /**
    * An image-map object to display an image-map on screen. 
    *
    * @module gs
    * @class Object_ImageMap
    * @extends gs.Object_Visual
    * @memberof gs
    * @constructor
     */

    function Object_ImageMap() {
      Object_ImageMap.__super__.constructor.apply(this, arguments);

      /**
      * The names of the images used for the different states of the image-map.<br>
      *
      * - 0 = Ground Image
      * - 1 = Hovered
      * - 2 = Unselected
      * - 3 = Selected
      * - 4 = Selected Hovered
      *
      * @property images
      * @type string[]
       */
      this.images = [];

      /**
      * The hotspot data of the image-map. Each entry is a single hotspot on the image-map.
      * @property hotspots
      * @type gs.ImageMapHotspot[]
       */
      this.hotspots = [];

      /**
      * The domain the object belongs to.
      * @property domain
      * @type string
       */
      this.domain = "com.degica.vnm.default";

      /**
      * The color tone of the object used for the visual presentation.
      * @property tone
      * @type gs.Tone
       */
      this.tone = new gs.Tone(0, 0, 0, 0);

      /**
      * The color of the object used for the visual presentation.
      * @property color
      * @type gs.Color
       */
      this.color = new gs.Color(255, 255, 255, 0);

      /**
      * An event-emitter to emit events.
      * @property events
      * @type gs.Component_EventEmitter
       */
      this.events = new gs.Component_EventEmitter();

      /**
      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type vn.Component_Animator
       */
      this.animator = new gs.Component_Animator();

      /**
      * The object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_ImageMap
       */
      this.visual = new gs.Component_ImageMap();
      this.addComponent(this.animator);
      this.addComponent(this.visual);
      this.addComponent(this.events);
    }


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    return Object_ImageMap;

  })(gs.Object_Visual);

  gs.Object_ImageMap = Object_ImageMap;

}).call(this);
