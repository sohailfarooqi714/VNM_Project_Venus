// Generated by CoffeeScript 1.12.7
(function() {
  var Component_ZoomAnimation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_ZoomAnimation = (function(superClass) {
    extend(Component_ZoomAnimation, superClass);


    /**
    * Executes a zoom-animation on a game-object.
    *
    * @module gs
    * @class Component_ZoomAnimation
    * @extends gs.Component_Animation
    * @memberof gs
    * @constructor
     */

    function Component_ZoomAnimation(data) {
      Component_ZoomAnimation.__super__.constructor.apply(this, arguments);

      /**
      * The easing-object used for the animation.
      * @property easing
      * @type gs.Easing
       */
      this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
    }


    /**
    * Serializes the zoom-animation into a data-bundle.
    *
    * @method toDataBundle
     */

    Component_ZoomAnimation.prototype.toDataBundle = function() {
      return {
        easing: this.easing
      };
    };


    /**
    * Updates the zoom-animation.
    *
    * @method update
     */

    Component_ZoomAnimation.prototype.update = function() {
      Component_ZoomAnimation.__super__.update.apply(this, arguments);
      if (!this.easing.isRunning) {
        return;
      }
      this.easing.updatePosition();
      this.object.zoom.x = this.easing.x;
      this.object.zoom.y = this.easing.y;
      if (!this.easing.isRunning) {
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      }
    };


    /**
    * Starts the zoom-animation.
    *
    * @method zoomTo
    * @param {number} x The x-axis zoom-factor.
    * @param {number} y The y-axis zoom-factor.
    * @param {number} duration The duration in frames.
    * @param {Object} easingType The easing-type.
    * @param {function} [callback] An optional callback called if blending is finished.
     */

    Component_ZoomAnimation.prototype.start = function(x, y, duration, easingType, callback) {
      this.callback = callback;
      this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
      if (duration === 0 || this.isInstantSkip()) {
        this.object.zoom.x = x;
        this.object.zoom.y = y;
        return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
      } else {
        return this.easing.start(this.object.zoom.x, this.object.zoom.y, x, y, duration);
      }
    };

    return Component_ZoomAnimation;

  })(gs.Component_Animation);

  gs.Component_ZoomAnimation = Component_ZoomAnimation;

}).call(this);
