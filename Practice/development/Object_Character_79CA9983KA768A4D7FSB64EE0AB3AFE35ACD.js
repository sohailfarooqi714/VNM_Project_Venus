// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Character,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Character = (function(superClass) {
    extend(Object_Character, superClass);

    Object_Character.objectCodecBlackList = ["parent"];


    /**
    * A game object for a visual novel character. 
    *
    * @module vn
    * @class Object_Character
    * @extends gs.Object_Visual
    * @memberof vn
    * @constructor
     */

    function Object_Character(record, data) {
      var ref, ref1;
      Object_Character.__super__.constructor.call(this, data);

      /**
      * The object's source rectangle on screen.
      * @property srcRect
      * @type gs.Rect
       */
      this.srcRect = new Rect();

      /**
      * The object's z-index.
      * @property zIndex
      * @type number
       */
      this.zIndex = 200;

      /**
      * The object's mask.
      * @property mask
      * @type gs.Mask
       */
      this.mask = new gs.Mask();

      /**
      * The color tone of the object used for the visual presentation.
      * @property tone
      * @type gs.Tone
       */
      this.tone = new Tone(0, 0, 0, 0);

      /**
      * Indicates if the object's visual presentation should be mirrored horizontally.
      * @property mirror
      * @type boolean
       */
      this.mirror = (ref = data != null ? data.mirror : void 0) != null ? ref : false;

      /**
      * The object's image used for visual presentation.
      * @property image
      * @type string
       */
      this.image = "";

      /**
      * The ID of the character-record used.
      * @property rid
      * @type number
       */
      this.rid = (data != null ? data.id : void 0) || ((ref1 = record != null ? record.index : void 0) != null ? ref1 : -1);

      /**
      * The character's expression(database-record)
      * @property expression
      * @type Object
       */
      this.expression = RecordManager.characterExpressions[(data != null ? data.expressionId : void 0) || 0];

      /**
      * The character's behavior component which contains the character-specific logic.
      * @property behavior
      * @type vn.Component_CharacterBehavior
       */
      this.behavior = new vn.Component_CharacterBehavior();
      this.logic = this.behavior;

      /**
      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type vn.Component_Animator
       */
      this.animator = new gs.Component_Animator();

      /**
      * The object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_Sprite
       */
      this.visual = new gs.Component_Sprite();
      this.visual.imageFolder = "Graphics/Characters";
      this.addComponent(this.logic);
      this.addComponent(this.visual);
      this.addComponent(this.animator);
      this.componentsFromDataBundle(data);
    }


    /**
    * Restores the game object from a data-bundle.
    *
    * @method restore
    * @param {Object} data - The data-bundle.
     */

    Object_Character.prototype.restore = function(data) {
      Object_Character.__super__.restore.call(this, data);
      this.srcRect = gs.Rect.fromObject(data.srcRect);
      this.mask = gs.Mask.fromObject(data.mask);
      this.motionBlur = gs.MotionBlur.fromObject(data.motionBlur);
      return this.expression = RecordManager.characterExpressions[(data != null ? data.expressionId : void 0) || 0];
    };


    /**
    * Serializes the object into a data-bundle.
    *
    * @method toDataBundle
    * @return {Object} The data-bundle.
     */

    Object_Character.prototype.toDataBundle = function() {
      var components;
      components = this.componentsToDataBundle(gs.Component_Animation);
      return {
        rid: this.rid,
        dstRect: this.dstRect,
        srcRect: this.srcRect,
        opacity: this.opacity,
        zoom: this.zoom,
        angle: this.angle,
        anchor: this.anchor,
        zIndex: this.zIndex,
        offset: this.offset,
        motionBlur: this.motionBlur,
        mask: this.mask.toDataBundle(),
        mirror: this.mirror,
        expressionId: this.expression.index,
        components: components
      };
    };

    return Object_Character;

  })(gs.Object_Visual);

  vn.Object_Character = Object_Character;

}).call(this);
