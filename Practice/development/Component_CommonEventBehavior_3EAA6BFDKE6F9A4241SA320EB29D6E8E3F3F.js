// Generated by CoffeeScript 1.12.7
(function() {
  var Component_CommonEventBehavior,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component_CommonEventBehavior = (function(superClass) {
    extend(Component_CommonEventBehavior, superClass);


    /**
    * Called if this object instance is restored from a data-bundle. It can be used
    * re-assign event-handler, anonymous functions, etc.
    * 
    * @method onDataBundleRestore.
    * @param Object data - The data-bundle
    * @param gs.ObjectCodecContext context - The codec-context.
     */

    Component_CommonEventBehavior.prototype.onDataBundleRestore = function(data, context) {
      var ref;
      if (this.object.rid != null) {
        this.object.record = RecordManager.commonEvents[this.object.rid];
        if ((ref = this.object.interpreter) != null) {
          ref.object = this;
        }
        this.object.commands = this.object.record.commands;
      }
      return this.setupEventHandlers();
    };


    /**
    * A component which allows a game object to execute common-events.
    *
    * @module gs
    * @class Component_CommonEventBehavior
    * @extends gs.Component
    * @memberof gs
     */

    function Component_CommonEventBehavior() {
      Component_CommonEventBehavior.__super__.constructor.call(this);

      /**
      * @property readyToStart
      * @type boolean
      * @private
       */
      this.readyToStart = false;

      /**
      * @property initialized
      * @type boolean
      * @private
       */
      this.initialized = false;
      this.callDepth = 0;
    }


    /**
    * Serializes the component into a data-bundle.
    *
    * @method toDataBundle
    * @return {Object} The data-bundle.
     */

    Component_CommonEventBehavior.prototype.toDataBundle = function() {
      return {
        initialized: this.initialized,
        readyToStart: this.readyToStart
      };
    };


    /**
    * Restores the component from a data-bundle
    *
    * @method restore
    * @param {Object} bundle- The data-bundle.
     */

    Component_CommonEventBehavior.prototype.restore = function(data) {
      this.setup();
      this.readyToStart = data.readyToStart;
      return this.initialized = data.initialized;
    };


    /**
    * Adds event-handlers for mouse/touch events
    *
    * @method setupEventHandlers
     */

    Component_CommonEventBehavior.prototype.setupEventHandlers = function() {
      if (!this.object.interpreter) {
        return;
      }
      if (this.object.record.startCondition === 1) {
        return this.object.interpreter.onFinish = (function(_this) {
          return function() {
            var ref;
            if (!_this.object.record.parallel) {
              return (ref = _this.object.events) != null ? ref.emit("finish", _this) : void 0;
            }
          };
        })(this);
      } else {
        if (this.object.record.parallel) {
          return this.object.interpreter.onFinish = (function(_this) {
            return function(sender) {
              return _this.object.removeComponent(sender);
            };
          })(this);
        } else {
          return this.object.interpreter.onFinish = (function(_this) {
            return function(sender) {
              return _this.object.events.emit("finish", _this);
            };
          })(this);
        }
      }
    };


    /**
    * Initializes the common-event.
    *
    * @method setup
     */

    Component_CommonEventBehavior.prototype.setup = function() {
      GameManager.variableStore.setupLocalVariables(this.object.record);
      this.object.record.parameters = this.object.record.parameters != null ? this.object.record.parameters : [];
      this.object.record.startCondition = this.object.record.startCondition != null ? this.object.record.startCondition : 0;
      this.object.record.parallel = this.object.record.parallel != null ? this.object.record.parallel : false;
      this.object.record.conditionSwitch = this.object.record.conditionSwitch != null ? this.object.record.conditionSwitch : null;
      this.object.record.conditionEnabled = this.object.record.conditionEnabled;
      if (this.object.record.startCondition === 1) {
        this.object.interpreter = new gs.Component_CommandInterpreter();
        this.object.interpreter.onFinish = (function(_this) {
          return function() {
            var ref;
            if (!_this.object.record.parallel) {
              return (ref = _this.object.events) != null ? ref.emit("finish", _this) : void 0;
            } else {
              return _this.restart();
            }
          };
        })(this);
        this.object.interpreter.context.set(this.object.record.index, this.object.record);
        this.object.addComponent(this.object.interpreter);
      }
      return this.initialized = true;
    };


    /**
    * Starts the common-event interpreter with the specified parameters.
    * 
    * @method start
    * @param {Object} parameters The common-event's parameters which can be configured in database.
     */

    Component_CommonEventBehavior.prototype.start = function(parameters) {
      var ref, ref1;
      this.startParameters = parameters;
      if ((this.object.interpreter != null) && !this.object.interpreter.isRunning) {
        this.object.commands = this.object.record.commands;
        this.readyToStart = true;
        if ((ref = this.object.events) != null) {
          ref.emit("start", this);
        }
      }
      if (this.object.record.startCondition === 0 && this.object.record.parallel) {
        return (ref1 = this.object.events) != null ? ref1.emit("finish", this) : void 0;
      }
    };


    /**
    * Initializes variable-store with the start-up parameters configured for the
    * common-event in Database.
    *
    * @method setupParameters
     */

    Component_CommonEventBehavior.prototype.setupParameters = function(parameters, parentContext) {
      var i, j, parameter, ref, results, value;
      if ((parameters != null) && (parameters.values != null)) {
        results = [];
        for (i = j = 0, ref = parameters.values.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          value = parameters.values[i];
          parameter = this.object.record.parameters[i];
          if ((parameter != null) && (value != null)) {
            GameManager.variableStore.setupTempVariables(parentContext);
            switch (parameter.type) {
              case 1:
                value = GameManager.variableStore.numberValueOf(value);
                GameManager.variableStore.setupTempVariables(this.object.interpreter.context);
                results.push(GameManager.variableStore.setNumberValueTo(parameter.numberVariable, value));
                break;
              case 2:
                value = GameManager.variableStore.booleanValueOf(value);
                GameManager.variableStore.setupTempVariables(this.object.interpreter.context);
                results.push(GameManager.variableStore.setBooleanValueTo(parameter.booleanVariable, value));
                break;
              case 3:
                value = GameManager.variableStore.stringValueOf(value);
                GameManager.variableStore.setupTempVariables(this.object.interpreter.context);
                results.push(GameManager.variableStore.setStringValueTo(parameter.stringVariable, value));
                break;
              default:
                results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };


    /**
    * Calls the common-event with the specified parameters.
    *
    * @method call
    * @param {Object} parameters The common-event's parameters which can be configured in database.
     */

    Component_CommonEventBehavior.prototype.call = function(parameters, settings, parentContext) {
      var interpreter;
      if (!this.object.record.singleInstance) {
        interpreter = new gs.Component_CommandInterpreter();
        interpreter.context.set(this.object.record.index + "_" + this.callDepth, this.object.record);
        GameManager.variableStore.clearTempVariables(interpreter.context);
        this.object.commands = this.object.record.commands;
        this.callDepth++;
      } else {
        interpreter = this.object.interpreter || new gs.Component_CommandInterpreter();
        interpreter.context.set(this.object.record.index, this.object.record);
        this.object.commands = this.object.record.commands;
      }
      interpreter.repeat = false;
      interpreter.object = this.object;
      if (settings) {
        interpreter.settings = settings;
      }
      this.object.interpreter = interpreter;
      GameManager.variableStore.setupTempVariables(interpreter.context);
      this.setupParameters(parameters, parentContext);
      if (this.object.record.parallel) {
        interpreter.onFinish = (function(_this) {
          return function(sender) {
            _this.object.removeComponent(sender);
            if (!_this.object.record.singleInstance) {
              return _this.callDepth--;
            }
          };
        })(this);
        interpreter.start();
        this.object.addComponent(interpreter);
        return null;
      } else {
        interpreter.onFinish = (function(_this) {
          return function(sender) {
            return _this.object.events.emit("finish", _this);
          };
        })(this);
        return interpreter;
      }
    };


    /**
    * Stops the common-event interpreter.
    *
    * @method stop
     */

    Component_CommonEventBehavior.prototype.stop = function() {
      var ref;
      if (this.object.interpreter != null) {
        this.object.interpreter.stop();
        return (ref = this.object.events) != null ? ref.emit("finish", this) : void 0;
      }
    };


    /**
    * Resumes a paused common-event interpreter.
    *
    * @method resume
     */

    Component_CommonEventBehavior.prototype.resume = function() {
      var ref, ref1;
      if (this.object.interpreter != null) {
        this.object.interpreter.resume();
        if ((ref = this.object.events) != null) {
          ref.emit("start", this);
        }
        return (ref1 = this.object.events) != null ? ref1.emit("resume", this) : void 0;
      }
    };


    /**
    * Restarts the common event. If the common event has a condition then the restart
    * will only happen if that condition is true.
    *
    * @method restart
     */

    Component_CommonEventBehavior.prototype.restart = function() {
      if (this.object.record.conditionEnabled) {
        if (GameManager.variableStore.booleanValueOf(this.object.record.conditionSwitch)) {
          return this.start();
        }
      } else {
        return this.start();
      }
    };


    /**
    * Restarts the common event if it is parallel and the conditions are met.
    *
    * @method restartIfNecessary
     */

    Component_CommonEventBehavior.prototype.restartIfNecessary = function() {
      if ((this.object.interpreter != null) && this.object.record.startCondition === 1 && !this.object.interpreter.isRunning) {
        return this.restart();
      }
    };


    /**
    * Updates the common-event interpreter.
    *
    * @method update
     */

    Component_CommonEventBehavior.prototype.update = function() {
      if (!this.initialized) {
        this.setup();
      }
      if ((this.object.interpreter != null) && this.readyToStart) {
        this.readyToStart = false;
        this.setupParameters(this.startParameters);
        this.object.interpreter.start();
      }
      return this.restartIfNecessary();
    };


    /**
    * Not implemented yet.
    *
    * @method erase
     */

    Component_CommonEventBehavior.prototype.erase = function() {};

    return Component_CommonEventBehavior;

  })(gs.Component);

  gs.Component_CommonEventBehavior = Component_CommonEventBehavior;

}).call(this);
