// Generated by CoffeeScript 1.12.7
(function() {
  var Object_Video,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object_Video = (function(superClass) {
    extend(Object_Video, superClass);

    Object_Video.objectCodecBlackList = ["parent"];


    /**
    * A game object used for custom texts in a scene.
    *
    * @module gs
    * @class Object_Video
    * @extends gs.Object_Visual
    * @memberof gs
    * @constructor
     */

    function Object_Video(data) {
      Object_Video.__super__.constructor.apply(this, arguments);

      /**
      * The object's source rectangle. It controls which part of the object's image is used
      * for visual presentation.
      * @property srcRect
      * @type gs.Rect
       */
      this.srcRect = new Rect();

      /**
      * The object's mask to execute masking-effects on it.
      * @property mask
      * @type gs.Mask
       */
      this.mask = new gs.Mask();

      /**
      * Indicates if the object's visual presentation should be mirrored horizontally.
      * @property mirror
      * @type boolean
       */
      this.mirror = false;

      /**
      * The domain the object belongs to.
      * @property domain
      * @type string
       */
      this.domain = "com.degica.vnm.default";

      /**
      * The name of the video resource used for the visual presentation.
      * @property video
      * @type string
       */
      this.video = "";

      /**
      * Indicates if the video should be looped. The default is <b>false</b>
      * @property loop
      * @type boolean
       */
      this.loop = false;

      /**
      * The rotation-angle of the picture in degrees. The rotation center depends on the
      * anchor-point.
      * @property angle
      * @type number
       */
      this.angle = 0;

      /**
      * The color tone of the object used for the visual presentation.
      * @property tone
      * @type gs.Tone
       */
      this.tone = new Tone(0, 0, 0, 0);

      /**
      * The color of the object used for the visual presentation.
      * @property color
      * @type gs.Color
       */
      this.color = new Color(255, 255, 255, 0);

      /**
      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type vn.Component_Animator
       */
      this.animator = new gs.Component_Animator();

      /**
      * The object's visual-component to display the game object on screen.
      * @property visual
      * @type gs.Component_Sprite
       */
      this.visual = new gs.Component_Sprite();
      this.addComponent(this.visual);
      this.addComponent(this.animator);
      this.componentsFromDataBundle(data);
      this.update();
    }


    /**
    * Serializes the object into a data-bundle.
    *
    * @method toDataBundle
    * @return {Object} The data-bundle.
     */

    Object_Video.prototype.toDataBundle = function() {
      var components, result;
      components = this.componentsToDataBundle(gs.Component_Animation);
      result = {
        components: components,
        visible: this.visible,
        dstRect: this.dstRect,
        srcRect: this.srcRect,
        opacity: this.opacity,
        origin: this.origin,
        zIndex: this.zIndex,
        mask: this.mask.toDataBundle(),
        motionBlur: this.motionBlur,
        zoom: this.zoom,
        angle: this.angle,
        anchor: this.anchor,
        offset: this.offset,
        mirror: this.mirror,
        video: this.video,
        loop: this.loop
      };
      return result;
    };

    return Object_Video;

  })(gs.Object_Visual);

  gs.Object_Video = Object_Video;

}).call(this);
